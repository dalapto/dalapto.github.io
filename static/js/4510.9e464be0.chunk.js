"use strict";(self.webpackChunkreact=self.webpackChunkreact||[]).push([[4510],{151:function(e,t,n){function a(){return new Float32Array(4)}function i(e,t,n,a){var i=new Float32Array(4);return i[0]=e,i[1]=t,i[2]=n,i[3]=a,i}function o(){return a()}function r(){return i(1,1,1,1)}function l(){return i(1,0,0,0)}function s(){return i(0,1,0,0)}function u(){return i(0,0,1,0)}function c(){return i(0,0,0,1)}n.d(t,{f:function(){return i}});var f=o(),d=r(),_=l(),v=s(),m=u(),p=c();Object.freeze(Object.defineProperty({__proto__:null,ONES:d,UNIT_W:p,UNIT_X:_,UNIT_Y:v,UNIT_Z:m,ZEROS:f,clone:function(e){var t=new Float32Array(4);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t},create:a,createView:function(e,t){return new Float32Array(e,t,4)},fromValues:i,ones:r,unitW:c,unitX:l,unitY:s,unitZ:u,zeros:o},Symbol.toStringTag,{value:"Module"}))},62272:function(e,t,n){n.d(t,{U:function(){return ae}});var a=n(13594),i=n(15671),o=n(43144),r=n(60136),l=n(29388),s=n(151),u=n(84319),c=n(3886),f=n(52120),d=n(8548),_=n(96721),v=function(e){(0,r.Z)(n,e);var t=(0,l.Z)(n);function n(){var e;return(0,i.Z)(this,n),(e=t.apply(this,arguments))._color=(0,s.f)(0,1,0,1),e}return(0,o.Z)(n,[{key:"dispose",value:function(){this._program&&this._program.dispose()}},{key:"prepareState",value:function(e){var t=e.context;t.setStencilTestEnabled(!0),t.setBlendingEnabled(!1),t.setFaceCullingEnabled(!1),t.setColorMask(!1,!1,!1,!1),t.setStencilOp(d.xS.KEEP,d.xS.KEEP,d.xS.REPLACE),t.setStencilWriteMask(255),t.setStencilFunction(d.wb.ALWAYS,0,255)}},{key:"draw",value:function(e,t){var n=e.context,a=e.state,i=e.requestRender,o=e.allowDelayedRender,r=(0,u.cM)("clip",{geometry:[{location:0,name:"a_pos",count:2,type:d.g.SHORT}]}),l=t.getVAO(n,a,r.attributes,r.bufferLayouts);null!=l.indexBuffer&&(this._program||(this._program=(0,_.H)(n,f.O)),!o||null==i||this._program.compiled?(n.useProgram(this._program),this._program.setUniform2fv("u_coord_range",[1,1]),this._program.setUniform4fv("u_color",this._color),this._program.setUniformMatrix3fv("u_dvsMat3",a.displayMat3),n.bindVAO(l),n.drawElements(d.MX.TRIANGLES,l.indexBuffer.size,d.g.UNSIGNED_INT,0),n.bindVAO()):i())}}]),n}(c.Z),m=n(94109),p=function(e){(0,r.Z)(n,e);var t=(0,l.Z)(n);function n(){var e;return(0,i.Z)(this,n),(e=t.apply(this,arguments))._desc={vsPath:"overlay/overlay",fsPath:"overlay/overlay",attributes:new Map([["a_pos",0],["a_uv",1]])},e}return(0,o.Z)(n,[{key:"dispose",value:function(){}},{key:"prepareState",value:function(e){var t=e.context;t.setBlendingEnabled(!0),t.setColorMask(!0,!0,!0,!0),t.setBlendFunctionSeparate(d.zi.ONE,d.zi.ONE_MINUS_SRC_ALPHA,d.zi.ONE,d.zi.ONE_MINUS_SRC_ALPHA),t.setStencilWriteMask(0),t.setStencilTestEnabled(!0),t.setStencilFunction(d.wb.GREATER,255,255)}},{key:"draw",value:function(e,t){var n=e.context,a=e.painter,i=e.requestRender,o=e.allowDelayedRender;if(t.isReady){var r=t.computedOpacity,l=t.dvsMat3,s=t.isWrapAround,c=t.perspectiveTransform,f=t.texture;e.timeline.begin(this.name);var _=a.materialManager.getProgram(this._desc);if(!o||null==i||_.compiled){var v=(0,u.cM)("overlay",{geometry:[{location:0,name:"a_pos",count:2,type:d.g.FLOAT}],tex:[{location:1,name:"a_uv",count:2,type:d.g.UNSIGNED_SHORT}]}),p=t.getVAO(n,v.bufferLayouts,v.attributes);if(p){n.bindVAO(p),n.useProgram(_),n.bindTexture(f,m.Ic),_.setUniformMatrix3fv("u_dvsMat3",l),_.setUniform1i("u_texture",m.Ic),_.setUniform1f("u_opacity",r),_.setUniform2fv("u_perspective",c);var g=s?10:4;n.drawArrays(d.MX.TRIANGLE_STRIP,0,g),n.bindVAO(),e.timeline.end(this.name)}}else i()}}}]),n}(c.Z),g=n(11752),h=n(61120),x=n(92026),y=n(84936),S=n(80613),T=n(94636),b=n(54815),I=n(98029);var E=function(e){(0,r.Z)(n,e);var t=(0,l.Z)(n);function n(){return(0,i.Z)(this,n),t.apply(this,arguments)}return(0,o.Z)(n,[{key:"dispose",value:function(){}},{key:"getGeometryType",value:function(){return S.LW.FILL}},{key:"supportsSymbology",value:function(e){return e!==S.mD.DOT_DENSITY}},{key:"drawGeometry",value:function(e,t,n,a){var i,o=e.context,r=e.painter,l=e.rendererInfo,s=e.requiredLevel,c=e.passOptions,f=e.requestRender,_=e.allowDelayedRender,v=b.dk.load(n.materialKey),p=(0,I.a1)(v.data),g=null!=c&&"hittest"===c.type,h=r.materialManager,x=null!==(i=p.programSpec)&&void 0!==i?i:function(e){var t={geometry:[{location:0,name:"a_pos",count:2,type:d.g.SHORT},{location:1,name:"a_id",count:3,type:d.g.UNSIGNED_BYTE},{location:2,name:"a_bitset",count:1,type:d.g.UNSIGNED_BYTE},{location:3,name:"a_color",count:4,type:d.g.UNSIGNED_BYTE,normalized:!0},{location:4,name:"a_aux1",count:4,type:d.g.UNSIGNED_SHORT},{location:5,name:"a_aux2",count:4,type:d.g.SHORT},{location:6,name:"a_aux3",count:4,type:d.g.UNSIGNED_BYTE},{location:7,name:"a_zoomRange",count:2,type:d.g.UNSIGNED_SHORT}]};switch(e.symbologyType){case S.mD.SIMPLE:case S.mD.OUTLINE_FILL_SIMPLE:t.geometry.splice(7,1),t.geometry.splice(4,1)}return{shader:"materials/fill",vertexLayout:t}}(v),y=x.shader,T=x.vertexLayout,E=x.hittestAttributes,O=d.MX.TRIANGLES,C=(0,u.cM)(v.data,T);g&&(C=this._getTriangleDesc(n.materialKey,C,E),O=d.MX.POINTS);var A=C,L=A.attributes,D=A.bufferLayouts,R=h.getMaterialProgram(e,v,y,L,a);if(!_||null==f||R.compiled){o.useProgram(R),this._setSharedUniforms(R,e,t);var P=t.key,N=P.row,M=P.col*m.I_,z=N*m.I_;if(R.setUniform2f("u_tileOffset",M%m.qf,z%m.qf),R.setUniform2f("u_maxIntNumOfCrossing",Math.floor(M/m.qf),Math.floor(z/m.qf)),v.textureBinding){r.textureManager.bindTextures(o,R,v);var w=1/Math.pow(2,s-t.key.level);R.setUniform1f("u_zoomFactor",w)}var F=1/e.pixelRatio;R.setUniform1f("u_blur",F),R.setUniform1f("u_antialiasing",F),this._setSizeVVUniforms(v,R,l,t),this._setColorAndOpacityVVUniforms(v,R,l);var V=n.target.getVAO(o,D,L,g),U=n.indexCount,B=n.indexFrom*Uint32Array.BYTES_PER_ELEMENT;g&&(U/=3,B/=3),o.bindVAO(V),this._drawFills(e,t,R,O,U,B)}else f()}},{key:"_drawFills",value:function(e,t,n,a,i,o){e.context.drawElements(a,i,d.g.UNSIGNED_INT,o)}}]),n}(T.Z),O=n(44070),C=n(53634),A=n(15880),L=n(3479),D=n(57808),R=n(52311),P=n(45412),N=function(e){(0,r.Z)(n,e);var t=(0,l.Z)(n);function n(){var e;return(0,i.Z)(this,n),(e=t.apply(this,arguments))._dotTextureSize=0,e._dotTextures=null,e._dotSamplers=new Int32Array([m.kF,m.yP]),e._dotVAO=null,e._dotDesc={vsPath:"dot/dot",fsPath:"dot/dot",attributes:new Map([["a_pos",0]])},e}return(0,o.Z)(n,[{key:"dispose",value:function(){(0,g.Z)((0,h.Z)(n.prototype),"dispose",this).call(this),this._disposeTextures(),this._dotFBO=(0,x.M2)(this._dotFBO),this._dotVAO=(0,x.M2)(this._dotVAO)}},{key:"getGeometryType",value:function(){return S.LW.FILL}},{key:"supportsSymbology",value:function(e){return e===S.mD.DOT_DENSITY}},{key:"_drawFills",value:function(e,t,a,i,o,r){var l=e.passOptions;if(null!=l&&"hittest"===l.type)(0,g.Z)((0,h.Z)(n.prototype),"_drawFills",this).call(this,e,t,a,i,o,r);else{var s=this._drawDotLocations(e,t,a,o,r);this._drawDotDensity(e,t,s)}}},{key:"_drawDotDensity",value:function(e,t,n){var a=e.context,i=e.painter,o=e.rendererInfo,r=e.requestRender,l=e.allowDelayedRender,s=i.materialManager.getProgram(this._dotDesc);if(!l||null==r||s.compiled){var u=o.rendererSchema;(0,I.t4)(u,"dot-density");var c=this._createDotDensityMesh(a,this._dotDesc.attributes,{geometry:[{name:"a_pos",count:2,type:d.g.SHORT,divisor:0,normalized:!1,offset:0,stride:4}]});a.setStencilTestEnabled(!0),a.useProgram(s),s.setUniform1f("u_tileZoomFactor",1),s.setUniform1i("u_texture",this._dotSamplers[0]),s.setUniform1f("u_dotSize",Math.max(u.dotSize,1)),s.setUniform1f("u_pixelRatio",window.devicePixelRatio),this._setSharedUniforms(s,e,t),a.bindTexture(n,this._dotSamplers[0]),a.bindVAO(c),a.drawArrays(d.MX.POINTS,0,262144)}else r()}},{key:"_drawDotLocations",value:function(e,t,n,a,i){var o=e.context,r=e.rendererInfo,l=e.requiredLevel,s=o.getViewport(),u=r.rendererSchema;(0,I.t4)(u,"dot-density");var c=u.dotScale,f=u.colors,_=u.activeDots,v=u.backgroundColor,p=u.dotValue;o.setViewport(0,0,512,512);var g=o.getBoundFramebufferObject(),h=this._createFBO(o);o.bindFramebuffer(h),o.setClearColor(0,0,0,0),o.clear(o.gl.COLOR_BUFFER_BIT|o.gl.STENCIL_BUFFER_BIT),o.setStencilTestEnabled(!1);var x=1/Math.pow(2,l-t.key.level),y=m.I_,S=y*window.devicePixelRatio*y*window.devicePixelRatio,T=1/x*(1/x),b=c?e.state.scale/c:1;return n.setUniform1f("u_tileZoomFactor",x),n.setUniform1f("u_tileDotsOverArea",S/(m.I_*window.devicePixelRatio*m.I_*window.devicePixelRatio)),n.setUniformMatrix4fv("u_dotColors",f),n.setUniform4fv("u_isActive",_),n.setUniform4fv("u_dotBackgroundColor",v),n.setUniform1f("u_dotValue",Math.max(1,p*b*T)),this._bindDotDensityTextures(o,n,r,y),o.drawElements(d.MX.TRIANGLES,a,d.g.UNSIGNED_INT,i),o.setViewport(s.x,s.y,s.width,s.height),o.bindFramebuffer(g),h.colorTexture}},{key:"_createFBO",value:function(e){if(null==this._dotFBO){var t=new R.X(512,512);t.samplingMode=d.cw.NEAREST,t.wrapMode=d.e8.CLAMP_TO_EDGE;var n=new A.r(e,new L.Y(d.Tg.DEPTH_STENCIL,512,512));this._dotFBO=new C.X(e,t,n)}return this._dotFBO}},{key:"_disposeTextures",value:function(){if(this._dotTextures){for(var e=0;e<this._dotTextures.length;e++)this._dotTextures[e].dispose();this._dotTextures=null}}},{key:"_bindDotDensityTextures",value:function(e,t,n,a){var i=n.rendererSchema;(0,I.t4)(i,"dot-density");var o=this._createDotDensityTextures(e,a,i.seed);t.setUniform1iv("u_dotTextures",this._dotSamplers);for(var r=0;r<o.length;r++)e.bindTexture(o[r],this._dotSamplers[r])}},{key:"_createDotDensityMesh",value:function(e,t,n){if(null==this._dotVAO){for(var a=new Int16Array(524288),i=0;i<512;i++)for(var o=0;o<512;o++)a[2*(o+512*i)]=o,a[2*(o+512*i)+1]=i;var r=O.f.createVertex(e,d.l1.STATIC_DRAW,a);this._dotVAO=new P.U(e,t,n,{geometry:r},null)}return this._dotVAO}},{key:"_createDotDensityTextures",value:function(e,t,n){if(this._dotTextureSize===t&&this._seed===n||(this._disposeTextures(),this._dotTextureSize=t,this._seed=n),null===this._dotTextures){var a=new y.Z(n);this._dotTextures=[this._allocDotDensityTexture(e,t,a),this._allocDotDensityTexture(e,t,a)]}return this._dotTextures}},{key:"_allocDotDensityTexture",value:function(e,t,n){for(var a=new Float32Array(t*t*4),i=0;i<a.length;i++)a[i]=n.getFloat();var o=new R.X;return o.dataType=d.Br.FLOAT,o.samplingMode=d.cw.NEAREST,o.width=t,o.height=t,new D.x(e,o,a)}}]),n}(E),M=n(64337),z=n(52424),w=n(82386),F=function(e){(0,r.Z)(n,e);var t=(0,l.Z)(n);function n(){return(0,i.Z)(this,n),t.apply(this,arguments)}return(0,o.Z)(n,[{key:"supportsSymbology",value:function(e){return e===S.mD.PIE_CHART}},{key:"_drawMarkers",value:function(e,t,n,a,i,o,r){var l=e.context,s=e.rendererInfo.rendererSchema;(0,I.t4)(s,"pie-chart"),n.setUniform4fv("u_colors",s.colors),n.setUniform4fv("u_defaultColor",s.defaultColor),n.setUniform4fv("u_othersColor",s.othersColor),n.setUniform4fv("u_outlineColor",s.outlineColor),n.setUniform1f("u_donutRatio",s.holePercentage),n.setUniform1f("u_sectorThreshold",s.sectorThreshold),n.setUniform1f("u_outlineWidth",s.outlineWidth),l.drawElements(a,i,d.g.UNSIGNED_INT,o)}}]),n}(w.Z),V=n(40655),U=n(37762),B=n(16889),G=n(23588),k=n(73271),Z=function(e){(0,r.Z)(n,e);var t=(0,l.Z)(n);function n(){var e;return(0,i.Z)(this,n),(e=t.apply(this,arguments))._color=(0,s.f)(1,0,0,1),e._patternMatrix=(0,G.c)(),e._programOptions={id:!1,pattern:!1},e}return(0,o.Z)(n,[{key:"dispose",value:function(){this._vao&&(this._vao.dispose(),this._vao=null)}},{key:"drawMany",value:function(e,t){var n=e.context,a=e.painter,i=e.styleLayerUID,o=e.requestRender,r=e.allowDelayedRender;this._loadWGLResources(e);var l,s,u=e.displayLevel,c=e.styleLayer,f=c.backgroundMaterial,_=a.vectorTilesMaterialManager,v=c.getPaintValue("background-color",u),p=c.getPaintValue("background-opacity",u),g=c.getPaintValue("background-pattern",u),h=void 0!==g,x=v[3]*p,y=1|window.devicePixelRatio,T=e.spriteMosaic,b=y>m.a?2:1,I=e.drawPhase===S.jx.HITTEST,E=this._programOptions;E.id=I,E.pattern=h;var O=_.getMaterialProgram(n,f,E);if(!r||null==o||O.compiled){if(n.bindVAO(this._vao),n.useProgram(O),h){var C=T.getMosaicItemPosition(g,!0);if(null!=C){var A=C.tl,L=C.br,D=C.page;l=L[0]-A[0],s=L[1]-A[1];var R=T.getPageSize(D);null!=R&&(T.bind(n,d.cw.LINEAR,D,m.V4),O.setUniform4f("u_tlbr",A[0],A[1],L[0],L[1]),O.setUniform2fv("u_mosaicSize",R),O.setUniform1i("u_texture",m.V4))}O.setUniform1f("u_opacity",p)}else this._color[0]=x*v[0],this._color[1]=x*v[1],this._color[2]=x*v[2],this._color[3]=x,O.setUniform4fv("u_color",this._color);if(O.setUniform1f("u_depth",c.z||0),I){var P=(0,k.Au)(i+1);O.setUniform4fv("u_id",P)}var N,M=(0,U.Z)(t);try{for(M.s();!(N=M.n()).done;){var z=N.value;if(O.setUniform1f("u_coord_range",z.rangeX),O.setUniformMatrix3fv("u_dvsMat3",z.transforms.dvs),h){var w=Math.max(Math.pow(2,Math.round(u)-z.key.level),1),F=b*z.width*w,V=F/(0,B.fp)(l),G=F/(0,B.fp)(s);this._patternMatrix[0]=V,this._patternMatrix[4]=G,O.setUniformMatrix3fv("u_pattern_matrix",this._patternMatrix)}n.setStencilFunction(d.wb.EQUAL,0,255),n.drawArrays(d.MX.TRIANGLE_STRIP,0,4)}}catch(Z){M.e(Z)}finally{M.f()}}else o()}},{key:"_loadWGLResources",value:function(e){if(!this._vao){var t=e.context,n=e.styleLayer.backgroundMaterial,a=new Int8Array([0,0,1,0,0,1,1,1]),i=O.f.createVertex(t,d.l1.STATIC_DRAW,a),o=new P.U(t,n.getAttributeLocations(),n.getLayoutInfo(),{geometry:i});this._vao=o}}}]),n}(c.Z),H=n(21391),Y=function(e){(0,r.Z)(n,e);var t=(0,l.Z)(n);function n(){var e;return(0,i.Z)(this,n),(e=t.apply(this,arguments))._programOptions={id:!1},e}return(0,o.Z)(n,[{key:"dispose",value:function(){}},{key:"drawMany",value:function(e,t){var n=e.context,a=e.displayLevel,i=e.requiredLevel,o=e.state,r=e.drawPhase,l=e.painter,s=e.spriteMosaic,u=e.styleLayerUID,c=e.requestRender,f=e.allowDelayedRender;if(t.some((function(e){var t,n;return null!==(t=null===(n=e.layerData.get(u))||void 0===n?void 0:n.circleIndexCount)&&void 0!==t&&t}))){var _=e.styleLayer,v=_.circleMaterial,m=l.vectorTilesMaterialManager,p=_.getPaintValue("circle-translate",a),g=_.getPaintValue("circle-translate-anchor",a),h=r===S.jx.HITTEST,x=this._programOptions;x.id=h;var y=m.getMaterialProgram(n,v,x);if(!f||null==c||y.compiled){n.useProgram(y),y.setUniformMatrix3fv("u_displayMat3",g===H.fD.VIEWPORT?o.displayMat3:o.displayViewMat3),y.setUniform2fv("u_circleTranslation",p),y.setUniform1f("u_depth",_.z),y.setUniform1f("u_antialiasingWidth",1.2);var T=-1;if(h){var b=(0,k.Au)(u+1);y.setUniform4fv("u_id",b)}var I,E=(0,U.Z)(t);try{for(E.s();!(I=E.n()).done;){var O=I.value;if(O.layerData.has(u)){O.key.level!==T&&(T=O.key.level,v.setDataUniforms(y,a,_,T,s));var C=O.layerData.get(u);if(C.circleIndexCount){C.prepareForRendering(n);var A=C.vao;null!=A&&(n.bindVAO(A),y.setUniformMatrix3fv("u_dvsMat3",O.transforms.dvs),i!==O.key.level?n.setStencilFunction(d.wb.EQUAL,O.stencilRef,255):n.setStencilFunction(d.wb.GREATER,255,255),n.drawElements(d.MX.TRIANGLES,C.circleIndexCount,d.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*C.circleIndexStart),O.triangleCount+=C.circleIndexCount/3)}}}}catch(L){E.e(L)}finally{E.f()}}else c()}}}]),n}(c.Z),W=n(29439),X=1/65536,q=function(e){(0,r.Z)(n,e);var t=(0,l.Z)(n);function n(){var e;return(0,i.Z)(this,n),(e=t.apply(this,arguments))._fillProgramOptions={id:!1,pattern:!1},e._outlineProgramOptions={id:!1},e}return(0,o.Z)(n,[{key:"dispose",value:function(){}},{key:"drawMany",value:function(e,t){var n,a=e.displayLevel,i=e.drawPhase,o=e.renderPass,r=e.spriteMosaic,l=e.styleLayerUID,s=!1,u=(0,U.Z)(t);try{for(u.s();!(n=u.n()).done;){var c=n.value;if(c.layerData.has(l)){var f=c.layerData.get(l);if(f.fillIndexCount>0||f.outlineIndexCount>0){s=!0;break}}}}catch(L){u.e(L)}finally{u.f()}if(s){var d,_=e.styleLayer,v=_.getPaintProperty("fill-pattern"),m=void 0!==v,p=m&&v.isDataDriven;if(m&&!p){var g=v.getValue(a);d=r.getMosaicItemPosition(g,!0)}var h=!m&&_.getPaintValue("fill-antialias",a),x=!0,y=1;if(!m){var T=_.getPaintProperty("fill-color"),b=_.getPaintProperty("fill-opacity");if((null===T||void 0===T||!T.isDataDriven)&&(null===b||void 0===b||!b.isDataDriven)){var I=_.getPaintValue("fill-color",a);(y=_.getPaintValue("fill-opacity",a)*I[3])>=1&&(x=!1)}}if(!x||"opaque"!==o){var E;i===S.jx.HITTEST&&(E=(0,k.Au)(l+1));var O=_.getPaintValue("fill-translate",a),C=_.getPaintValue("fill-translate-anchor",a);(x||"translucent"!==o)&&this._drawFill(e,l,_,t,O,C,m,d,p,E);var A=!_.hasDataDrivenOutlineColor&&_.outlineUsesFillColor&&y<1;h&&"opaque"!==o&&!A&&this._drawOutline(e,l,_,t,O,C,E)}}}},{key:"_drawFill",value:function(e,t,n,a,i,o,r,l,s,u){if(!r||s||null!=l){var c=e.context,f=e.displayLevel,_=e.state,v=e.drawPhase,p=e.painter,g=e.pixelRatio,h=e.spriteMosaic,x=e.requestRender,y=e.allowDelayedRender,T=n.fillMaterial,b=p.vectorTilesMaterialManager,I=g>m.a?2:1,E=v===S.jx.HITTEST,O=this._fillProgramOptions;O.id=E,O.pattern=r;var C=b.getMaterialProgram(c,T,O);if(!y||null==x||C.compiled){if(c.useProgram(C),null!=l){var A=l.page,L=h.getPageSize(A);null!=L&&(h.bind(c,d.cw.LINEAR,A,m.V4),C.setUniform2fv("u_mosaicSize",L),C.setUniform1i("u_texture",m.V4))}C.setUniformMatrix3fv("u_displayMat3",o===H.fD.VIEWPORT?_.displayMat3:_.displayViewMat3),C.setUniform2fv("u_fillTranslation",i),C.setUniform1f("u_depth",n.z+X),E&&C.setUniform4fv("u_id",u);var D,R=-1,P=(0,U.Z)(a);try{for(P.s();!(D=P.n()).done;){var N=D.value;if(N.layerData.has(t)){N.key.level!==R&&(R=N.key.level,T.setDataUniforms(C,f,n,R,h));var M=N.layerData.get(t);if(M.fillIndexCount){M.prepareForRendering(c);var z=M.fillVAO;if(null!=z){if(c.bindVAO(z),C.setUniformMatrix3fv("u_dvsMat3",N.transforms.dvs),c.setStencilFunction(d.wb.EQUAL,N.stencilRef,255),r){var w=Math.max(Math.pow(2,Math.round(f)-N.key.level),1),F=N.rangeX/(I*N.width*w);C.setUniform1f("u_patternFactor",F)}if(s){var V=M.patternMap;if(!V)continue;var B,G=(0,U.Z)(V);try{for(G.s();!(B=G.n()).done;){var k=(0,W.Z)(B.value,2),Z=k[0],Y=k[1],q=h.getPageSize(Z);null!=q&&(h.bind(c,d.cw.LINEAR,Z,m.V4),C.setUniform2fv("u_mosaicSize",q),C.setUniform1i("u_texture",m.V4),c.drawElements(d.MX.TRIANGLES,Y[1],d.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*Y[0]))}}catch(K){G.e(K)}finally{G.f()}}else c.drawElements(d.MX.TRIANGLES,M.fillIndexCount,d.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*M.fillIndexStart);N.triangleCount+=M.fillIndexCount/3}}}}}catch(K){P.e(K)}finally{P.f()}}else x()}}},{key:"_drawOutline",value:function(e,t,n,a,i,o,r){var l=e.context,s=e.displayLevel,u=e.state,c=e.drawPhase,f=e.painter,_=e.pixelRatio,v=e.spriteMosaic,m=e.requestRender,p=e.allowDelayedRender,g=n.outlineMaterial,h=f.vectorTilesMaterialManager,x=.75/_,y=c===S.jx.HITTEST,T=this._outlineProgramOptions;T.id=y;var b=h.getMaterialProgram(l,g,T);if(!p||null==m||b.compiled){l.useProgram(b),b.setUniformMatrix3fv("u_displayMat3",o===H.fD.VIEWPORT?u.displayMat3:u.displayViewMat3),b.setUniform2fv("u_fillTranslation",i),b.setUniform1f("u_depth",n.z+X),b.setUniform1f("u_outline_width",x),y&&b.setUniform4fv("u_id",r);var I,E=-1,O=(0,U.Z)(a);try{for(O.s();!(I=O.n()).done;){var C=I.value;if(C.layerData.has(t)){C.key.level!==E&&(E=C.key.level,g.setDataUniforms(b,s,n,E,v));var A=C.layerData.get(t);if(A.prepareForRendering(l),A.outlineIndexCount){var L=A.outlineVAO;null!=L&&(l.bindVAO(L),b.setUniformMatrix3fv("u_dvsMat3",C.transforms.dvs),l.setStencilFunction(d.wb.EQUAL,C.stencilRef,255),l.drawElements(d.MX.TRIANGLES,A.outlineIndexCount,d.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*A.outlineIndexStart),C.triangleCount+=A.outlineIndexCount/3)}}}}catch(D){O.e(D)}finally{O.f()}}else m()}}]),n}(c.Z),K=function(e){(0,r.Z)(n,e);var t=(0,l.Z)(n);function n(){var e;return(0,i.Z)(this,n),(e=t.apply(this,arguments))._programOptions={id:!1,pattern:!1,sdf:!1},e}return(0,o.Z)(n,[{key:"dispose",value:function(){}},{key:"drawMany",value:function(e,t){var n=e.context,a=e.displayLevel,i=e.state,o=e.drawPhase,r=e.painter,l=e.pixelRatio,s=e.spriteMosaic,u=e.styleLayerUID,c=e.requestRender,f=e.allowDelayedRender;if(t.some((function(e){var t,n;return null!==(t=null===(n=e.layerData.get(u))||void 0===n?void 0:n.lineIndexCount)&&void 0!==t&&t}))){var _,v,p=e.styleLayer,g=p.lineMaterial,h=r.vectorTilesMaterialManager,x=p.getPaintValue("line-translate",a),y=p.getPaintValue("line-translate-anchor",a),T=p.getPaintProperty("line-pattern"),b=void 0!==T,I=b&&T.isDataDriven;if(b&&!I){var E=T.getValue(a);_=s.getMosaicItemPosition(E)}var O=!1;if(!b){var C=p.getPaintProperty("line-dasharray");if(O=(v=void 0!==C)&&C.isDataDriven,v&&!O){var A=C.getValue(a),L=p.getDashKey(A,p.getLayoutValue("line-cap",a));_=s.getMosaicItemPosition(L)}}var D=1/l,R=o===S.jx.HITTEST,P=this._programOptions;P.id=R,P.pattern=b,P.sdf=v;var N=h.getMaterialProgram(n,g,P);if(!f||null==c||N.compiled){if(n.useProgram(N),N.setUniformMatrix3fv("u_displayViewMat3",i.displayViewMat3),N.setUniformMatrix3fv("u_displayMat3",y===H.fD.VIEWPORT?i.displayMat3:i.displayViewMat3),N.setUniform2fv("u_lineTranslation",x),N.setUniform1f("u_depth",p.z),N.setUniform1f("u_antialiasing",D),R){var M=(0,k.Au)(u+1);N.setUniform4fv("u_id",M)}if(_&&null!=_){var z=_.page,w=s.getPageSize(z);null!=w&&(s.bind(n,d.cw.LINEAR,z,m.V4),N.setUniform2fv("u_mosaicSize",w),N.setUniform1i("u_texture",m.V4))}var F,V=-1,B=(0,U.Z)(t);try{for(B.s();!(F=B.n()).done;){var G=F.value;if(G.layerData.has(u)){G.key.level!==V&&(V=G.key.level,g.setDataUniforms(N,a,p,V,s));var Z=Math.pow(2,a-V)/l;N.setUniform1f("u_zoomFactor",Z);var Y=G.layerData.get(u);if(Y.lineIndexCount){Y.prepareForRendering(n);var X=Y.vao;if(null!=X){if(n.bindVAO(X),N.setUniformMatrix3fv("u_dvsMat3",G.transforms.dvs),n.setStencilFunction(d.wb.EQUAL,G.stencilRef,255),I||O){var q=Y.patternMap;if(!q)continue;var K,j=(0,U.Z)(q);try{for(j.s();!(K=j.n()).done;){var Q=(0,W.Z)(K.value,2),J=Q[0],$=Q[1],ee=s.getPageSize(J);null!=ee&&(s.bind(n,d.cw.LINEAR,J,m.V4),N.setUniform2fv("u_mosaicSize",ee),N.setUniform1i("u_texture",m.V4),n.drawElements(d.MX.TRIANGLES,$[1],d.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*$[0]))}}catch(te){j.e(te)}finally{j.f()}}else n.drawElements(d.MX.TRIANGLES,Y.lineIndexCount,d.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*Y.lineIndexStart);G.triangleCount+=Y.lineIndexCount/3}}}}}catch(te){B.e(te)}finally{B.f()}}else c()}}}]),n}(c.Z),j=n(15245),Q=n(46618),J=n(13200),$=function(e){(0,r.Z)(n,e);var t=(0,l.Z)(n);function n(){var e;return(0,i.Z)(this,n),(e=t.apply(this,arguments))._iconProgramOptions={id:!1,sdf:!1},e._sdfProgramOptions={id:!1},e._spritesTextureSize=(0,j.c)(),e}return(0,o.Z)(n,[{key:"dispose",value:function(){}},{key:"drawMany",value:function(e,t){var n,a=e.drawPhase,i=e.styleLayerUID,o=e.styleLayer;a===S.jx.HITTEST&&(n=(0,k.Au)(i+1)),this._drawIcons(e,o,t,n),this._drawText(e,o,t,n)}},{key:"_drawIcons",value:function(e,t,n,a){var i,o,r=e.context,l=e.displayLevel,s=e.drawPhase,u=e.painter,c=e.spriteMosaic,f=e.state,d=e.styleLayerUID,_=e.requestRender,v=e.allowDelayedRender,p=t.iconMaterial,g=u.vectorTilesMaterialManager,h=!1,x=(0,U.Z)(n);try{for(x.s();!(o=x.n()).done;){var y=o.value;if(y.layerData.has(d)&&(i=y.layerData.get(d)).iconPerPageElementsMap.size>0){h=!0;break}}}catch(k){x.e(k)}finally{x.f()}if(h){var T=t.getPaintValue("icon-translate",l),b=t.getPaintValue("icon-translate-anchor",l),I=t.getLayoutValue("icon-rotation-alignment",l);I===H.aF.AUTO&&(I=t.getLayoutValue("symbol-placement",l)===H.R.POINT?H.aF.VIEWPORT:H.aF.MAP);var E=I===H.aF.MAP,O=t.getLayoutValue("icon-keep-upright",l)&&E,C=i.isIconSDF,A=s===S.jx.HITTEST,L=this._iconProgramOptions;L.id=A,L.sdf=C;var D=g.getMaterialProgram(r,p,L);if(!v||null==_||D.compiled){r.useProgram(D),D.setUniformMatrix3fv("u_displayViewMat3",I===H.aF.MAP?f.displayViewMat3:f.displayMat3),D.setUniformMatrix3fv("u_displayMat3",b===H.fD.VIEWPORT?f.displayMat3:f.displayViewMat3),D.setUniform2fv("u_iconTranslation",T),D.setUniform1f("u_depth",t.z),D.setUniform1f("u_mapRotation",(0,J.s5)(f.rotation)),D.setUniform1f("u_keepUpright",O?1:0),D.setUniform1f("u_level",10*l),D.setUniform1i("u_texture",m.V4),D.setUniform1f("u_fadeDuration",Q.nN/1e3),A&&D.setUniform4fv("u_id",a);var R,P=-1,N=(0,U.Z)(n);try{for(N.s();!(R=N.n()).done;){var M=R.value;if(M.layerData.has(d)&&(M.key.level!==P&&(P=M.key.level,p.setDataUniforms(D,l,t,P,c)),0!==(i=M.layerData.get(d)).iconPerPageElementsMap.size)){i.prepareForRendering(r),i.updateOpacityInfo();var z=i.iconVAO;if(null!=z){r.bindVAO(z),D.setUniformMatrix3fv("u_dvsMat3",M.transforms.dvs),D.setUniform1f("u_time",(performance.now()-i.lastOpacityUpdate)/1e3);var w,F=(0,U.Z)(i.iconPerPageElementsMap);try{for(F.s();!(w=F.n()).done;){var V=(0,W.Z)(w.value,2),B=V[0],G=V[1];this._renderIconRange(e,D,G,B,M)}}catch(k){F.e(k)}finally{F.f()}}}}}catch(k){N.e(k)}finally{N.f()}}else _()}}},{key:"_renderIconRange",value:function(e,t,n,a,i){var o=e.context,r=e.spriteMosaic;this._spritesTextureSize[0]=r.getWidth(a)/4,this._spritesTextureSize[1]=r.getHeight(a)/4,t.setUniform2fv("u_mosaicSize",this._spritesTextureSize),r.bind(o,d.cw.LINEAR,a,m.V4),o.setStencilTestEnabled(!0),o.setStencilFunction(d.wb.GREATER,255,255),o.setStencilWriteMask(0),o.drawElements(d.MX.TRIANGLES,n[1],d.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*n[0]),i.triangleCount+=n[1]/3}},{key:"_drawText",value:function(e,t,n,a){var i,o,r=this,l=e.context,s=e.displayLevel,u=e.drawPhase,c=e.glyphMosaic,f=e.painter,_=e.pixelRatio,v=e.spriteMosaic,p=e.state,g=e.styleLayerUID,h=e.requestRender,x=e.allowDelayedRender,y=t.textMaterial,T=f.vectorTilesMaterialManager,b=!1,I=(0,U.Z)(n);try{for(I.s();!(o=I.n()).done;){var E=o.value;if(E.layerData.has(g)&&(i=E.layerData.get(g)).glyphPerPageElementsMap.size>0){b=!0;break}}}catch(X){I.e(X)}finally{I.f()}if(b){var O=t.getPaintProperty("text-opacity");if(!O||O.isDataDriven||0!==O.getValue(s)){var C=t.getPaintProperty("text-color"),A=!C||C.isDataDriven||C.getValue(s)[3]>0,L=t.getPaintProperty("text-halo-width"),D=t.getPaintProperty("text-halo-color"),R=(!L||L.isDataDriven||L.getValue(s)>0)&&(!D||D.isDataDriven||D.getValue(s)[3]>0);if(A||R){var P=t.getLayoutValue("text-rotation-alignment",s);P===H.aF.AUTO&&(P=t.getLayoutValue("symbol-placement",s)===H.R.POINT?H.aF.VIEWPORT:H.aF.MAP);var N=P===H.aF.MAP,M=t.getLayoutValue("text-keep-upright",s)&&N,z=u===S.jx.HITTEST,w=.8*3/_;this._glyphTextureSize||(this._glyphTextureSize=(0,j.f)(c.width/4,c.height/4));var F=t.getPaintValue("text-translate",s),V=t.getPaintValue("text-translate-anchor",s),B=this._sdfProgramOptions;B.id=z;var G=T.getMaterialProgram(l,y,B);if(!x||null==h||G.compiled){l.useProgram(G),G.setUniformMatrix3fv("u_displayViewMat3",P===H.aF.MAP?p.displayViewMat3:p.displayMat3),G.setUniformMatrix3fv("u_displayMat3",V===H.fD.VIEWPORT?p.displayMat3:p.displayViewMat3),G.setUniform2fv("u_textTranslation",F),G.setUniform1f("u_depth",t.z+152587890625e-16),G.setUniform2fv("u_mosaicSize",this._glyphTextureSize),G.setUniform1f("u_mapRotation",(0,J.s5)(p.rotation)),G.setUniform1f("u_keepUpright",M?1:0),G.setUniform1f("u_level",10*s),G.setUniform1i("u_texture",m.CU),G.setUniform1f("u_antialiasingWidth",w),G.setUniform1f("u_fadeDuration",Q.nN/1e3),z&&G.setUniform4fv("u_id",a);var k,Z=-1,Y=(0,U.Z)(n);try{var W=function(){var e=k.value;if(!e.layerData.has(g))return 0;if(e.key.level!==Z&&(Z=e.key.level,y.setDataUniforms(G,s,t,Z,v)),0===(i=e.layerData.get(g)).glyphPerPageElementsMap.size)return 0;i.prepareForRendering(l),i.updateOpacityInfo();var n=i.textVAO;if(null==n)return 0;l.bindVAO(n),G.setUniformMatrix3fv("u_dvsMat3",e.transforms.dvs),l.setStencilTestEnabled(!0),l.setStencilFunction(d.wb.GREATER,255,255),l.setStencilWriteMask(0);var a=(performance.now()-i.lastOpacityUpdate)/1e3;G.setUniform1f("u_time",a),i.glyphPerPageElementsMap.forEach((function(t,n){r._renderGlyphRange(l,t,n,c,G,R,A,e)}))};for(Y.s();!(k=Y.n()).done;)W()}catch(X){Y.e(X)}finally{Y.f()}}else h()}}}}},{key:"_renderGlyphRange",value:function(e,t,n,a,i,o,r,l){a.bind(e,d.cw.LINEAR,n,m.CU),o&&(i.setUniform1f("u_halo",1),e.drawElements(d.MX.TRIANGLES,t[1],d.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*t[0]),l.triangleCount+=t[1]/3),r&&(i.setUniform1f("u_halo",0),e.drawElements(d.MX.TRIANGLES,t[1],d.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*t[0]),l.triangleCount+=t[1]/3)}}]),n}(c.Z),ee=function(e){(0,r.Z)(n,e);var t=(0,l.Z)(n);function n(){return(0,i.Z)(this,n),t.apply(this,arguments)}return(0,o.Z)(n,[{key:"dispose",value:function(){}},{key:"getGeometryType",value:function(){return S.LW.LABEL}},{key:"supportsSymbology",value:function(e){return!0}},{key:"drawGeometry",value:function(e,t,n,a){var i=e.context,o=e.painter,r=e.state,l=e.rendererInfo,s=e.requestRender,c=e.allowDelayedRender,f=b.Gq.load(n.materialKey),_=f.mapAligned?1:0;if(_||!(Math.abs(t.key.level-Math.round(100*e.displayLevel)/100)>=1)){var v=function(e){return(0,u.cM)(e.data,{geometry:[{location:0,name:"a_pos",count:2,type:d.g.SHORT},{location:1,name:"a_id",count:4,type:d.g.UNSIGNED_BYTE},{location:2,name:"a_color",count:4,type:d.g.UNSIGNED_BYTE,normalized:!0},{location:3,name:"a_haloColor",count:4,type:d.g.UNSIGNED_BYTE,normalized:!0},{location:4,name:"a_texAndSize",count:4,type:d.g.UNSIGNED_BYTE},{location:5,name:"a_refSymbolAndPlacementOffset",count:4,type:d.g.UNSIGNED_BYTE},{location:6,name:"a_glyphData",count:4,type:d.g.UNSIGNED_BYTE},{location:7,name:"a_vertexOffset",count:2,type:d.g.SHORT},{location:8,name:"a_texCoords",count:2,type:d.g.UNSIGNED_SHORT}]})}(f),m=v.bufferLayouts,p=v.attributes,g=o.materialManager.getMaterialProgram(e,f,"materials/label",p,a);if(!c||null==s||g.compiled){e.context.setStencilFunction(d.wb.EQUAL,0,255),i.useProgram(g),this._setSharedUniforms(g,e,t),o.textureManager.bindTextures(i,g,f);var h=1===_?r.displayViewMat3:r.displayMat3;this._setSizeVVUniforms(f,g,l,t),g.setUniform1f("u_mapRotation",Math.floor(r.rotation/360*254)),g.setUniform1f("u_mapAligned",_),g.setUniformMatrix3fv("u_displayMat3",h),g.setUniform1f("u_opacity",1),g.setUniform2fv("u_screenSize",e.state.size);var x=n.target.getVAO(i,m,p),y=n.indexFrom*Uint32Array.BYTES_PER_ELEMENT;i.bindVAO(x),g.setUniform1f("u_isHaloPass",0),g.setUniform1f("u_isBackgroundPass",1),i.drawElements(d.MX.TRIANGLES,n.indexCount,d.g.UNSIGNED_INT,y),g.setUniform1f("u_isHaloPass",1),g.setUniform1f("u_isBackgroundPass",0),i.drawElements(d.MX.TRIANGLES,n.indexCount,d.g.UNSIGNED_INT,y),g.setUniform1f("u_isHaloPass",0),g.setUniform1f("u_isBackgroundPass",0),i.drawElements(d.MX.TRIANGLES,n.indexCount,d.g.UNSIGNED_INT,y),i.setStencilTestEnabled(!0),i.setBlendingEnabled(!0)}else s()}}}]),n}(T.Z),te=function(e){(0,r.Z)(n,e);var t=(0,l.Z)(n);function n(){return(0,i.Z)(this,n),t.apply(this,arguments)}return(0,o.Z)(n,[{key:"dispose",value:function(){}},{key:"getGeometryType",value:function(){return S.LW.LINE}},{key:"supportsSymbology",value:function(e){return!0}},{key:"drawGeometry",value:function(e,t,n,a){var i=e.context,o=e.painter,r=e.rendererInfo,l=e.displayLevel,s=e.passOptions,c=e.requestRender,f=e.allowDelayedRender,_=b.a.load(n.materialKey),v=null!=s&&"hittest"===s.type,m=function(e){return(0,u.cM)(e.data,{geometry:[{location:0,name:"a_pos",count:2,type:d.g.SHORT},{location:1,name:"a_id",count:4,type:d.g.UNSIGNED_BYTE},{location:2,name:"a_color",count:4,type:d.g.UNSIGNED_BYTE,normalized:!0},{location:3,name:"a_offsetAndNormal",count:4,type:d.g.BYTE},{location:4,name:"a_accumulatedDistanceAndHalfWidth",count:2,type:d.g.UNSIGNED_SHORT},{location:5,name:"a_tlbr",count:4,type:d.g.UNSIGNED_SHORT},{location:6,name:"a_segmentDirection",count:4,type:d.g.BYTE},{location:7,name:"a_aux",count:2,type:d.g.UNSIGNED_SHORT},{location:8,name:"a_zoomRange",count:2,type:d.g.UNSIGNED_SHORT}]})}(_),p=d.MX.TRIANGLES;v&&(m=this._getTriangleDesc(n.materialKey,m),p=d.MX.POINTS);var g=m,h=g.attributes,x=g.bufferLayouts,y=o.materialManager.getMaterialProgram(e,_,"materials/line",h,a);if(!f||null==c||y.compiled){var S=1/e.pixelRatio;i.useProgram(y),this._setSharedUniforms(y,e,t),_.textureBinding&&o.textureManager.bindTextures(i,y,_);var T=Math.pow(2,l-t.key.level);y.setUniform1f("u_zoomFactor",T),y.setUniform1f("u_blur",0+S),y.setUniform1f("u_antialiasing",S),this._setSizeVVUniforms(_,y,r,t),this._setColorAndOpacityVVUniforms(_,y,r),i.setFaceCullingEnabled(!1);var I=n.target.getVAO(i,x,h,v),E=n.indexCount,O=n.indexFrom*Uint32Array.BYTES_PER_ELEMENT;v&&(E/=3,O/=3),i.bindVAO(I),i.drawElements(p,E,d.g.UNSIGNED_INT,O)}else c()}}]),n}(T.Z),ne=function(e){(0,r.Z)(n,e);var t=(0,l.Z)(n);function n(){return(0,i.Z)(this,n),t.apply(this,arguments)}return(0,o.Z)(n,[{key:"dispose",value:function(){}},{key:"getGeometryType",value:function(){return S.LW.TEXT}},{key:"supportsSymbology",value:function(e){return!0}},{key:"drawGeometry",value:function(e,t,n,a){var i=e.context,o=e.painter,r=e.rendererInfo,l=e.state,s=e.passOptions,c=e.requestRender,f=e.allowDelayedRender,_=b.qr.load(n.materialKey),v=null!=s&&"hittest"===s.type,m=function(e){return(0,u.cM)(e.data,{geometry:[{location:0,name:"a_pos",count:2,type:d.g.SHORT},{location:1,name:"a_id",count:4,type:d.g.UNSIGNED_BYTE},{location:2,name:"a_color",count:4,type:d.g.UNSIGNED_BYTE,normalized:!0},{location:3,name:"a_haloColor",count:4,type:d.g.UNSIGNED_BYTE,normalized:!0},{location:4,name:"a_texFontSize",count:4,type:d.g.UNSIGNED_BYTE},{location:5,name:"a_aux",count:4,type:d.g.BYTE},{location:6,name:"a_zoomRange",count:2,type:d.g.UNSIGNED_SHORT},{location:7,name:"a_vertexOffset",count:2,type:d.g.SHORT},{location:8,name:"a_texCoords",count:2,type:d.g.UNSIGNED_SHORT}]})}(_),p=m.bufferLayouts,g=m.attributes,h=o.materialManager.getMaterialProgram(e,_,"materials/text",g,a);if(!f||null==c||h.compiled){i.useProgram(h);var x=d.MX.TRIANGLES;v&&(x=d.MX.POINTS),this._setSharedUniforms(h,e,t),o.textureManager.bindTextures(i,h,_),h.setUniformMatrix3fv("u_displayMat3",l.displayMat3),h.setUniformMatrix3fv("u_displayViewMat3",l.displayViewMat3),this._setSizeVVUniforms(_,h,r,t),this._setColorAndOpacityVVUniforms(_,h,r),this._setRotationVVUniforms(_,h,r);var y=n.target.getVAO(i,p,g),S=n.indexFrom*Uint32Array.BYTES_PER_ELEMENT;i.bindVAO(y),h.setUniform1f("u_isHaloPass",0),h.setUniform1f("u_isBackgroundPass",1),i.drawElements(x,n.indexCount,d.g.UNSIGNED_INT,S),h.setUniform1f("u_isHaloPass",1),h.setUniform1f("u_isBackgroundPass",0),i.drawElements(d.MX.TRIANGLES,n.indexCount,d.g.UNSIGNED_INT,S),h.setUniform1f("u_isHaloPass",0),h.setUniform1f("u_isBackgroundPass",0),i.drawElements(x,n.indexCount,d.g.UNSIGNED_INT,S)}else c()}}]),n}(T.Z),ae={marker:w.Z,line:te,fill:E,text:ne,label:ee,clip:v,stencil:V.Z,bitmap:a.Z,overlay:p,tileInfo:z.Z,vtlBackground:Z,vtlFill:q,vtlLine:K,vtlCircle:Y,vtlSymbol:$,dotDensity:N,heatmap:M.Z,pieChart:F}},46618:function(e,t,n){n.d(t,{Bf:function(){return a},PF:function(){return i},Ts:function(){return o},nN:function(){return r}});var a=!0,i=32,o=1.5,r=200},61441:function(e,t,n){n.d(t,{As:function(){return r},cD:function(){return l},sy:function(){return o}});var a=n(8548),i=n(61109),o={geometry:[new i.G("a_pos",2,a.g.BYTE,0,2)]},r={geometry:[new i.G("a_pos",2,a.g.BYTE,0,4),new i.G("a_tex",2,a.g.BYTE,2,4)]},l={geometry:[new i.G("a_pos",2,a.g.UNSIGNED_SHORT,0,4)]}},84319:function(e,t,n){n.d(t,{$K:function(){return U},$_:function(){return L},C$:function(){return F},DQ:function(){return oe},Gg:function(){return ue},Gr:function(){return ae},HX:function(){return ne},Jq:function(){return _e},Ll:function(){return se},Mk:function(){return W},TB:function(){return ce},UK:function(){return q},Ub:function(){return de},Y8:function(){return w},Yw:function(){return X},Z_:function(){return ee},cM:function(){return $},e2:function(){return V},hj:function(){return B},iw:function(){return le},js:function(){return fe},mR:function(){return Y},nU:function(){return Z},sG:function(){return te},wO:function(){return H},ws:function(){return G},xV:function(){return k},yP:function(){return me}});var a=n(4942),i=n(37762),o=n(10064),r=n(32718),l=n(48202),s=n(80613),u=n(8548),c=n(61109),f=r.Z.getLogger("esri.views.2d.engine.webgl.Utils"),d="geometry",_=[{name:d,strideInBytes:12}],v=[{name:d,strideInBytes:36}],m=[{name:d,strideInBytes:24}],p=[{name:d,strideInBytes:12}],g=[{name:d,strideInBytes:40}],h=[{name:d,strideInBytes:36}],x=[{name:d,strideInBytes:36}];function y(e){var t,n={},a=(0,i.Z)(e);try{for(a.s();!(t=a.n()).done;){var o=t.value;n[o.name]=o.strideInBytes}}catch(r){a.e(r)}finally{a.f()}return n}var S=y([{name:d,strideInBytes:36}]),T=y(_),b=y(v),I=y(m),E=y(p),O=y(g),C=y(h),A=y(x);function L(e,t){switch(e){case s.LW.MARKER:return t===s.mD.HEATMAP?T:S;case s.LW.FILL:switch(t){case s.mD.DOT_DENSITY:return E;case s.mD.SIMPLE:case s.mD.OUTLINE_FILL_SIMPLE:return I;default:return b}case s.LW.LINE:return O;case s.LW.TEXT:return C;case s.LW.LABEL:return A}}var D=[d],R=[d],P=[d],N=[d],M=[d];function z(e){switch(e){case s.LW.MARKER:return D;case s.LW.FILL:return R;case s.LW.LINE:return P;case s.LW.TEXT:return N;case s.LW.LABEL:return M}}function w(e){switch(e%4){case 0:case 2:return 4;case 1:case 3:return 1}}function F(e,t){switch(t%4){case 0:case 2:return new Uint32Array(Math.floor(e*t/4));case 1:case 3:return new Uint8Array(e*t)}}function V(e,t){switch(t%4){case 0:case 2:return new Uint32Array(e);case 1:case 3:return new Uint8Array(e)}}function U(e){return null!=e}function B(e){return"number"==typeof e}function G(e){switch(e){case"butt":return l.RL.BUTT;case"round":return l.RL.ROUND;case"square":return l.RL.SQUARE;default:return f.error(new o.Z("mapview-invalid-type","Cap type ".concat(e," is not a valid option. Defaulting to round"))),l.RL.ROUND}}function k(e){switch(e){case"miter":return l.AH.MITER;case"bevel":return l.AH.BEVEL;case"round":return l.AH.ROUND;default:return f.error(new o.Z("mapview-invalid-type","Join type ".concat(e," is not a valid option. Defaulting to round"))),l.AH.ROUND}}function Z(e){switch(e){case"opacity":return s.pc.OPACITY;case"color":return s.pc.COLOR;case"rotation":return s.pc.ROTATION;case"size":return s.pc.SIZE;default:return f.error("Cannot interpret unknown vv: ".concat(e)),null}}function H(e,t,n,a,i,o,r){for(var l in o){var s=o[l].stride,u=w(s),c=o[l].data,f=n[l].data;if(null!=c&&null!=f)for(var d=s*i.vertexCount/u,_=s*e/u,v=s*i.vertexFrom/u,m=0;m<d;++m)f[m+_]=c[m+v]}if(null!=r&&null!=a)for(var p=i.indexCount,g=0;g<p;++g)a[g+t]=r[g+i.indexFrom]-i.vertexFrom+e}var Y=(0,a.Z)({},d,u.l1.STATIC_DRAW);function W(e,t){for(var n=[],a=0;a<5;++a){var o,r=z(a),l={},s=(0,i.Z)(r);try{for(s.s();!(o=s.n()).done;){var u=o.value;l[u]={data:t(a,u)}}}catch(c){s.e(c)}finally{s.f()}n.push({data:e(a),buffers:l})}return n}function X(e){switch(e){case u.Br.UNSIGNED_BYTE:return 1;case u.Br.UNSIGNED_SHORT_4_4_4_4:return 2;case u.Br.FLOAT:return 4;default:return void f.error(new o.Z("webgl-utils","Unable to handle type ".concat(e)))}}function q(e){switch(e){case u.Br.UNSIGNED_BYTE:return Uint8Array;case u.Br.UNSIGNED_SHORT_4_4_4_4:return Uint16Array;case u.Br.FLOAT:return Float32Array;default:return void f.error(new o.Z("webgl-utils","Unable to handle type ".concat(e)))}}function K(e){var t={},n=function(){var n,i=e[a],o=0;t[a]=i.map((function(e){var t=new c.G(e.name,e.count,e.type,o,0,e.normalized||!1);return o+=e.count*function(e){switch(e){case u.g.BYTE:case u.g.UNSIGNED_BYTE:return 1;case u.g.SHORT:case u.g.UNSIGNED_SHORT:return 2;case u.g.FLOAT:case u.g.INT:case u.g.UNSIGNED_INT:return 4}}(e.type),t})),null===(n=t[a])||void 0===n||n.forEach((function(e){return e.stride=o}))};for(var a in e)n();return t}var j=function(e){var t=new Map;for(var n in e){var a,o=(0,i.Z)(e[n]);try{for(o.s();!(a=o.n()).done;){var r=a.value;t.set(r.name,r.location)}}catch(l){o.e(l)}finally{o.f()}}return t},Q=function(e){var t={};for(var n in e){var a=e[n];t[n]=null!==a&&void 0!==a&&a.length?a[0].stride:0}return t},J=new Map,$=function(e,t){if(!J.has(e)){var n=K(t),a={strides:Q(n),bufferLayouts:n,attributes:j(t)};J.set(e,a)}return J.get(e)};function ee(e){e(s.LW.FILL),e(s.LW.LINE),e(s.LW.MARKER),e(s.LW.TEXT),e(s.LW.LABEL)}var te=function(e){return"path"in e&&ve(e.path)},ne=function(e){return"url"in e&&e.url||"imageData"in e&&e.imageData},ae=function(e){return"imageData"in e&&e.imageData&&"contentType"in e&&e.contentType?"data:".concat(e.contentType,";base64,").concat(e.imageData):"url"in e?e.url:null},ie=function(e){return null!=e&&e.startsWith("data:image/gif")},oe=function(e){return"url"in e&&e.url&&(e.url.includes(".gif")||ie(e.url))||"contentType"in e&&"image/gif"===e.contentType||"imageData"in e&&ie(e.imageData)},re=function(e){return null!=e&&e.startsWith("data:image/png")},le=function(e){return"url"in e&&e.url&&(e.url.includes(".png")||re(e.url))||"contentType"in e&&"image/png"===e.contentType||"imageData"in e&&re(e.imageData)},se=function(e){return e.type&&e.type.toLowerCase().includes("3d")};function ue(e){switch(e.type){case"line":var t=e;return"CIMSolidStroke"===t.cim.type&&!t.dashTemplate;case"fill":return"CIMSolidFill"===e.cim.type;case"esriSFS":return"esriSFSSolid"===e.style||"esriSFSNull"===e.style;case"esriSLS":return"esriSLSSolid"===e.style||"esriSLSNull"===e.style;default:return!1}}var ce=function(e){return e.includes("data:image/svg+xml")};function fe(e){switch("cim"in e?e.cim.type:e.type){case"esriSMS":case"esriPMS":case"CIMPointSymbol":return!1;case"CIMVectorMarker":case"CIMCharacterMarker":case"CIMPictureMarker":return me(e);default:return!0}}function de(e){var t="maxVVSize"in e&&e.maxVVSize,n="width"in e&&e.width||"size"in e&&e.size||0;return t||n}function _e(e){for(var t=[],n=0;n<e.length;n++)t.push(e.charCodeAt(n));return t}var ve=function(e){return!!e&&(e=e.trim(),!!(/^[mzlhvcsqta]\s*[-+.0-9][^mlhvzcsqta]+/i.test(e)&&/[\dz]$/i.test(e)&&e.length>4))},me=function(e){var t;return"fill"===e.type&&"CIMMarkerPlacementInsidePolygon"===(null===e||void 0===e||null===(t=e.cim)||void 0===t||null===(t=t.markerPlacement)||void 0===t?void 0:t.type)}},25866:function(e,t,n){n.d(t,{Z:function(){return u}});var a=n(15671),i=n(43144),o=n(44070),r=n(8548),l=n(45412),s=n(61109),u=function(){function e(t,n){(0,a.Z)(this,e),this._rctx=t,this._vertexBuffer=o.f.createVertex(t,r.l1.STATIC_DRAW,new Uint16Array(n)),this._vao=new l.U(t,new Map([["a_position",0]]),{geometry:[new s.G("a_position",2,r.g.SHORT,0,4)]},{geometry:this._vertexBuffer}),this._count=n.length/2}return(0,i.Z)(e,[{key:"bind",value:function(){this._rctx.bindVAO(this._vao)}},{key:"unbind",value:function(){this._rctx.bindVAO(null)}},{key:"dispose",value:function(){this._vao.dispose()}},{key:"draw",value:function(){this._rctx.bindVAO(this._vao),this._rctx.drawArrays(r.MX.TRIANGLE_STRIP,0,this._count)}}]),e}()},64510:function(e,t,n){n.d(t,{Z:function(){return z}});var a=n(37762),i=n(15671),o=n(43144),r=n(11752),l=n(61120),s=n(60136),u=n(29388),c=(n(93169),n(23588)),f=n(62272),d=n(33624),_=n(29439),v=n(10064),m=n(32718),p=n(94172),g=n(87422),h=n(4942),x=n(1413),y=n(79347),S=n(88396),T=n(6394),b=n(83406),I=n(80457),E=n(73271),O=n(44070),C=n(8548),A=function(e,t,n,a){for(var i=0,o=1;o<n;o++){var r=e[2*(t+o-1)],l=e[2*(t+o-1)+1];i+=(e[2*(t+o)]-r)*(e[2*(t+o)+1]+l)}return a?i>0:i<0},L=function(e,t){for(var n=e.coords,i=e.lengths,o=[],r=0,l=0;r<i.length;l+=i[r],r+=1){for(var s=l,u=[];r<i.length-1&&A(n,l+i[r],i[r+1],t);l+=i[r+=1])u.push(l+i[r]-s);var c,f=n.slice(2*s,2*(l+i[r])),d=(0,y.e)(f,u,2),_=(0,a.Z)(d);try{for(_.s();!(c=_.n()).done;){var v=c.value;o.push(v+s)}}catch(m){_.e(m)}finally{_.f()}}return o},D=function(){function e(t,n,a){var o=arguments.length>3&&void 0!==arguments[3]&&arguments[3];(0,i.Z)(this,e),this._cache={},this.vertices=t,this.indices=n,this.primitiveType=a,this.isMapSpace=o}return(0,o.Z)(e,[{key:"destroy",value:function(){for(var e in null!=this._cache.indexBuffer&&this._cache.indexBuffer.dispose(),this._cache.vertexBuffers)null!=this._cache.vertexBuffers[e]&&this._cache.vertexBuffers[e].dispose()}},{key:"elementType",get:function(){return function(e){switch(e.BYTES_PER_ELEMENT){case 1:return C.g.UNSIGNED_BYTE;case 2:return C.g.UNSIGNED_SHORT;case 4:return C.g.UNSIGNED_INT;default:throw new v.Z("Cannot get DataType of array")}}(this.indices)}},{key:"getIndexBuffer",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:C.l1.STATIC_DRAW;return this._cache.indexBuffer||(this._cache.indexBuffer=O.f.createIndex(e,t,this.indices)),this._cache.indexBuffer}},{key:"getVertexBuffers",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:C.l1.STATIC_DRAW;return this._cache.vertexBuffers||(this._cache.vertexBuffers=Object.keys(this.vertices).reduce((function(a,i){return(0,x.Z)((0,x.Z)({},a),{},(0,h.Z)({},i,O.f.createVertex(e,n,t.vertices[i])))}),{})),this._cache.vertexBuffers}}],[{key:"fromRect",value:function(t){var n=t.x,a=t.y,i=n+t.width,o=a+t.height;return e.fromScreenExtent({xmin:n,ymin:a,xmax:i,ymax:o})}},{key:"fromPath",value:function(t){for(var n=(0,b.ks)(new I.Z,t.path,!1,!1),a=n.coords,i=new Uint32Array(L(n,!0)),o=new Uint32Array(a.length/2),r=0;r<o.length;r++)o[r]=(0,E.UJ)(Math.floor(a[2*r]),Math.floor(a[2*r+1]));return new e({geometry:o},i,C.MX.TRIANGLES)}},{key:"fromGeometry",value:function(t,n){var a,i=null===(a=n.geometry)||void 0===a?void 0:a.type;switch(i){case"polygon":return e.fromPolygon(t,n.geometry);case"extent":return e.fromMapExtent(t,n.geometry);default:return m.Z.getLogger("esri.views.2d.engine.webgl.Mesh2D").error(new v.Z("mapview-bad-type","Unable to create a mesh from type ".concat(i),n)),e.fromRect({x:0,y:0,width:1,height:1})}}},{key:"fromPolygon",value:function(t,n){for(var a=(0,b.Uy)(new I.Z,n,!1,!1),i=a.coords,o=new Uint32Array(L(a,!1)),r=new Uint32Array(i.length/2),l=(0,T.a)(),s=(0,T.a)(),u=0;u<r.length;u++)(0,S.s)(l,i[2*u],i[2*u+1]),t.toScreen(s,l),r[u]=(0,E.UJ)(Math.floor(s[0]),Math.floor(s[1]));return new e({geometry:r},o,C.MX.TRIANGLES,!0)}},{key:"fromScreenExtent",value:function(t){var n=t.xmin,a=t.xmax,i=t.ymin,o=t.ymax;return new e({geometry:new Uint32Array([(0,E.UJ)(n,i),(0,E.UJ)(a,i),(0,E.UJ)(n,o),(0,E.UJ)(n,o),(0,E.UJ)(a,i),(0,E.UJ)(a,o)])},new Uint32Array([0,1,2,3,4,5]),C.MX.TRIANGLES)}},{key:"fromMapExtent",value:function(t,n){var a=t.toScreen([0,0],[n.xmin,n.ymin]),i=(0,_.Z)(a,2),o=i[0],r=i[1],l=t.toScreen([0,0],[n.xmax,n.ymax]),s=(0,_.Z)(l,2),u=s[0],c=s[1];return new e({geometry:new Uint32Array([(0,E.UJ)(o,r),(0,E.UJ)(u,r),(0,E.UJ)(o,c),(0,E.UJ)(o,c),(0,E.UJ)(u,r),(0,E.UJ)(u,c)])},new Uint32Array([0,1,2,3,4,5]),C.MX.TRIANGLES)}}]),e}(),R=n(45412),P=function(e){return parseFloat(e)/100},N=function(e){(0,s.Z)(n,e);var t=(0,u.Z)(n);function n(e,a){var o;return(0,i.Z)(this,n),(o=t.call(this))._clip=a,o._cache={},o.stage=e,o._handle=(0,p.YP)((function(){return a.version}),(function(){return o._invalidate()})),o.ready(),o}return(0,o.Z)(n,[{key:"_destroyGL",value:function(){null!=this._cache.mesh&&(this._cache.mesh.destroy(),this._cache.mesh=null),null!=this._cache.vao&&(this._cache.vao.dispose(),this._cache.vao=null)}},{key:"destroy",value:function(){this._destroyGL(),this._handle.remove()}},{key:"getVAO",value:function(e,t,n,a){var i=(0,_.Z)(t.size,2),o=i[0],r=i[1];if("geometry"!==this._clip.type&&this._lastWidth===o&&this._lastHeight===r||(this._lastWidth=o,this._lastHeight=r,this._destroyGL()),null==this._cache.vao){var l=this._createMesh(t,this._clip),s=l.getIndexBuffer(e),u=l.getVertexBuffers(e);this._cache.mesh=l,this._cache.vao=new R.U(e,n,a,u,s)}return this._cache.vao}},{key:"_createTransforms",value:function(){return{dvs:(0,c.c)()}}},{key:"_invalidate",value:function(){this._destroyGL(),this.requestRender()}},{key:"_createScreenRect",value:function(e,t){var n=(0,_.Z)(e.size,2),a=n[0],i=n[1],o="string"==typeof t.left?P(t.left)*a:t.left,r="string"==typeof t.right?P(t.right)*a:t.right,l="string"==typeof t.top?P(t.top)*i:t.top,s="string"==typeof t.bottom?P(t.bottom)*i:t.bottom,u=o,c=l;return{x:u,y:c,width:Math.max(a-r-u,0),height:Math.max(i-s-c,0)}}},{key:"_createMesh",value:function(e,t){switch(t.type){case"rect":return D.fromRect(this._createScreenRect(e,t));case"path":return D.fromPath(t);case"geometry":return D.fromGeometry(e,t);default:return m.Z.getLogger("esri.views.2d.engine.webgl.ClippingInfo").error(new v.Z("mapview-bad-type","Unable to create ClippingInfo mesh from clip of type: ${clip.type}")),D.fromRect({x:0,y:0,width:1,height:1})}}}],[{key:"fromClipArea",value:function(e,t){return new n(e,t)}}]),n}(g.s),M=n(80613),z=function(e){(0,s.Z)(n,e);var t=(0,u.Z)(n);function n(){var e;return(0,i.Z)(this,n),(e=t.apply(this,arguments)).name=e.constructor.name,e}return(0,o.Z)(n,[{key:"clips",set:function(e){this._clips=e,this.children.forEach((function(t){return t.clips=e})),this._updateClippingInfo()}},{key:"beforeRender",value:function(e){(0,r.Z)((0,l.Z)(n.prototype),"beforeRender",this).call(this,e),this.updateTransforms(e.state)}},{key:"_createTransforms",value:function(){return{dvs:(0,c.c)()}}},{key:"doRender",value:function(e){var t=this.createRenderParams(e),n=t.painter,a=t.globalOpacity,i=t.profiler,o=t.drawPhase,r=o===M.jx.LABEL||o===M.jx.HIGHLIGHT?1:a*this.computedOpacity;i.recordContainerStart(this.name),n.beforeRenderLayer(t,this._clippingInfos?255:0,r),this.renderChildren(t),n.compositeLayer(t,r),i.recordContainerEnd()}},{key:"renderChildren",value:function(e){null==this._renderPasses&&(this._renderPasses=this.prepareRenderPasses(e.painter));var t,n=(0,a.Z)(this._renderPasses);try{for(n.s();!(t=n.n()).done;){var i=t.value;try{i.render(e)}catch(o){}}}catch(r){n.e(r)}finally{n.f()}}},{key:"createRenderParams",value:function(e){return e.requireFBO=this.requiresDedicatedFBO,e}},{key:"prepareRenderPasses",value:function(e){var t=this;return[e.registerRenderPass({name:"clip",brushes:[f.U.clip],target:function(){return t._clippingInfos},drawPhase:M.jx.MAP|M.jx.LABEL|M.jx.LABEL_ALPHA|M.jx.DEBUG|M.jx.HIGHLIGHT})]}},{key:"updateTransforms",value:function(e){var t,n=(0,a.Z)(this.children);try{for(n.s();!(t=n.n()).done;){t.value.setTransform(e)}}catch(i){n.e(i)}finally{n.f()}}},{key:"onAttach",value:function(){(0,r.Z)((0,l.Z)(n.prototype),"onAttach",this).call(this),this._updateClippingInfo()}},{key:"onDetach",value:function(){(0,r.Z)((0,l.Z)(n.prototype),"onDetach",this).call(this),this._updateClippingInfo()}},{key:"_updateClippingInfo",value:function(){null!=this._clippingInfos&&(this._clippingInfos.forEach((function(e){return e.destroy()})),this._clippingInfos=null);var e=this.stage;if(e){var t=this._clips;null!=t&&t.length&&(this._clippingInfos=t.items.map((function(t){return N.fromClipArea(e,t)}))),this.requestRender()}}}]),n}(d.W)},13594:function(e,t,n){n.d(t,{Z:function(){return _}});var a=n(15671),i=n(43144),o=n(60136),r=n(29388),l=n(94109),s=n(25866),u=n(3886),c=n(8548),f={nearest:{defines:[],samplingMode:c.cw.NEAREST,mips:!1},bilinear:{defines:[],samplingMode:c.cw.LINEAR,mips:!1},bicubic:{defines:["bicubic"],samplingMode:c.cw.LINEAR,mips:!1},trilinear:{defines:[],samplingMode:c.cw.LINEAR_MIPMAP_LINEAR,mips:!0}},d=function(e,t,n){if("dynamic"===n.samplingMode){var a=e.state,i=t.resolution/t.pixelRatio/a.resolution,o=Math.round(e.pixelRatio)!==e.pixelRatio,r=i>1.05||i<.95;return a.rotation||r||o||t.isSourceScaled||t.rotation?f.bilinear:f.nearest}return f[n.samplingMode]},_=function(e){(0,o.Z)(n,e);var t=(0,r.Z)(n);function n(){var e;return(0,a.Z)(this,n),(e=t.apply(this,arguments))._desc={vsPath:"raster/bitmap",fsPath:"raster/bitmap",attributes:new Map([["a_pos",0]])},e}return(0,i.Z)(n,[{key:"dispose",value:function(){this._quad&&this._quad.dispose()}},{key:"prepareState",value:function(e){var t=e.context;t.setBlendingEnabled(!0),t.setColorMask(!0,!0,!0,!0),t.setStencilWriteMask(0),t.setStencilTestEnabled(!0)}},{key:"draw",value:function(e,t){var n=e.context,a=e.renderingOptions,i=e.painter,o=e.requestRender,r=e.allowDelayedRender;if(t.source&&t.isReady){var u=d(e,t,a),f=i.materialManager.getProgram(this._desc,u.defines);if(!r||null==o||f.compiled){e.timeline.begin(this.name),"additive"===t.blendFunction?n.setBlendFunctionSeparate(c.zi.ONE,c.zi.ONE,c.zi.ONE,c.zi.ONE):n.setBlendFunctionSeparate(c.zi.ONE,c.zi.ONE_MINUS_SRC_ALPHA,c.zi.ONE,c.zi.ONE_MINUS_SRC_ALPHA),n.setStencilFunction(c.wb.EQUAL,t.stencilRef,255),this._quad||(this._quad=new s.Z(n,[0,0,1,0,0,1,1,1]));var _=t.coordScale,v=t.computedOpacity,m=t.transforms;t.setSamplingProfile(u),t.bind(e.context,l.Ic),n.useProgram(f),f.setUniformMatrix3fv("u_dvsMat3",m.dvs),f.setUniform1i("u_texture",l.Ic),f.setUniform2fv("u_coordScale",_),f.setUniform1f("u_opacity",v),this._quad.draw(),e.timeline.end(this.name)}else o()}}}]),n}(u.Z)},3886:function(e,t,n){n.d(t,{Z:function(){return r}});var a=n(37762),i=n(15671),o=n(43144),r=function(){function e(){(0,i.Z)(this,e),this.name=this.constructor.name||"UnnamedBrush",this.brushEffect=null}return(0,o.Z)(e,[{key:"prepareState",value:function(e,t){}},{key:"draw",value:function(e,t,n){}},{key:"drawMany",value:function(e,t,n){var i,o=(0,a.Z)(t);try{for(o.s();!(i=o.n()).done;){var r=i.value;r.visible&&this.draw(e,r,n)}}catch(l){o.e(l)}finally{o.f()}}}]),e}()},64337:function(e,t,n){n.d(t,{Z:function(){return L}});var a=n(1413),i=n(93433),o=n(15671),r=n(43144),l=n(11752),s=n(61120),u=n(60136),c=n(29388),f=n(32718),d=n(92026),_=n(80613),v=n(25866),m=n(82386),p=n(93879),g=n(98029),h=n(83826),x=n(8548),y=n(53634),S=n(10064);var T=n(15880),b=n(3479),I=n(57808),E=n(52311),O=f.Z.getLogger("esri.views.2d.engine.webgl.brushes.WGLBrushHeatmap");function C(e){return"heatmap"===e.type}function A(e,t){var n=e.referenceScale;return e.radius*(0!==n?n/t.scale:1)}var L=function(e){(0,u.Z)(n,e);var t=(0,c.Z)(n);function n(){var e;return(0,o.Z)(this,n),(e=t.apply(this,arguments)).brushEffect=new P,e}return(0,r.Z)(n,[{key:"supportsSymbology",value:function(e){return e===_.mD.HEATMAP}},{key:"dispose",value:function(){(0,l.Z)((0,s.Z)(n.prototype),"dispose",this).call(this),this.brushEffect.dispose(),this.brushEffect=null}},{key:"prepareState",value:function(){}},{key:"drawGeometry",value:function(e,t,a,o){var r=this.brushEffect.loadQualityProfile(e.context).defines;(0,l.Z)((0,s.Z)(n.prototype),"drawGeometry",this).call(this,e,t,a,o?[].concat((0,i.Z)(o),(0,i.Z)(r)):r)}},{key:"_drawMarkers",value:function(e,t,n,a,i,o,r){var l=e.context,s=e.rendererInfo,u=e.state,c=s.rendererSchema;(0,g.t4)(c,"heatmap");var f=c.isFieldActive;n.setUniform1f("u_radius",A(c,u)),r||(n.setUniform1f("u_isFieldActive",f),l.setStencilFunction(x.wb.GEQUAL,t.stencilRef,255)),l.drawElements(a,i,x.g.UNSIGNED_INT,o)}}]),n}(m.Z),D={vsPath:"heatmap/heatmapResolve",fsPath:"heatmap/heatmapResolve",attributes:new Map([["a_position",0]])},R=.25;var P=function(e){(0,u.Z)(n,e);var t=(0,c.Z)(n);function n(){var e;return(0,o.Z)(this,n),(e=t.apply(this,arguments)).name=e.constructor.name,e}return(0,r.Z)(n,[{key:"createOptions",value:function(e){return e.passOptions}},{key:"dispose",value:function(){this._prevFBO=null,null!=this._accumulateFramebuffer&&this._accumulateFramebuffer.detachDepthStencilBuffer(),this._accumulateOutputStencilBuffer=(0,d.M2)(this._accumulateOutputStencilBuffer),this._accumulateFramebuffer=(0,d.M2)(this._accumulateFramebuffer),this._resolveGradientTexture=(0,d.M2)(this._resolveGradientTexture),this._tileQuad=(0,d.M2)(this._tileQuad)}},{key:"bind",value:function(e){var t=e.context,n=e.rendererInfo,a=e.passOptions,i=e.state,o=n.rendererSchema;(null==a||"hittest"!==a.type)&&C(o)&&(this._prevFBO=t.getBoundFramebufferObject(),this._prevViewport=t.getViewport(),(0,g.t4)(o,"heatmap"),this._loadResources(e),this._updateResources(t,o,i),t.bindFramebuffer(this._accumulateFramebuffer),t.setViewport(0,0,this._accumulateFramebuffer.width,this._accumulateFramebuffer.height),t.setStencilTestEnabled(!0),t.setBlendingEnabled(!0),t.setBlendFunction(x.zi.ONE,x.zi.ONE),t.setClearColor(0,0,0,0),t.clear(x.lk.COLOR_BUFFER_BIT))}},{key:"unbind",value:function(){this._prevFBO=null,this._prevViewport=null}},{key:"draw",value:function(e){var t=e.context,n=e.painter,a=e.rendererInfo,i=e.passOptions,o=a.rendererSchema;if((null==i||"hittest"!==i.type)&&C(o)){var r=this.loadQualityProfile(t).defines,l=n.materialManager.getProgram(D,r);t.useProgram(l),t.bindFramebuffer(this._prevFBO),t.setViewport(0,0,this._prevViewport.width,this._prevViewport.height),t.setBlendFunction(x.zi.ONE,x.zi.ONE_MINUS_SRC_ALPHA),t.setStencilTestEnabled(!1);var s=o.radius,u=o.minDensity,c=o.densityRange;t.bindTexture(this._accumulateFramebuffer.colorTexture,8),t.bindTexture(this._resolveGradientTexture,9),l.setUniform1i("u_texture",8),l.setUniform1i("u_gradient",9),l.setUniform2f("u_densityMinAndInvRange",u,1/c),l.setUniform1f("u_densityNormalization",3/(s*s*Math.PI)),this._tileQuad.draw()}}},{key:"_loadResources",value:function(e){var t,n,a,i,o=e.context,r=e.painter,l=this.loadQualityProfile(o),s=l.dataType,u=l.samplingMode,c=l.pixelFormat,f=l.internalFormat,d=l.requiresSharedStencilBuffer,_=this._prevViewport,m=_.width,p=_.height,g=m*R,h=p*R,S=new E.X(g,h);S.pixelFormat=c,S.internalFormat=f,S.dataType=s,S.samplingMode=u,S.wrapMode=x.e8.CLAMP_TO_EDGE,d||null!==(t=this._accumulateOutputStencilBuffer)&&void 0!==t||(this._accumulateOutputStencilBuffer=new T.r(o,new b.Y(x.Tg.DEPTH_STENCIL,g,h))),null!==(n=this._accumulateFramebuffer)&&void 0!==n||(this._accumulateFramebuffer=new y.X(o,S,d?r.getSharedStencilBuffer():this._accumulateOutputStencilBuffer)),(S=new E.X).wrapMode=x.e8.CLAMP_TO_EDGE,null!==(a=this._resolveGradientTexture)&&void 0!==a||(this._resolveGradientTexture=new I.x(o,S)),null!==(i=this._tileQuad)&&void 0!==i||(this._tileQuad=new v.Z(o,[0,0,1,0,0,1,1,1]))}},{key:"_updateResources",value:function(e,t,n){var a=t.gradientHash,i=t.gradient;this._prevGradientHash!==a&&(this._resolveGradientTexture.resize(i.length/4,1),this._resolveGradientTexture.setData(i),this._prevGradientHash=a);var o=this.loadQualityProfile(e).requiresSharedStencilBuffer,r=o?1:function(e){return e<2?1:R}(A(t,n)),l=this._prevViewport,s=l.width*r,u=l.height*r,c=this._accumulateFramebuffer,f=c.width,d=c.height;if(f!==s||d!==u){var _=this._accumulateFramebuffer.depthStencilAttachment;if(o&&null!=_){var v=_.descriptor,m=v.width,p=v.height;m===s&&p===u||(O.errorOnce("Attempted to resize shared stencil buffer! Detaching instead."),this._accumulateFramebuffer.detachDepthStencilBuffer())}this._accumulateFramebuffer.resize(s,u)}o||e.blitFramebuffer(this._prevFBO,this._accumulateFramebuffer,0,0,this._prevFBO.width,this._prevFBO.height,0,0,this._accumulateFramebuffer.width,this._accumulateFramebuffer.height,x.lk.STENCIL_BUFFER_BIT,x.cw.NEAREST)}},{key:"loadQualityProfile",value:function(e){if(null==this._qualityProfile){var t=function(e,t){var n=e.capabilities,a=n.textureFloat,i=n.colorBufferFloat,o=null===a||void 0===a?void 0:a.textureFloat,r=null===a||void 0===a?void 0:a.textureFloatLinear,l=null===a||void 0===a?void 0:a.textureHalfFloat,s=null===a||void 0===a?void 0:a.textureHalfFloatLinear,u=null===a||void 0===a?void 0:a.HALF_FLOAT,c=null===i||void 0===i?void 0:i.textureFloat,f=null===i||void 0===i?void 0:i.textureHalfFloat,_=null===i||void 0===i?void 0:i.floatBlend,v=(0,d.s3)(e.driverTest).floatBufferBlend.result;if(!o&&!l)throw new S.Z("heatmap:missing-texture-float","HeatmapRenderer requires WebGL2 or the WebGL1 extension OES_texture_float or OES_texture_half_float.");if(!c&&!f)throw new S.Z("heatmap:missing-color-buffer-float","HeatmapRenderer requires the WebGL extension EXT_color_buffer_float or EXT_color_buffer_half_float or WEBGL_color_buffer_float.");if(!(_&&v||f))throw new S.Z("heatmap:missing-float-blend","HeatmapRenderer requires the WebGL extension EXT_float_blend or EXT_color_buffer_half_float."+(v?"":" This device claims support for EXT_float_blend, but does not actually support it."));var m=o&&c&&_&&v,p=l&&f,g=r,h=s,y=!(null===i||void 0===i||!i.R32F),T=!(null===i||void 0===i||!i.R16F);if(m&&(g||!h))return g||t.warnOnce("Missing WebGL extension OES_texture_float_linear. Heatmap quality may be reduced."),{dataType:x.Br.FLOAT,samplingMode:g?x.cw.LINEAR:x.cw.NEAREST,pixelFormat:y?x.VI.RED:x.VI.RGBA,internalFormat:y?x.lP.R32F:x.VI.RGBA};if(p)return h||t.warnOnce("Missing WebGL extension OES_texture_half_float_linear. Heatmap quality may be reduced."),{dataType:u,samplingMode:h?x.cw.LINEAR:x.cw.NEAREST,pixelFormat:T?x.VI.RED:x.VI.RGBA,internalFormat:T?x.lP.R16F:x.VI.RGBA};throw new S.Z("heatmap:missing-hardware-support","HeatmapRenderer requires WebGL extensions that allow it to render and blend to float or half float textures.")}(e,O),n=e.type===h.zO.WEBGL1;this._qualityProfile=(0,a.Z)((0,a.Z)({},t),{},{requiresSharedStencilBuffer:n,defines:t.dataType!==x.Br.FLOAT?["heatmapPrecisionHalfFloat"]:[]})}return this._qualityProfile}}]),n}(p.Q)},52424:function(e,t,n){n.d(t,{Z:function(){return y}});var a=n(15671),i=n(43144),o=n(60136),r=n(29388),l=n(151),s=n(61441),u=n(3886),c=n(52120),f=n(86909),d=n(44070),_=n(8548),v=n(96721),m=n(57808),p=n(52311),g=n(45412),h=n(30308),x=300,y=function(e){(0,o.Z)(n,e);var t=(0,r.Z)(n);function n(){var e;return(0,a.Z)(this,n),(e=t.apply(this,arguments))._color=(0,l.f)(1,0,0,1),e}return(0,i.Z)(n,[{key:"dispose",value:function(){var e,t,n,a;null!==(e=this._outlineProgram)&&void 0!==e&&e.dispose(),this._outlineProgram=null,null!==(t=this._tileInfoProgram)&&void 0!==t&&t.dispose(),this._tileInfoProgram=null,null!==(n=this._outlineVertexArrayObject)&&void 0!==n&&n.dispose(),this._outlineVertexArrayObject=null,null!==(a=this._tileInfoVertexArrayObject)&&void 0!==a&&a.dispose(),this._tileInfoVertexArrayObject=null,this._canvas=null}},{key:"prepareState",value:function(e){var t=e.context;t.setBlendingEnabled(!0),t.setBlendFunctionSeparate(_.zi.ONE,_.zi.ONE_MINUS_SRC_ALPHA,_.zi.ONE,_.zi.ONE_MINUS_SRC_ALPHA),t.setColorMask(!0,!0,!0,!0),t.setStencilWriteMask(0),t.setStencilTestEnabled(!1)}},{key:"draw",value:function(e,t){var n=e.context,a=e.requestRender,i=e.allowDelayedRender;if(t.isReady)if(this._loadWGLResources(n),!i||null==a||this._outlineProgram.compiled&&this._tileInfoProgram.compiled){n.bindVAO(this._outlineVertexArrayObject),n.useProgram(this._outlineProgram),this._outlineProgram.setUniformMatrix3fv("u_dvsMat3",t.transforms.dvs),this._outlineProgram.setUniform2f("u_coord_range",t.rangeX,t.rangeY),this._outlineProgram.setUniform1f("u_depth",0),this._outlineProgram.setUniform4fv("u_color",this._color),n.drawArrays(_.MX.LINE_STRIP,0,4);var o=this._getTexture(n,t);o?(n.bindVAO(this._tileInfoVertexArrayObject),n.useProgram(this._tileInfoProgram),n.bindTexture(o,0),this._tileInfoProgram.setUniformMatrix3fv("u_dvsMat3",t.transforms.dvs),this._tileInfoProgram.setUniform1f("u_depth",0),this._tileInfoProgram.setUniform2f("u_coord_ratio",t.rangeX/t.width,t.rangeY/t.height),this._tileInfoProgram.setUniform2f("u_delta",8,8),this._tileInfoProgram.setUniform2f("u_dimensions",o.descriptor.width,o.descriptor.height),n.drawArrays(_.MX.TRIANGLE_STRIP,0,4),n.bindVAO()):n.bindVAO()}else a()}},{key:"_loadWGLResources",value:function(e){if(!this._outlineProgram||!this._tileInfoProgram){var t=(0,v.H)(e,c.O),n=(0,v.H)(e,f.s),a=new Int8Array([0,0,1,0,1,1,0,1]),i=d.f.createVertex(e,_.l1.STATIC_DRAW,a),o=new g.U(e,c.O.attributes,s.sy,{geometry:i}),r=new Int8Array([0,0,1,0,0,1,1,1]),l=d.f.createVertex(e,_.l1.STATIC_DRAW,r),u=new g.U(e,f.s.attributes,s.sy,{geometry:l});this._outlineProgram=t,this._tileInfoProgram=n,this._outlineVertexArrayObject=o,this._tileInfoVertexArrayObject=u}}},{key:"_getTexture",value:function(e,t){if(t.texture&&t.triangleCountReportedInDebug===t.triangleCount)return t.texture;t.triangleCountReportedInDebug=t.triangleCount,this._canvas||(this._canvas=document.createElement("canvas"),this._canvas.setAttribute("id","tileCanvas2d"),this._canvas.setAttribute("width","".concat(x)),this._canvas.setAttribute("height","".concat(32)),this._canvas.setAttribute("style","display:none"));var n=t.triangleCount,a=t.key.id;t.triangleCount>0&&(a+=", ".concat(n));var i=this._canvas,o=i.getContext("2d");o.font="24px sans-serif",o.textAlign="left",o.textBaseline="top",o.clearRect(0,0,x,32),n>1e5?(o.fillStyle="red",o.fillRect(0,0,x,32),o.fillStyle="black"):(o.clearRect(0,0,x,32),o.fillStyle="blue"),o.fillText(a,0,0);var r=new p.X;return r.wrapMode=_.e8.CLAMP_TO_EDGE,r.samplingMode=_.cw.NEAREST,r.isImmutable=(0,h.Z)(e.gl),t.texture=new m.x(e,r,i),t.texture}}]),n}(u.Z)},40655:function(e,t,n){n.d(t,{Z:function(){return m}});var a=n(15671),i=n(43144),o=n(60136),r=n(29388),l=n(151),s=n(61441),u=n(3886),c=n(52120),f=n(44070),d=n(8548),_=n(96721),v=n(45412),m=function(e){(0,o.Z)(n,e);var t=(0,r.Z)(n);function n(){var e;return(0,a.Z)(this,n),(e=t.apply(this,arguments))._color=(0,l.f)(1,0,0,1),e._initialized=!1,e}return(0,i.Z)(n,[{key:"dispose",value:function(){this._solidProgram&&(this._solidProgram.dispose(),this._solidProgram=null),this._solidVertexArrayObject&&(this._solidVertexArrayObject.dispose(),this._solidVertexArrayObject=null)}},{key:"prepareState",value:function(e){var t=e.context;t.setDepthWriteEnabled(!1),t.setDepthTestEnabled(!1),t.setStencilTestEnabled(!0),t.setBlendingEnabled(!1),t.setColorMask(!1,!1,!1,!1),t.setStencilOp(d.xS.KEEP,d.xS.KEEP,d.xS.REPLACE),t.setStencilWriteMask(255)}},{key:"draw",value:function(e,t){var n=e.context,a=e.requestRender,i=e.allowDelayedRender;this._initialized||this._initialize(n),!i||null==a||this._solidProgram.compiled?(n.setStencilFunctionSeparate(d.LR.FRONT_AND_BACK,d.wb.GREATER,t.stencilRef,255),n.bindVAO(this._solidVertexArrayObject),n.useProgram(this._solidProgram),this._solidProgram.setUniformMatrix3fv("u_dvsMat3",t.transforms.dvs),this._solidProgram.setUniform2fv("u_coord_range",[t.rangeX,t.rangeY]),this._solidProgram.setUniform1f("u_depth",0),this._solidProgram.setUniform4fv("u_color",this._color),n.drawArrays(d.MX.TRIANGLE_STRIP,0,4),n.bindVAO()):a()}},{key:"_initialize",value:function(e){if(this._initialized)return!0;var t=(0,_.H)(e,c.O);if(!t)return!1;var n=new Int8Array([0,0,1,0,0,1,1,1]),a=f.f.createVertex(e,d.l1.STATIC_DRAW,n),i=new v.U(e,c.O.attributes,s.sy,{geometry:a});return this._solidProgram=t,this._solidVertexArrayObject=i,this._initialized=!0,!0}}]),n}(u.Z)},94636:function(e,t,n){n.d(t,{Z:function(){return v}});var a=n(37762),i=n(93433),o=n(1413),r=n(15671),l=n(43144),s=n(60136),u=n(29388),c=n(94109),f=n(3886),d=n(54815),_=n(8548),v=function(e){(0,s.Z)(n,e);var t=(0,u.Z)(n);function n(){var e;return(0,r.Z)(this,n),(e=t.apply(this,arguments))._computeDesc=new Map,e}return(0,l.Z)(n,[{key:"prepareState",value:function(e,t){var n=e.context;t&&t.includes("hittest")?n.setBlendFunctionSeparate(_.zi.ONE,_.zi.ONE,_.zi.ONE,_.zi.ONE):n.setBlendFunctionSeparate(_.zi.ONE,_.zi.ONE_MINUS_SRC_ALPHA,_.zi.ONE,_.zi.ONE_MINUS_SRC_ALPHA),n.setBlendingEnabled(!0),n.setColorMask(!0,!0,!0,!0),n.setStencilWriteMask(0),n.setStencilTestEnabled(!0)}},{key:"draw",value:function(e,t,n){var a=this,i=this.getGeometryType();t.commit(e);var o=t.getGeometry(i);null!=o&&(e.timeline.begin(this.name),e.attributeView.bindTextures(e.context),e.context.setStencilFunction(_.wb.EQUAL,t.stencilRef,255),o.forEachCommand((function(i){var o=d.m2.load(i.materialKey).symbologyType;a.supportsSymbology(o)&&a.drawGeometry(e,t,i,n)})))}},{key:"_setSharedUniforms",value:function(e,t,n){var a=t.displayLevel,i=t.pixelRatio,o=t.state,r=t.passOptions;null!=r&&"hittest"===r.type&&(e.setUniform2fv("u_hittestPos",r.position),e.setUniform1f("u_hittestDist",r.distance)),e.setUniform1f("u_pixelRatio",i),e.setUniformMatrix3fv("u_tileMat3",n.transforms.tileMat3),e.setUniformMatrix3fv("u_viewMat3",o.viewMat3),e.setUniformMatrix3fv("u_dvsMat3",n.transforms.dvs),e.setUniformMatrix3fv("u_displayViewMat3",o.displayViewMat3),e.setUniform1f("u_currentZoom",Math.round(a*c.MI)),e.setUniform1i("u_attributeTextureSize",t.attributeView.size),e.setUniform1i("u_attributeData0",c.iJ),e.setUniform1i("u_attributeData1",c.nM),e.setUniform1i("u_attributeData2",c.Ij),e.setUniform1i("u_attributeData3",c.f2),e.setUniform1i("u_attributeData4",c.By),e.setUniform1i("u_attributeData5",c.mx)}},{key:"_setSizeVVUniforms",value:function(e,t,n,a){if(e.vvSizeMinMaxValue&&t.setUniform4fv("u_vvSizeMinMaxValue",n.vvSizeMinMaxValue),e.vvSizeScaleStops&&t.setUniform1f("u_vvSizeScaleStopsValue",n.vvSizeScaleStopsValue),e.vvSizeFieldStops){var i=n.getSizeVVFieldStops(a.key.level);null!=i&&(t.setUniform1fv("u_vvSizeFieldStopsValues",i.values),t.setUniform1fv("u_vvSizeFieldStopsSizes",i.sizes))}e.vvSizeUnitValue&&t.setUniform1f("u_vvSizeUnitValueWorldToPixelsRatio",n.vvSizeUnitValueToPixelsRatio)}},{key:"_setColorAndOpacityVVUniforms",value:function(e,t,n){e.vvColor&&(t.setUniform1fv("u_vvColorValues",n.vvColorValues),t.setUniform4fv("u_vvColors",n.vvColors)),e.vvOpacity&&(t.setUniform1fv("u_vvOpacityValues",n.vvOpacityValues),t.setUniform1fv("u_vvOpacities",n.vvOpacities))}},{key:"_setRotationVVUniforms",value:function(e,t,n){e.vvRotation&&t.setUniform1f("u_vvRotationType","geographic"===n.vvMaterialParameters.vvRotationType?0:1)}},{key:"_getTriangleDesc",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:["a_pos"],r=t.bufferLayouts.geometry,l=n.map((function(e){return r.findIndex((function(t){return t.name===e}))})),s="".concat(e,"-").concat(l.join("-")),u=this._computeDesc.get(s);if(!u){var c,f=t.strides,d=t.strides.geometry,_=new Map(t.attributes),v=r.map((function(e){return(0,o.Z)({},e)})),m=Math.max.apply(Math,(0,i.Z)(t.attributes.values())),p={geometry:v},g=0,h=(0,a.Z)(l);try{for(h.s();!(c=h.n()).done;){var x=c.value,y=r[x];p.geometry.push({count:y.count,name:y.name+"1",divisor:y.divisor,normalized:y.normalized,offset:d+y.offset,stride:d,type:y.type}),p.geometry.push({count:y.count,name:y.name+"2",divisor:y.divisor,normalized:y.normalized,offset:2*d+y.offset,stride:d,type:y.type}),_.set(y.name+"1",m+ ++g),_.set(y.name+"2",m+ ++g)}}catch(S){h.e(S)}finally{h.f()}u={bufferLayouts:p,attributes:_,strides:f},this._computeDesc.set(s,u)}return u}}]),n}(f.Z)},82386:function(e,t,n){n.d(t,{Z:function(){return v}});var a=n(15671),i=n(43144),o=n(60136),r=n(29388),l=n(80613),s=n(84319),u=n(94636),c=n(54815),f=n(98029),d=n(8548),_={shader:"materials/icon",vertexLayout:{geometry:[{location:0,name:"a_pos",count:2,type:d.g.SHORT},{location:1,name:"a_vertexOffset",count:2,type:d.g.SHORT},{location:2,name:"a_texCoords",count:2,type:d.g.UNSIGNED_SHORT},{location:3,name:"a_bitSetAndDistRatio",count:2,type:d.g.UNSIGNED_SHORT},{location:4,name:"a_id",count:4,type:d.g.UNSIGNED_BYTE},{location:5,name:"a_color",count:4,type:d.g.UNSIGNED_BYTE,normalized:!0},{location:6,name:"a_outlineColor",count:4,type:d.g.UNSIGNED_BYTE,normalized:!0},{location:7,name:"a_sizeAndOutlineWidth",count:4,type:d.g.UNSIGNED_BYTE},{location:8,name:"a_zoomRange",count:2,type:d.g.UNSIGNED_SHORT}]},hittestAttributes:["a_vertexOffset","a_texCoords"]},v=function(e){(0,o.Z)(n,e);var t=(0,r.Z)(n);function n(){return(0,a.Z)(this,n),t.apply(this,arguments)}return(0,i.Z)(n,[{key:"dispose",value:function(){}},{key:"getGeometryType",value:function(){return l.LW.MARKER}},{key:"supportsSymbology",value:function(e){return e!==l.mD.HEATMAP&&e!==l.mD.PIE_CHART}},{key:"drawGeometry",value:function(e,t,n,a){var i,o=e.context,r=e.painter,l=e.rendererInfo,u=e.state,v=e.passOptions,m=e.requestRender,p=e.allowDelayedRender,g=c.mE.load(n.materialKey),h=(0,f.a1)(g.data),x=null!=v&&"hittest"===v.type,y=null!==(i=h.programSpec)&&void 0!==i?i:_,S=y.shader,T=y.vertexLayout,b=y.hittestAttributes,I=d.MX.TRIANGLES,E=(0,s.cM)(g.data,T);x&&(E=this._getTriangleDesc(n.materialKey,E,b),I=d.MX.POINTS);var O=E,C=O.attributes,A=O.bufferLayouts,L=r.materialManager.getMaterialProgram(e,g,S,C,a);if(!p||null==m||L.compiled){o.useProgram(L),g.textureBinding&&r.textureManager.bindTextures(o,L,g,!0),this._setSharedUniforms(L,e,t);var D=g.vvRotation?u.displayViewMat3:u.displayMat3;L.setUniformMatrix3fv("u_displayMat3",D),this._setSizeVVUniforms(g,L,l,t),this._setColorAndOpacityVVUniforms(g,L,l),this._setRotationVVUniforms(g,L,l);var R=n.target.getVAO(o,A,C,x),P=n.indexCount,N=n.indexFrom*Uint32Array.BYTES_PER_ELEMENT;x&&(P/=3,N/=3),o.bindVAO(R),this._drawMarkers(e,t,L,I,P,N,x),o.bindVAO(null)}else m()}},{key:"_drawMarkers",value:function(e,t,n,a,i,o,r){e.context.drawElements(a,i,d.g.UNSIGNED_INT,o)}}]),n}(u.Z)},65800:function(e,t,n){n.d(t,{Vs:function(){return s},aH:function(){return l},pr:function(){return o},t2:function(){return r}});var a=n(29439),i=n(73271);function o(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=e[t+3];return e[t]*=a,e[t+1]*=a,e[t+2]*=a,n||(e[t+3]*=255),e}function r(e){if(!e)return 0;var t=e.r,n=e.g,a=e.b,o=e.a;return(0,i.Jz)(t*o,n*o,a*o,255*o)}function l(e){if(!e)return 0;var t=(0,a.Z)(e,4),n=t[0],o=t[1],r=t[2],l=t[3];return(0,i.Jz)(n*(l/255),o*(l/255),r*(l/255),l)}function s(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;if(null==t)return e[n]=0,e[n+1]=0,e[n+2]=0,void(e[n+3]=0);var a=t.r,i=t.g,o=t.b,r=t.a;e[n]=a*r/255,e[n+1]=i*r/255,e[n+2]=o*r/255,e[n+3]=r}},93879:function(e,t,n){n.d(t,{Q:function(){return o}});var a=n(15671),i=n(43144),o=function(){function e(){(0,a.Z)(this,e),this.name=this.constructor.name}return(0,i.Z)(e,[{key:"createOptions",value:function(e,t){return null}}]),e}()},80613:function(e,t,n){var a,i,o,r,l,s,u;n.d(t,{LW:function(){return a},Un:function(){return s},X:function(){return r},jx:function(){return i},mD:function(){return u},mf:function(){return l},pc:function(){return o}}),function(e){e[e.FILL=0]="FILL",e[e.LINE=1]="LINE",e[e.MARKER=2]="MARKER",e[e.TEXT=3]="TEXT",e[e.LABEL=4]="LABEL"}(a||(a={})),function(e){e[e.NONE=0]="NONE",e[e.MAP=1]="MAP",e[e.LABEL=2]="LABEL",e[e.LABEL_ALPHA=4]="LABEL_ALPHA",e[e.HITTEST=8]="HITTEST",e[e.HIGHLIGHT=16]="HIGHLIGHT",e[e.CLIP=32]="CLIP",e[e.DEBUG=64]="DEBUG",e[e.NUM_DRAW_PHASES=9]="NUM_DRAW_PHASES"}(i||(i={})),function(e){e[e.SIZE=0]="SIZE",e[e.COLOR=1]="COLOR",e[e.OPACITY=2]="OPACITY",e[e.ROTATION=3]="ROTATION"}(o||(o={})),function(e){e[e.NONE=0]="NONE",e[e.OPACITY=1]="OPACITY",e[e.COLOR=2]="COLOR",e[e.ROTATION=4]="ROTATION",e[e.SIZE_MINMAX_VALUE=8]="SIZE_MINMAX_VALUE",e[e.SIZE_SCALE_STOPS=16]="SIZE_SCALE_STOPS",e[e.SIZE_FIELD_STOPS=32]="SIZE_FIELD_STOPS",e[e.SIZE_UNIT_VALUE=64]="SIZE_UNIT_VALUE"}(r||(r={})),function(e){e[e.MINMAX_TARGETS_OUTLINE=128]="MINMAX_TARGETS_OUTLINE",e[e.SCALE_TARGETS_OUTLINE=256]="SCALE_TARGETS_OUTLINE",e[e.FIELD_TARGETS_OUTLINE=512]="FIELD_TARGETS_OUTLINE",e[e.UNIT_TARGETS_OUTLINE=1024]="UNIT_TARGETS_OUTLINE"}(l||(l={})),function(e){e[e.SPRITE=0]="SPRITE",e[e.GLYPH=1]="GLYPH"}(s||(s={})),function(e){e[e.DEFAULT=0]="DEFAULT",e[e.SIMPLE=1]="SIMPLE",e[e.DOT_DENSITY=2]="DOT_DENSITY",e[e.OUTLINE_FILL=3]="OUTLINE_FILL",e[e.OUTLINE_FILL_SIMPLE=4]="OUTLINE_FILL_SIMPLE",e[e.HEATMAP=5]="HEATMAP",e[e.PIE_CHART=6]="PIE_CHART"}(u||(u={}))},73271:function(e,t,n){n.d(t,{Au:function(){return i},Jz:function(){return r},UJ:function(){return o}});var a=new Float32Array(1);new Uint32Array(a.buffer);function i(e){return[255&e,(65280&e)>>>8,(16711680&e)>>>16,(4278190080&e)>>>24]}function o(e,t){return 65535&e|t<<16}function r(e,t,n,a){return 255&e|(255&t)<<8|(255&n)<<16|a<<24}},52120:function(e,t,n){n.d(t,{O:function(){return i}});var a=n(54711),i={shaders:{vertexShader:(0,a.w)("background/background.vert"),fragmentShader:(0,a.w)("background/background.frag")},attributes:new Map([["a_pos",0]])}},86909:function(e,t,n){n.d(t,{s:function(){return i}});var a=n(54711),i={shaders:{vertexShader:(0,a.w)("tileInfo/tileInfo.vert"),fragmentShader:(0,a.w)("tileInfo/tileInfo.frag")},attributes:new Map([["a_pos",0]])}},54711:function(e,t,n){n.d(t,{w:function(){return o}});var a={background:{"background.frag":"uniform lowp vec4 u_color;\nvoid main() {\ngl_FragColor = u_color;\n}","background.vert":"attribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform mediump vec2 u_coord_range;\nuniform mediump float u_depth;\nvoid main() {\nvec3 v_pos = u_dvsMat3 * vec3(u_coord_range * a_pos, 1.0);\ngl_Position = vec4(v_pos.xy, 0.0, 1.0);\n}"},bitBlit:{"bitBlit.frag":"uniform lowp sampler2D u_tex;\nuniform lowp float u_opacity;\nvarying mediump vec2 v_uv;\nvoid main() {\nlowp vec4 color = texture2D(u_tex, v_uv);\ngl_FragColor = color *  u_opacity;\n}","bitBlit.vert":"attribute vec2 a_pos;\nattribute vec2 a_tex;\nvarying mediump vec2 v_uv;\nvoid main(void) {\ngl_Position = vec4(a_pos, 0.0, 1.0);\nv_uv = a_tex;\n}"},blend:{"blend.frag":"precision mediump float;\nuniform sampler2D u_layerTexture;\nuniform lowp float u_opacity;\nuniform lowp float u_inFadeOpacity;\n#ifndef NORMAL\nuniform sampler2D u_backbufferTexture;\n#endif\nvarying mediump vec2 v_uv;\nfloat rgb2v(in vec3 c) {\nreturn max(c.x, max(c.y, c.z));\n}\nvec3 rgb2hsv(in vec3 c) {\nvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\nvec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\nvec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\nfloat d = q.x - min(q.w, q.y);\nfloat e = 1.0e-10;\nreturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\n}\nvec3 hsv2rgb(in vec3 c) {\nvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\nreturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec3 tint(in vec3 Cb, in vec3 Cs) {\nfloat vIn = rgb2v(Cb);\nvec3 hsvTint = rgb2hsv(Cs);\nvec3 hsvOut = vec3(hsvTint.x, hsvTint.y, vIn * hsvTint.z);\nreturn hsv2rgb(hsvOut);\n}\nfloat overlay(in float Cb, in float Cs) {\nreturn (1.0 - step(0.5, Cs)) * (1.0 - 2.0 * (1.0 - Cs ) * (1.0 - Cb)) + step(0.5, Cs) * (2.0 * Cs * Cb);\n}\nfloat colorDodge(in float Cb, in float Cs) {\nreturn (Cb == 0.0) ? 0.0 : (Cs == 1.0) ? 1.0 : min(1.0, Cb / (1.0 - Cs));\n}\nfloat colorBurn(in float Cb, in float Cs) {\nreturn (Cb == 1.0) ? 1.0 : (Cs == 0.0) ? 0.0 : 1.0 - min(1.0, (1.0 - Cb) / Cs);\n}\nfloat hardLight(in float Cb, in float Cs) {\nreturn (1.0 - step(0.5, Cs)) * (2.0 * Cs * Cb) + step(0.5, Cs) * (1.0 - 2.0 * (1.0 - Cs) * (1.0 - Cb));\n}\nfloat reflectBlend(in float Cb, in float Cs) {\nreturn (Cs == 1.0) ? Cs : min(Cb * Cb / (1.0 - Cs), 1.0);\n}\nfloat softLight(in float Cb, in float Cs) {\nif (Cs <= 0.5) {\nreturn Cb - (1.0 - 2.0 * Cs) * Cb * (1.0 - Cb);\n}\nif (Cb <= 0.25) {\nreturn Cb + (2.0 * Cs - 1.0) * Cb * ((16.0 * Cb - 12.0) * Cb + 3.0);\n}\nreturn Cb + (2.0 * Cs - 1.0) * (sqrt(Cb) - Cb);\n}\nfloat vividLight(in float Cb, in float Cs) {\nreturn (1.0 - step(0.5, Cs)) * colorBurn(Cb, 2.0 * Cs) + step(0.5, Cs) * colorDodge(Cb, (2.0 * (Cs - 0.5)));\n}\nfloat minv3(in vec3 c) {\nreturn min(min(c.r, c.g), c.b);\n}\nfloat maxv3(in vec3 c) {\nreturn max(max(c.r, c.g), c.b);\n}\nfloat lumv3(in vec3 c) {\nreturn dot(c, vec3(0.3, 0.59, 0.11));\n}\nfloat satv3(vec3 c) {\nreturn maxv3(c) - minv3(c);\n}\nvec3 clipColor(vec3 color) {\nfloat lum = lumv3(color);\nfloat mincol = minv3(color);\nfloat maxcol = maxv3(color);\nif (mincol < 0.0) {\ncolor = lum + ((color - lum) * lum) / (lum - mincol);\n}\nif (maxcol > 1.0) {\ncolor = lum + ((color - lum) * (1.0 - lum)) / (maxcol - lum);\n}\nreturn color;\n}\nvec3 setLum(vec3 cbase, vec3 clum) {\nfloat lbase = lumv3(cbase);\nfloat llum = lumv3(clum);\nfloat ldiff = llum - lbase;\nvec3 color = cbase + vec3(ldiff);\nreturn clipColor(color);\n}\nvec3 setLumSat(vec3 cbase, vec3 csat, vec3 clum)\n{\nfloat minbase = minv3(cbase);\nfloat sbase = satv3(cbase);\nfloat ssat = satv3(csat);\nvec3 color;\nif (sbase > 0.0) {\ncolor = (cbase - minbase) * ssat / sbase;\n} else {\ncolor = vec3(0.0);\n}\nreturn setLum(color, clum);\n}\nvoid main() {\nvec4 src = texture2D(u_layerTexture, v_uv);\n#ifdef NORMAL\ngl_FragColor = src *  u_opacity;\n#else\nvec4 dst = texture2D(u_backbufferTexture, v_uv);\nvec3 Cs = src.a == 0.0 ? src.rgb : vec3(src.rgb / src.a);\nvec3 Cb = dst.a == 0.0 ? dst.rgb : vec3(dst.rgb / dst.a);\nfloat as = u_opacity * src.a;\nfloat ab = dst.a;\n#ifdef DESTINATION_OVER\ngl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb, as + ab - as * ab);\n#endif\n#ifdef SOURCE_IN\nvec4 color = vec4(as * Cs * ab, as * ab);\nvec4 fadeColor = (1.0 - u_opacity) * u_inFadeOpacity * vec4(ab * Cb, ab);\ngl_FragColor = color + fadeColor;\n#endif\n#ifdef DESTINATION_IN\nvec4 color = vec4(ab * Cb * as, ab * as);\nvec4 fadeColor = (1.0 - u_opacity) * u_inFadeOpacity * vec4(ab * Cb, ab);\ngl_FragColor = color + fadeColor;\n#endif\n#ifdef SOURCE_OUT\ngl_FragColor = vec4(as * Cs * (1.0 - ab), as * (1.0 - ab));\n#endif\n#ifdef DESTINATION_OUT\ngl_FragColor = vec4(ab * Cb * (1.0 - as), ab * (1.0 - as));\n#endif\n#ifdef SOURCE_ATOP\ngl_FragColor = vec4(as * Cs * ab + ab * Cb * (1.0 - as), ab);\n#endif\n#ifdef DESTINATION_ATOP\ngl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb * as, as);\n#endif\n#ifdef XOR\ngl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb * (1.0 - as),\nas * (1.0 - ab) + ab * (1.0 - as));\n#endif\n#ifdef MULTIPLY\ngl_FragColor = vec4(as * Cs * ab * Cb + (1.0 - ab) * as * Cs + (1.0 - as) * ab * Cb,\nas + ab * (1.0 - as));\n#endif\n#ifdef SCREEN\ngl_FragColor = vec4((Cs + Cb - Cs * Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef OVERLAY\nvec3 f = vec3(overlay(Cb.r, Cs.r), overlay(Cb.g, Cs.g), overlay(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef DARKEN\ngl_FragColor = vec4(min(Cs, Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef LIGHTER\ngl_FragColor = vec4(as * Cs + ab * Cb, as + ab);\n#endif\n#ifdef LIGHTEN\ngl_FragColor = vec4(max(Cs, Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef COLOR_DODGE\nvec3 f = clamp(vec3(colorDodge(Cb.r, Cs.r), colorDodge(Cb.g, Cs.g), colorDodge(Cb.b, Cs.b)), vec3(0.0), vec3(1.0));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef COLOR_BURN\nvec3 f = vec3(colorBurn(Cb.r, Cs.r), colorBurn(Cb.g, Cs.g), colorBurn(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef HARD_LIGHT\nvec3 f = vec3(hardLight(Cb.r, Cs.r), hardLight(Cb.g, Cs.g), hardLight(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef SOFT_LIGHT\nvec3 f = vec3(softLight(Cb.r, Cs.r), softLight(Cb.g, Cs.g), softLight(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef DIFFERENCE\ngl_FragColor = vec4(abs(Cb - Cs) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef EXCLUSION\nvec3 f = Cs + Cb - 2.0 * Cs * Cb;\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef INVERT\ngl_FragColor = vec4((1.0 - Cb) * as * ab + Cb * ab * (1.0 - as), ab);\n#endif\n#ifdef VIVID_LIGHT\nvec3 f = vec3(clamp(vividLight(Cb.r, Cs.r), 0.0, 1.0),\nclamp(vividLight(Cb.g, Cs.g), 0.0, 1.0),\nclamp(vividLight(Cb.b, Cs.b), 0.0, 1.0));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef HUE\nvec3 f = setLumSat(Cs,Cb,Cb);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef SATURATION\nvec3 f = setLumSat(Cb,Cs,Cb);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef COLOR\nvec3 f = setLum(Cs,Cb);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef LUMINOSITY\nvec3 f = setLum(Cb,Cs);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef PLUS\ngl_FragColor = clamp(vec4(src.r + Cb.r, src.g + Cb.g, src.b + Cb.b, as + ab), 0.0, 1.0);\n#endif\n#ifdef MINUS\ngl_FragColor = vec4(clamp(vec3(Cb.r - src.r, Cb.g - src.g, Cb.b - src.b), 0.0, 1.0), ab * as);\n#endif\n#ifdef AVERAGE\nvec3 f = (Cb + Cs) / 2.0;\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef REFLECT\nvec3 f = clamp(vec3(reflectBlend(Cb.r, Cs.r),\nreflectBlend(Cb.g, Cs.g),\nreflectBlend(Cb.b, Cs.b)), vec3(0.0), vec3(1.0));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#endif\n}","blend.vert":"attribute vec2 a_position;\nvarying mediump vec2 v_uv;\nvoid main(void) {\ngl_Position = vec4(a_position , 0.0, 1.0);\nv_uv = (a_position + 1.0) / 2.0;\n}"},debug:{overlay:{"overlay.frag":"precision mediump float;\nvarying vec4 v_color;\nvoid main(void) {\ngl_FragColor = v_color;\n}","overlay.vert":"attribute vec3 a_PositionAndFlags;\nuniform mat3 u_dvsMat3;\nuniform vec4 u_colors[4];\nuniform float u_opacities[4];\nvarying vec4 v_color;\nvoid main(void) {\nvec2 position = a_PositionAndFlags.xy;\nfloat flags = a_PositionAndFlags.z;\nint colorIndex = int(mod(flags, 4.0));\nvec4 color;\nfor (int i = 0; i < 4; i++) {\ncolor = u_colors[i];\nif (i == colorIndex) {\nbreak;\n}\n}\nint opacityIndex = int(mod(floor(flags / 4.0), 4.0));\nfloat opacity;\nfor (int i = 0; i < 4; i++) {\nopacity = u_opacities[i];\nif (i == opacityIndex) {\nbreak;\n}\n}\nv_color = color * opacity;\ngl_Position = vec4((u_dvsMat3 * vec3(position, 1.0)).xy, 0.0, 1.0);\n}"}},dot:{dot:{"dot.frag":"precision mediump float;\nvarying vec4 v_color;\nvarying float v_dotRatio;\nvarying float v_invEdgeRatio;\nuniform highp float u_tileZoomFactor;\nvoid main()\n{\nfloat dist = length(gl_PointCoord - vec2(.5, .5)) * 2.;\nfloat alpha = smoothstep(0., 1., v_invEdgeRatio * (dist - v_dotRatio) + 1.);\ngl_FragColor = v_color * alpha;\n}","dot.vert":"precision highp float;\nattribute vec2 a_pos;\nuniform sampler2D u_texture;\nuniform highp mat3 u_dvsMat3;\nuniform highp float u_tileZoomFactor;\nuniform highp float u_dotSize;\nuniform highp float u_pixelRatio;\nvarying vec2 v_pos;\nvarying vec4 v_color;\nvarying float v_dotRatio;\nvarying float v_invEdgeRatio;\nconst float EPSILON = 0.000001;\nvoid main()\n{\nmat3 tileToTileTexture = mat3(  1., 0., 0.,\n0., -1., 0.,\n0., 1., 1.  );\nvec3 texCoords = tileToTileTexture * vec3(a_pos.xy / 512., 1.);\nv_color = texture2D(u_texture, texCoords.xy);\nfloat smoothEdgeWidth = max(u_dotSize / 2., 1.) ;\nfloat z = 0.;\nz += 2.0 * step(v_color.a, EPSILON);\ngl_PointSize = (smoothEdgeWidth + u_dotSize);\ngl_Position = vec4((u_dvsMat3 * vec3(a_pos + .5, 1.)).xy, z, 1.);\nv_dotRatio = u_dotSize / gl_PointSize;\nv_invEdgeRatio = -1. / ( smoothEdgeWidth / gl_PointSize );\ngl_PointSize  *= (u_pixelRatio * u_tileZoomFactor);\n}"}},filtering:{"bicubic.glsl":"vec4 computeWeights(float v) {\nfloat b = 1.0 / 6.0;\nfloat v2 = v * v;\nfloat v3 = v2 * v;\nfloat w0 = b * (-v3 + 3.0 * v2 - 3.0 * v + 1.0);\nfloat w1 = b * (3.0 * v3  - 6.0 * v2 + 4.0);\nfloat w2 = b * (-3.0 * v3 + 3.0 * v2 + 3.0 * v + 1.0);\nfloat w3 = b * v3;\nreturn vec4(w0, w1, w2, w3);\n}\nvec4 bicubicOffsetsAndWeights(float v) {\nvec4 w = computeWeights(v);\nfloat g0 = w.x + w.y;\nfloat g1 = w.z + w.w;\nfloat h0 = 1.0 - (w.y / g0) + v;\nfloat h1 = 1.0 + (w.w / g1) - v;\nreturn vec4(h0, h1, g0, g1);\n}\nvec4 sampleBicubicBSpline(sampler2D sampler, vec2 coords, vec2 texSize) {\nvec2 eX = vec2(1.0 / texSize.x, 0.0);\nvec2 eY = vec2(0.0, 1.0 / texSize.y);\nvec2 texel = coords * texSize - 0.5;\nvec3 hgX = bicubicOffsetsAndWeights(fract(texel).x).xyz;\nvec3 hgY = bicubicOffsetsAndWeights(fract(texel).y).xyz;\nvec2 coords10 = coords + hgX.x * eX;\nvec2 coords00 = coords - hgX.y * eX;\nvec2 coords11 = coords10 + hgY.x * eY;\nvec2 coords01 = coords00 + hgY.x * eY;\ncoords10 = coords10 - hgY.y * eY;\ncoords00 = coords00 - hgY.y * eY;\nvec4 color00 = texture2D(sampler, coords00);\nvec4 color10 = texture2D(sampler, coords10);\nvec4 color01 = texture2D(sampler, coords01);\nvec4 color11 = texture2D(sampler, coords11);\ncolor00 = mix(color00, color01, hgY.z);\ncolor10 = mix(color10, color11, hgY.z);\ncolor00 = mix(color00, color10, hgX.z);\nreturn color00;\n}","bilinear.glsl":"vec4 sampleBilinear(sampler2D sampler, vec2 coords, vec2 texSize) {\nvec2 texelStart = floor(coords * texSize);\nvec2 coord0 = texelStart / texSize;\nvec2 coord1 = (texelStart +  vec2(1.0, 0.0)) / texSize;\nvec2 coord2 = (texelStart +  vec2(0.0, 1.0)) / texSize;\nvec2 coord3 = (texelStart +  vec2(1.0, 1.0)) / texSize;\nvec4 color0 = texture2D(sampler, coord0);\nvec4 color1 = texture2D(sampler, coord1);\nvec4 color2 = texture2D(sampler, coord2);\nvec4 color3 = texture2D(sampler, coord3);\nvec2 blend = fract(coords * texSize);\nvec4 color01 = mix(color0, color1, blend.x);\nvec4 color23 = mix(color2, color3, blend.x);\nvec4 color = mix(color01, color23, blend.y);\n#ifdef NNEDGE\nfloat alpha = floor(color0.a * color1.a * color2.a * color3.a + 0.5);\ncolor = color * alpha + (1.0 - alpha) * texture2D(sampler, coords);\n#endif\nreturn color;\n}","epx.glsl":"vec4 sampleEPX(sampler2D sampler, float size, vec2 coords, vec2 texSize) {\nvec2 invSize = 1.0 / texSize;\nvec2 texel = coords * texSize;\nvec2 texel_i = floor(texel);\nvec2 texel_frac = fract(texel);\nvec4 colorP = texture2D(sampler, texel_i * invSize);\nvec4 colorP1 = vec4(colorP);\nvec4 colorP2 = vec4(colorP);\nvec4 colorP3 = vec4(colorP);\nvec4 colorP4 = vec4(colorP);\nvec4 colorA = texture2D(sampler, (texel_i - vec2(0.0, 1.0)) * invSize);\nvec4 colorB = texture2D(sampler, (texel_i + vec2(1.0, 0.0)) * invSize);\nvec4 colorC = texture2D(sampler, (texel_i - vec2(1.0, 0.0)) * invSize);\nvec4 colorD = texture2D(sampler, (texel_i + vec2(0.0, 1.0)) * invSize);\nif (colorC == colorA && colorC != colorD && colorA != colorB) {\ncolorP1 = colorA;\n}\nif (colorA == colorB && colorA != colorC && colorB != colorD) {\ncolorP2 = colorB;\n}\nif (colorD == colorC && colorD != colorB && colorC != colorA) {\ncolorP3 = colorC;\n}\nif (colorB == colorD && colorB != colorA && colorD != colorC) {\ncolorP4 = colorD;\n}\nvec4 colorP12 = mix(colorP1, colorP2, texel_frac.x);\nvec4 colorP34 = mix(colorP1, colorP2, texel_frac.x);\nreturn mix(colorP12, colorP34, texel_frac.y);\n}"},fx:{integrate:{"integrate.frag":"precision mediump float;\nuniform lowp sampler2D u_sourceTexture;\nuniform lowp sampler2D u_maskTexture;\nuniform mediump float u_zoomLevel;\nuniform highp float u_timeDelta;\nuniform highp float u_animationTime;\nvarying highp vec2 v_texcoord;\n#include <materials/utils.glsl>\nvoid main()\n{\n#ifdef DELTA\nvec4 texel = texture2D(u_sourceTexture, v_texcoord);\nvec4 data0 = texture2D(u_maskTexture, v_texcoord);\nfloat flags = data0.r * 255.0;\nfloat groupMinZoom = data0.g * 255.0;\nfloat isVisible = getFilterBit(flags, 0);\nfloat wouldClip = step(groupMinZoom, u_zoomLevel);\nfloat direction = wouldClip * 1.0 + (1.0 - wouldClip) * -1.0;\nfloat dt = u_timeDelta / max(u_animationTime, 0.0001);\nvec4 nextState = vec4(texel + direction * dt);\ngl_FragColor =  vec4(nextState);\n#elif defined(UPDATE)\nvec4 texel = texture2D(u_sourceTexture, v_texcoord);\ngl_FragColor = texel;\n#endif\n}","integrate.vert":"precision mediump float;\nattribute vec2 a_pos;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos;\ngl_Position = vec4(a_pos * 2.0 - 1.0, 0.0, 1.0);\n}"}},heatmap:{heatmapResolve:{"heatmapResolve.frag":"precision highp float;\n#ifdef HEATMAP_PRECISION_HALF_FLOAT\n#define COMPRESSION_FACTOR 4.0\n#else\n#define COMPRESSION_FACTOR 1.0\n#endif\nuniform sampler2D u_texture;\nuniform sampler2D u_gradient;\nuniform vec2 u_densityMinAndInvRange;\nuniform float u_densityNormalization;\nvarying vec2 v_uv;\nvoid main() {\nvec4 data = texture2D(u_texture, v_uv);\nfloat density = data.r * COMPRESSION_FACTOR;\ndensity *= u_densityNormalization;\ndensity = (density - u_densityMinAndInvRange.x) * u_densityMinAndInvRange.y;\nvec4 color = texture2D(u_gradient, vec2(density, 0.5));\ngl_FragColor = vec4(color.rgb * color.a, color.a);\n}","heatmapResolve.vert":"precision highp float;\nattribute vec2 a_pos;\nvarying vec2 v_uv;\nvoid main() {\nv_uv = a_pos;\ngl_Position = vec4(a_pos * 2.0 - 1.0, 1., 1.);\n}"}},highlight:{"blur.frag":"varying mediump vec2 v_texcoord;\nuniform mediump vec4 u_direction;\nuniform mediump mat4 u_channelSelector;\nuniform mediump float u_sigma;\nuniform sampler2D u_texture;\nmediump float gauss1(mediump vec2 dir) {\nreturn exp(-dot(dir, dir) / (2.0 * u_sigma * u_sigma));\n}\nmediump vec4 selectChannel(mediump vec4 sample) {\nreturn u_channelSelector * sample;\n}\nvoid accumGauss1(mediump float i, inout mediump float tot, inout mediump float weight) {\nmediump float w = gauss1(i * u_direction.xy);\ntot += selectChannel(texture2D(u_texture, v_texcoord + i * u_direction.zw))[3] * w;\nweight += w;\n}\nvoid main(void) {\nmediump float tot = 0.0;\nmediump float weight = 0.0;\naccumGauss1(-5.0, tot, weight);\naccumGauss1(-4.0, tot, weight);\naccumGauss1(-3.0, tot, weight);\naccumGauss1(-2.0, tot, weight);\naccumGauss1(-1.0, tot, weight);\naccumGauss1(0.0, tot, weight);\naccumGauss1(1.0, tot, weight);\naccumGauss1(2.0, tot, weight);\naccumGauss1(3.0, tot, weight);\naccumGauss1(4.0, tot, weight);\naccumGauss1(5.0, tot, weight);\ngl_FragColor = vec4(0.0, 0.0, 0.0, tot / weight);\n}","highlight.frag":"varying mediump vec2 v_texcoord;\nuniform sampler2D u_texture;\nuniform mediump float u_sigma;\nuniform sampler2D u_shade;\nuniform mediump vec2 u_minMaxDistance;\nmediump float estimateDistance() {\nmediump float y = texture2D(u_texture, v_texcoord)[3];\nconst mediump float y0 = 0.5;\nmediump float m0 = 1.0 / (sqrt(2.0 * 3.1415) * u_sigma);\nmediump float d = (y - y0) / m0;\nreturn d;\n}\nmediump vec4 shade(mediump float d) {\nmediump float mappedDistance = (d - u_minMaxDistance.x) / (u_minMaxDistance.y - u_minMaxDistance.x);\nmappedDistance = clamp(mappedDistance, 0.0, 1.0);\nreturn texture2D(u_shade, vec2(mappedDistance, 0.5));\n}\nvoid main(void) {\nmediump float d = estimateDistance();\ngl_FragColor = shade(d);\n}","textured.vert":"attribute mediump vec2 a_position;\nattribute mediump vec2 a_texcoord;\nvarying mediump vec2 v_texcoord;\nvoid main(void) {\ngl_Position = vec4(a_position, 0.0, 1.0);\nv_texcoord = a_texcoord;\n}"},magnifier:{"magnifier.frag":"uniform lowp vec4 u_background;\nuniform mediump sampler2D u_readbackTexture;\nuniform mediump sampler2D u_maskTexture;\nuniform mediump sampler2D u_overlayTexture;\nuniform bool u_maskEnabled;\nuniform bool u_overlayEnabled;\nvarying mediump vec2 v_texCoord;\nconst lowp float barrelFactor = 1.1;\nlowp vec2 barrel(lowp vec2 uv) {\nlowp vec2 uvn = uv * 2.0 - 1.0;\nif (uvn.x == 0.0 && uvn.y == 0.0) {\nreturn vec2(0.5, 0.5);\n}\nlowp float theta = atan(uvn.y, uvn.x);\nlowp float r = pow(length(uvn), barrelFactor);\nreturn r * vec2(cos(theta), sin(theta)) * 0.5 + 0.5;\n}\nvoid main(void)\n{\nlowp vec4 color = texture2D(u_readbackTexture, barrel(v_texCoord));\ncolor = (color + (1.0 - color.a) * u_background);\nlowp float mask = u_maskEnabled ? texture2D(u_maskTexture, v_texCoord).a : 1.0;\ncolor *= mask;\nlowp vec4 overlayColor = u_overlayEnabled ? texture2D(u_overlayTexture, v_texCoord) : vec4(0);\ngl_FragColor = overlayColor + (1.0 - overlayColor.a) * color;\n}","magnifier.vert":"precision mediump float;\nattribute mediump vec2 a_pos;\nuniform mediump vec4 u_drawPos;\nvarying mediump vec2 v_texCoord;\nvoid main(void)\n{\nv_texCoord = a_pos;\ngl_Position = vec4(u_drawPos.xy + vec2(a_pos - 0.5) * u_drawPos.zw, 0.0, 1.0);\n}"},materials:{"attributeData.glsl":"uniform highp sampler2D u_attributeData0;\nuniform highp sampler2D u_attributeData1;\nuniform highp sampler2D u_attributeData2;\nuniform highp sampler2D u_attributeData3;\nuniform highp sampler2D u_attributeData4;\nuniform highp sampler2D u_attributeData5;\nuniform highp int u_attributeTextureSize;\nhighp vec2 getAttributeDataCoords(in highp vec3 id) {\nhighp vec3  texel = unpackDisplayIdTexel(id);\nhighp float size = float(u_attributeTextureSize);\nhighp float u32 = float(int(texel.r) + int(texel.g) * 256 + int(texel.b) * 256 * 256);\nhighp float col = mod(u32, size);\nhighp float row = (u32 - col) / size;\nhighp float u = col / size;\nhighp float v = row / size;\nreturn vec2(u, v);\n}\nhighp vec2 getAttributeDataTextureCoords(in highp vec3 id) {\nreturn (getAttributeDataCoords(id) * 2.0) - 1.0 + (.5 / vec2(u_attributeTextureSize));\n}\nhighp vec4 getAttributeData0(in highp vec3 id) {\nvec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData0, coords);\n}\nhighp vec4 getAttributeData1(in highp vec3 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData1, coords);\n}\nhighp vec4 getAttributeData2(in highp vec3 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData2, coords);\n}\nhighp vec4 getAttributeData3(in highp vec3 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData3, coords);\n}\nhighp vec4 getAttributeData4(in highp vec3 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData4, coords);\n}\nhighp vec4 getAttributeData5(in highp vec3 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData5, coords);\n}\nfloat u88VVToFloat(in vec2 v) {\nbool isMagic = v.x == 255.0 && v.y == 255.0;\nif (isMagic) {\nreturn NAN_MAGIC_NUMBER;\n}\nreturn (v.x + v.y * float(0x100)) - 32768.0;\n}","barycentric.glsl":"float inTriangle(vec3 bary) {\nvec3 absBary = abs(bary);\nreturn step((absBary.x + absBary.y + absBary.z), 1.05);\n}\nvec3 xyToBarycentric(in vec2 pos, in vec2 v0,  in vec2 v1, in vec2 v2) {\nmat3 xyToBarycentricMat3 = mat3(\nv1.x * v2.y - v2.x * v1.y, v2.x * v0.y - v0.x * v2.y, v0.x * v1.y - v1.x * v0.y,\nv1.y - v2.y, v2.y - v0.y, v0.y - v1.y,\nv2.x - v1.x, v0.x - v2.x, v1.x - v0.x\n);\nfloat A2 = v0.x * (v1.y - v2.y) + v1.x * (v2.y - v0.y) + v2.x * (v0.y - v1.y);\nreturn (1. / A2) * xyToBarycentricMat3 * vec3(1., pos);\n}","constants.glsl":"const float C_DEG_TO_RAD = 3.14159265359 / 180.0;\nconst float C_256_TO_RAD = 3.14159265359 / 128.0;\nconst float C_RAD_TO_DEG = 180.0 / 3.141592654;\nconst float POSITION_PRECISION = 1.0 / 8.0;\nconst float FILL_POSITION_PRECISION = 1.0 / 1.0;\nconst float SOFT_EDGE_RATIO = 1.0;\nconst float THIN_LINE_WIDTH_FACTOR = 1.1;\nconst float THIN_LINE_HALF_WIDTH = 1.0;\nconst float EXTRUDE_SCALE_PLACEMENT_PADDING = 1.0 / 4.0;\nconst float OFFSET_PRECISION = 1.0 / 8.0;\nconst float OUTLINE_SCALE = 1.0 / 5.0;\nconst float SDF_FONT_SIZE = 24.0;\nconst float MAX_SDF_DISTANCE = 8.0;\nconst float PLACEMENT_PADDING = 8.0;\nconst float EPSILON = 0.00001;\nconst float EPSILON_HITTEST = 0.05;\nconst int MAX_FILTER_COUNT = 2;\nconst int ATTR_VV_SIZE = 0;\nconst int ATTR_VV_COLOR = 1;\nconst int ATTR_VV_OPACITY = 2;\nconst int ATTR_VV_ROTATION = 3;\nconst highp float NAN_MAGIC_NUMBER = 1e-30;\nconst int BITSET_GENERIC_LOCK_COLOR = 1;\nconst int BITSET_GENERIC_CONSIDER_ALPHA_ONLY = 4;\nconst int BITSET_MARKER_ALIGNMENT_MAP = 0;\nconst int BITSET_MARKER_OUTLINE_ALLOW_COLOR_OVERRIDE = 2;\nconst int BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY = 3;\nconst int BITSET_TYPE_FILL_OUTLINE = 0;\nconst int BITSET_FILL_RANDOM_PATTERN_OFFSET = 2;\nconst int BITSET_FILL_HAS_UNRESOLVED_REPLACEMENT_COLOR = 3;\nconst int BITSET_FILL_HAS_PATTERN_HEIGHT_PRECISION_FACTOR = 5;\nconst int BITSET_FILL_HAS_PATTERN_WIDTH_PRECISION_FACTOR = 6;\nconst int BITSET_LINE_SCALE_DASH = 2;",fill:{"common.glsl":"#include <materials/symbologyTypeUtils.glsl>\n#ifdef PATTERN\nuniform mediump vec2 u_mosaicSize;\nvarying mediump float v_sampleAlphaOnly;\n#endif\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\nuniform lowp vec4 u_isActive[ 2 ];\nuniform highp float u_dotValue;\nuniform highp float u_tileDotsOverArea;\nuniform highp float u_dotTextureDotCount;\nuniform mediump float u_tileZoomFactor;\n#endif\nvarying highp vec3 v_id;\nvarying lowp vec4 v_color;\nvarying lowp float v_opacity;\nvarying mediump vec4 v_aux1;\n#ifdef PATTERN\nvarying mediump vec2 v_tileTextureCoord;\n#endif\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\nvarying lowp float v_isOutline;\n#endif\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\nvarying highp vec2 v_dotTextureCoords;\nvarying highp vec4 v_dotThresholds[ 2 ];\n#endif","fill.frag":"precision highp float;\n#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <materials/fill/common.glsl>\n#ifdef PATTERN\nuniform lowp sampler2D u_texture;\n#endif\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\nuniform mediump mat4 u_dotColors[ 2 ];\nuniform sampler2D u_dotTextures[ 2 ];\nuniform vec4 u_dotBackgroundColor;\n#endif\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#include <materials/shared/line/common.glsl>\n#include <materials/shared/line/line.frag>\nlowp vec4 drawLine() {\nfloat v_lineWidth = v_aux1.x;\nvec2  v_normal    = v_aux1.yz;\nLineData inputs = LineData(\nv_color,\nv_normal,\nv_lineWidth,\nv_opacity,\nv_id\n);\nreturn shadeLine(inputs);\n}\n#endif\nlowp vec4 drawFill() {\nlowp vec4 out_color = vec4(0.);\n#ifdef HITTEST\nout_color = v_color;\n#elif defined(PATTERN)\nmediump vec4 v_tlbr = v_aux1;\nmediump vec2 normalizedTextureCoord = mod(v_tileTextureCoord, 1.0);\nmediump vec2 samplePos = mix(v_tlbr.xy, v_tlbr.zw, normalizedTextureCoord);\nlowp vec4 color = texture2D(u_texture, samplePos);\nif (v_sampleAlphaOnly > 0.5) {\ncolor.rgb = vec3(color.a);\n}\nout_color = v_opacity * v_color * color;\n#elif SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY && !defined(HIGHLIGHT)\nvec4 textureThresholds0 = texture2D(u_dotTextures[0], v_dotTextureCoords);\nvec4 textureThresholds1 = texture2D(u_dotTextures[1], v_dotTextureCoords);\nvec4 difference0 = v_dotThresholds[0] - textureThresholds0;\nvec4 difference1 = v_dotThresholds[1] - textureThresholds1;\n#ifdef DD_DOT_BLENDING\nvec4 isPositive0 = step(0.0, difference0);\nvec4 isPositive1 = step(0.0, difference1);\nfloat weightSum = dot(isPositive0, difference0) + dot(isPositive1, difference1);\nfloat lessThanEqZero = step(weightSum, 0.0);\nfloat greaterThanZero = 1.0 - lessThanEqZero ;\nfloat divisor = (weightSum + lessThanEqZero);\nvec4 weights0 = difference0 * isPositive0 / divisor;\nvec4 weights1 = difference1 * isPositive1 / divisor;\nvec4 dotColor = u_dotColors[0] * weights0 + u_dotColors[1] * weights1;\nvec4 preEffectColor = greaterThanZero * dotColor + lessThanEqZero * u_dotBackgroundColor;\n#else\nfloat diffMax = max(max4(difference0), max4(difference1));\nfloat lessThanZero = step(diffMax, 0.0);\nfloat greaterOrEqZero = 1.0 - lessThanZero;\nvec4 isMax0 = step(diffMax, difference0);\nvec4 isMax1 = step(diffMax, difference1);\nvec4 dotColor = u_dotColors[0] * isMax0 + u_dotColors[1] * isMax1;\nvec4 preEffectColor = greaterOrEqZero * dotColor + lessThanZero * u_dotBackgroundColor;\n#endif\nout_color = preEffectColor;\n#else\nout_color = v_opacity * v_color;\n#endif\n#ifdef HIGHLIGHT\nout_color.a = 1.0;\n#endif\nreturn out_color;\n}\nvoid main() {\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\nif (v_isOutline > 0.5) {\ngl_FragColor = drawLine();\n} else {\ngl_FragColor = drawFill();\n}\n#else\ngl_FragColor = drawFill();\n#endif\n}","fill.vert":"#include <materials/symbologyTypeUtils.glsl>\n#define PACKED_LINE\nprecision highp float;\nattribute float a_bitset;\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\nattribute float a_inverseArea;\nvec4 a_color = vec4(0.0, 0.0, 0.0, 1.0);\nvec2 a_zoomRange = vec2(0.0, 10000.0);\n#else\nattribute vec4 a_color;\nattribute vec4 a_aux2;\nattribute vec4 a_aux3;\n#ifndef SYMBOLOGY_TYPE_IS_SIMPLE_LIKE\nattribute vec4 a_aux1;\nattribute vec2 a_zoomRange;\n#else\nvec2 a_zoomRange = vec2(0.0, 10000.0);\n#endif\n#endif\nuniform vec2 u_tileOffset;\nuniform vec2 u_maxIntNumOfCrossing;\n#include <util/encoding.glsl>\n#include <materials/vcommon.glsl>\n#include <materials/fill/common.glsl>\n#include <materials/fill/hittest.glsl>\nconst float INV_SCALE_COMPRESSION_FACTOR = 1.0 / 128.0;\nconst float MAX_REPRESENTABLE_INT = 16777216.0;\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\nvec4 dotThreshold(vec4 featureAttrOverFeatureArea, float dotValue, float tileDotsOverArea) {\nreturn featureAttrOverFeatureArea * (1.0 / dotValue)  * (1.0 / tileDotsOverArea);\n}\n#endif\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#include <materials/shared/line/common.glsl>\n#include <materials/shared/line/line.vert>\nvoid drawLine(out lowp vec4 out_color, out highp vec3 out_pos) {\nLineData outputs = buildLine(\nout_pos,\na_id,\na_pos,\na_color,\n(a_aux3.xy - 128.) / 16.,\n(a_aux3.zw - 128.) / 16.,\n0.,\na_aux2.z / 16.,\na_bitset,\nvec4(0.),\nvec2(0.),\na_aux2.w / 16.\n);\nv_id      = outputs.id;\nv_opacity = outputs.opacity;\nv_aux1    = vec4(outputs.lineHalfWidth, outputs.normal, 0.);\nout_color = outputs.color;\n}\n#endif\nvoid drawFill(out lowp vec4 out_color, out highp vec3 out_pos) {\nfloat a_bitSet = a_bitset;\nout_color = getColor(a_color, a_bitSet, BITSET_GENERIC_LOCK_COLOR);\nv_opacity = getOpacity();\nv_id      = norm(a_id);\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\nmat3 tileToTileNormalized = mat3(  2. / 512.,  0.,  0.,\n0., -2. / 512.,  0.,\n-1.,  1.,  1.  );\nout_pos   = tileToTileNormalized * vec3((a_pos * FILL_POSITION_PRECISION), 1.);\n#else\nout_pos   = u_dvsMat3 * vec3(a_pos * FILL_POSITION_PRECISION, 1.);\n#endif\n#ifdef PATTERN\nvec4  a_tlbr   = a_aux1;\nfloat a_width  = a_aux2.x;\nfloat a_height = a_aux2.y;\nvec2  a_offset = a_aux2.zw;\nvec2  a_scale  = a_aux3.xy;\nfloat a_angle  = a_aux3.z;\nif (getBit(a_bitset, BITSET_FILL_HAS_PATTERN_WIDTH_PRECISION_FACTOR) > 0.5) {\na_width *= INV_SCALE_COMPRESSION_FACTOR;\n}\nif (getBit(a_bitset, BITSET_FILL_HAS_PATTERN_HEIGHT_PRECISION_FACTOR) > 0.5) {\na_height *= INV_SCALE_COMPRESSION_FACTOR;\n}\nvec2 scale = INV_SCALE_COMPRESSION_FACTOR * a_scale;\nfloat width = u_zoomFactor * a_width * scale.x;\nfloat height = u_zoomFactor * a_height * scale.y;\nfloat angle = C_256_TO_RAD * a_angle;\nfloat sinA = sin(angle);\nfloat cosA = cos(angle);\nfloat dx = 0.0;\nfloat dy = 0.0;\nif (getBit(a_bitset, BITSET_FILL_RANDOM_PATTERN_OFFSET) > 0.5) {\nfloat id = rgba2float(vec4(a_id, 0.0));\ndx = rand(vec2(id, 0.0));\ndy = rand(vec2(0.0, id));\n}\nmat3 patternMatrix = mat3(cosA / width, sinA / height, 0,\n-sinA / width, cosA / height, 0,\ndx,            dy,           1);\nvec2 patternSize = vec2(a_width, a_height);\nvec2 numPatternsPerMaxInt = vec2(MAX_REPRESENTABLE_INT) / patternSize;\nvec2 maxIntCrossingOffsetCorrection = patternSize * fract(u_maxIntNumOfCrossing * numPatternsPerMaxInt);\nvec2 tileOffset = u_tileOffset + maxIntCrossingOffsetCorrection - 0.5 * patternSize;\ntileOffset = vec2(tileOffset.x * cosA - tileOffset.y * sinA, tileOffset.x * sinA + tileOffset.y * cosA);\ntileOffset = mod(tileOffset, patternSize);\nvec2 symbolOffset = u_zoomFactor * scale * vec2(a_offset - tileOffset) / vec2(width, height);\nv_tileTextureCoord = (patternMatrix * vec3(a_pos * FILL_POSITION_PRECISION, 1.0)).xy - symbolOffset;\nv_aux1 = a_tlbr / u_mosaicSize.xyxy;\nv_sampleAlphaOnly = getBit(a_bitset, BITSET_GENERIC_CONSIDER_ALPHA_ONLY);\nif (getBit(a_bitSet, BITSET_FILL_HAS_UNRESOLVED_REPLACEMENT_COLOR) > 0.5) {\n#ifdef VV_COLOR\nv_sampleAlphaOnly *= (1.0 - float(isNan(VV_ADATA[ATTR_VV_COLOR]))) * (1.0 - getBit(a_bitSet, BITSET_GENERIC_LOCK_COLOR));\n#else\nv_sampleAlphaOnly = 0.0;\n#endif\n}\n#elif SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\nvec4 ddAttributeData0 = getAttributeData2(a_id) * u_isActive[0] * a_inverseArea;\nvec4 ddAttributeData1 = getAttributeData3(a_id) * u_isActive[1] * a_inverseArea;\nfloat size = u_tileZoomFactor * 512.0 * 1.0 / u_pixelRatio;\nv_dotThresholds[0] = dotThreshold(ddAttributeData0, u_dotValue, u_tileDotsOverArea);\nv_dotThresholds[1] = dotThreshold(ddAttributeData1, u_dotValue, u_tileDotsOverArea);\nv_dotTextureCoords = (a_pos * FILL_POSITION_PRECISION + 0.5) / size;\n#endif\n}\n#ifdef HITTEST\nvoid draw(out lowp vec4 out_color, out highp vec3 out_pos) {\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\nif (getBit(a_bitset, BITSET_TYPE_FILL_OUTLINE) > 0.5) {\nout_pos = vec3(0., 0., 2.);\nreturn;\n}\n#endif\nhittestFill(out_color, out_pos);\ngl_PointSize = 1.0;\n}\n#elif defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE)\nvoid draw(out lowp vec4 out_color, out highp vec3 out_pos) {\nv_isOutline = getBit(a_bitset, BITSET_TYPE_FILL_OUTLINE);\nif (v_isOutline > 0.5) {\ndrawLine(out_color, out_pos);\n} else {\ndrawFill(out_color, out_pos);\n}\n}\n#else\n#define draw drawFill\n#endif\nvoid main()\n{\nINIT;\nhighp vec3 pos  = vec3(0.);\nhighp vec4 color  = vec4(0.);\ndraw(color, pos);\nv_color = color;\ngl_Position = vec4(clip(v_color, pos, getFilterFlags(), a_zoomRange), 1.0);\n}","hittest.glsl":"#ifdef HITTEST\n#include <materials/hittest/common.glsl>\nattribute vec2 a_pos1;\nattribute vec2 a_pos2;\nvoid hittestFill(\nout lowp vec4 out_color,\nout highp vec3 out_pos\n) {\nvec3 pos        = u_viewMat3 * u_tileMat3 * vec3(a_pos  * FILL_POSITION_PRECISION, 1.);\nvec3 pos1       = u_viewMat3 * u_tileMat3 * vec3(a_pos1 * FILL_POSITION_PRECISION, 1.);\nvec3 pos2       = u_viewMat3 * u_tileMat3 * vec3(a_pos2 * FILL_POSITION_PRECISION, 1.);\nfloat hittestDist = u_hittestDist;\nfloat dist = distPointTriangle(u_hittestPos, pos.xy, pos1.xy, pos2.xy);\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\nif (dist < 0. || dist >= hittestDist) {\nout_pos.z += 2.0;\n}\nout_color = vec4(1. / 255., 0, 0, dist == 0. ? (1. / 255.) : 0.);\n}\n#endif"},hittest:{"common.glsl":"#ifdef HITTEST\nuniform float u_hittestDist;\nuniform highp vec2 u_hittestPos;\nfloat projectScalar(vec2 a, vec2 b) {\nreturn dot(a, normalize(b));\n}\nfloat distPointSegment(vec2 p0, vec2 p1, vec2 p2) {\nvec2 L = p2 - p1;\nvec2 A = p0 - p1;\nfloat projAL = projectScalar(A, L);\nfloat t = clamp(projAL / length(L), 0., 1.);\nreturn distance(p0, p1 + t * (p2 - p1));\n}\nvoid hittestMarker(out lowp vec4 out_color, out highp vec3 out_pos, in highp vec3 pos, float size) {\nfloat dist = distance(pos, vec3(u_hittestPos, 1.));\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\nif ((dist - size) > u_hittestDist) {\nout_pos.z += 2.0;\n}\nout_color = vec4(1. / 255., 0, 0, (dist - size) < 0. ? (1. / 255.) : 0.);\n}\nfloat intersectPointTriangleBary(vec2 p, vec2 a, vec2 b, vec2 c) {\nreturn inTriangle(xyToBarycentric(p, a, b, c));\n}\nfloat distPointTriangle(vec2 p, vec2 a, vec2 b, vec2 c) {\nvec2 ba = b - a;\nvec2 ca = c - a;\nfloat crossProduct = ba.x * ca.y - ca.x * ba.y;\nbool isParallel = crossProduct < EPSILON_HITTEST && crossProduct > -EPSILON_HITTEST;\nif (isParallel) {\nreturn -1.;\n}\nif (intersectPointTriangleBary(p.xy, a, b, c) == 1.) {\nreturn 0.;\n}\nfloat distAB = distPointSegment(p, a, b);\nfloat distBC = distPointSegment(p, b, c);\nfloat distCA = distPointSegment(p, c, a);\nreturn min(min(distAB, distBC), distCA);\n}\n#endif"},icon:{"common.glsl":"#include <util/encoding.glsl>\nuniform lowp vec2 u_mosaicSize;\nvarying lowp vec4 v_color;\nvarying highp vec3 v_id;\nvarying highp vec4 v_sizeTex;\nvarying mediump vec3 v_pos;\nvarying lowp float v_opacity;\nuniform lowp sampler2D u_texture;\n#ifdef SDF\nvarying lowp vec4 v_outlineColor;\nvarying mediump float v_outlineWidth;\nvarying mediump float v_distRatio;\nvarying mediump float v_overridingOutlineColor;\nvarying mediump float v_isThin;\n#endif\n#ifdef SDF\nvec4 getColor(vec2 v_size, vec2 v_tex) {\nlowp vec4 fillPixelColor = v_color;\nfloat d = 0.5 - rgba2float(texture2D(u_texture, v_tex));\nfloat size = max(v_size.x, v_size.y);\nfloat dist = d * size * SOFT_EDGE_RATIO * v_distRatio;\nfillPixelColor *= clamp(0.5 - dist, 0.0, 1.0);\nfloat outlineWidth = v_outlineWidth;\n#ifdef HIGHLIGHT\noutlineWidth = max(outlineWidth, 4.0 * v_isThin);\n#endif\nif (outlineWidth > 0.25) {\nlowp vec4 outlinePixelColor = v_overridingOutlineColor * v_color + (1.0 - v_overridingOutlineColor) * v_outlineColor;\nfloat clampedOutlineSize = min(outlineWidth, size);\noutlinePixelColor *= clamp(0.5 - abs(dist) + clampedOutlineSize * 0.5, 0.0, 1.0);\nreturn v_opacity * ((1.0 - outlinePixelColor.a) * fillPixelColor + outlinePixelColor);\n}\nreturn v_opacity * fillPixelColor;\n}\n#else\nvec4 getColor(vec2 _v_size, vec2 v_tex) {\nlowp vec4 texColor = texture2D(u_texture, v_tex);\nreturn v_opacity * texColor * v_color;\n}\n#endif",heatmapAccumulate:{"common.glsl":"varying lowp vec4 v_hittestResult;\nvarying mediump vec2 v_offsetFromCenter;\nvarying highp float v_fieldValue;","heatmapAccumulate.frag":"precision mediump float;\n#include <materials/icon/heatmapAccumulate/common.glsl>\n#ifdef HEATMAP_PRECISION_HALF_FLOAT\n#define COMPRESSION_FACTOR 0.25\n#else\n#define COMPRESSION_FACTOR 1.0\n#endif\nuniform lowp sampler2D u_texture;\nvoid main() {\n#ifdef HITTEST\ngl_FragColor = v_hittestResult;\n#else\nfloat radius = length(v_offsetFromCenter);\nfloat shapeWeight = step(radius, 1.0);\nfloat oneMinusRadiusSquared = 1.0 - radius * radius;\nfloat kernelWeight = oneMinusRadiusSquared * oneMinusRadiusSquared;\ngl_FragColor = vec4(shapeWeight * kernelWeight * v_fieldValue * COMPRESSION_FACTOR);\n#endif\n}","heatmapAccumulate.vert":"precision highp float;\nattribute vec2 a_vertexOffset;\nvec4 a_color = vec4(0.0);\nvec2 a_zoomRange = vec2(0.0, 10000.0);\nuniform float u_radius;\nuniform float u_isFieldActive;\n#include <materials/vcommon.glsl>\n#include <materials/hittest/common.glsl>\n#include <materials/icon/heatmapAccumulate/common.glsl>\nvoid main() {\nfloat filterFlags = getFilterFlags();\n#ifdef HITTEST\nhighp vec4 out_hittestResult = vec4(0.);\nhighp vec3 out_pos = vec3(0.);\nvec3 pos = u_viewMat3 * u_tileMat3 * vec3(a_pos * POSITION_PRECISION, 1.0);\nhittestMarker(out_hittestResult, out_pos, pos, u_radius);\nv_hittestResult = out_hittestResult;\ngl_PointSize = 1.;\ngl_Position = vec4(clip(a_color, out_pos, filterFlags, a_zoomRange), 1.0);\n#else\nv_offsetFromCenter = sign(a_vertexOffset);\nv_fieldValue = getAttributeData2(a_id).x * u_isFieldActive + 1.0 - u_isFieldActive;\nvec3 centerPos = u_dvsMat3 * vec3(a_pos * POSITION_PRECISION, 1.0);\nvec3 vertexPos = centerPos + u_displayViewMat3 * vec3(v_offsetFromCenter, 0.0) * u_radius;\ngl_Position = vec4(clip(a_color, vertexPos, filterFlags, a_zoomRange), 1.0);\n#endif\n}"},"hittest.glsl":"#ifdef HITTEST\n#include <materials/hittest/common.glsl>\nattribute vec2 a_vertexOffset1;\nattribute vec2 a_vertexOffset2;\nattribute vec2 a_texCoords1;\nattribute vec2 a_texCoords2;\nvec2 getTextureCoords(in vec3 bary, in vec2 texCoords0, in vec2 texCoords1, in vec2 texCoords2) {\nreturn texCoords0 * bary.x + texCoords1 * bary.y + texCoords2 * bary.z;\n}\nvoid hittestIcon(\ninout lowp vec4 out_color,\nout highp vec3 out_pos,\nin vec3 pos,\nin vec3 offset,\nin vec2 size,\nin float scaleFactor,\nin float isMapAligned\n) {\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\nvec3 posBase = u_viewMat3 * u_tileMat3  * pos;\nvec3 offset1 = scaleFactor * vec3(a_vertexOffset1 / 16.0, 0.);\nvec3 offset2 = scaleFactor * vec3(a_vertexOffset2 / 16.0, 0.);\nvec2 pos0    = (posBase + getMatrixNoDisplay(isMapAligned) * offset).xy;\nvec2 pos1    = (posBase + getMatrixNoDisplay(isMapAligned) * offset1).xy;\nvec2 pos2    = (posBase + getMatrixNoDisplay(isMapAligned) * offset2).xy;\nvec3 bary0 = xyToBarycentric(u_hittestPos + vec2(-u_hittestDist, -u_hittestDist), pos0, pos1, pos2);\nvec3 bary1 = xyToBarycentric(u_hittestPos + vec2(0., -u_hittestDist), pos0, pos1, pos2);\nvec3 bary2 = xyToBarycentric(u_hittestPos + vec2(u_hittestDist, -u_hittestDist), pos0, pos1, pos2);\nvec3 bary3 = xyToBarycentric(u_hittestPos + vec2(-u_hittestDist, 0.), pos0, pos1, pos2);\nvec3 bary4 = xyToBarycentric(u_hittestPos, pos0, pos1, pos2);\nvec3 bary5 = xyToBarycentric(u_hittestPos + vec2(u_hittestDist, 0.), pos0, pos1, pos2);\nvec3 bary6 = xyToBarycentric(u_hittestPos + vec2(-u_hittestDist, u_hittestDist), pos0, pos1, pos2);\nvec3 bary7 = xyToBarycentric(u_hittestPos + vec2(0., u_hittestDist), pos0, pos1, pos2);\nvec3 bary8 = xyToBarycentric(u_hittestPos + vec2(u_hittestDist, u_hittestDist), pos0, pos1, pos2);\nvec2 tex0 = a_texCoords  / u_mosaicSize;\nvec2 tex1 = a_texCoords1 / u_mosaicSize;\nvec2 tex2 = a_texCoords2 / u_mosaicSize;\nfloat alphaSum = 0.;\nalphaSum += inTriangle(bary0) * getColor(size, getTextureCoords(bary0, tex0, tex1, tex2)).a;\nalphaSum += inTriangle(bary1) * getColor(size, getTextureCoords(bary1, tex0, tex1, tex2)).a;\nalphaSum += inTriangle(bary2) * getColor(size, getTextureCoords(bary2, tex0, tex1, tex2)).a;\nalphaSum += inTriangle(bary3) * getColor(size, getTextureCoords(bary3, tex0, tex1, tex2)).a;\nalphaSum += inTriangle(bary4) * getColor(size, getTextureCoords(bary4, tex0, tex1, tex2)).a;\nalphaSum += inTriangle(bary5) * getColor(size, getTextureCoords(bary5, tex0, tex1, tex2)).a;\nalphaSum += inTriangle(bary6) * getColor(size, getTextureCoords(bary6, tex0, tex1, tex2)).a;\nalphaSum += inTriangle(bary7) * getColor(size, getTextureCoords(bary7, tex0, tex1, tex2)).a;\nout_pos.z += step(alphaSum, .05) * 2.0;\nout_color = vec4(1. / 255., 0., 0., alphaSum / 255.);\n}\n#endif","icon.frag":"precision mediump float;\n#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <materials/icon/common.glsl>\nvoid main()\n{\n#ifdef HITTEST\nvec4 color = v_color;\n#else\nvec4 color = getColor(v_sizeTex.xy, v_sizeTex.zw);\n#endif\n#ifdef HIGHLIGHT\ncolor.a = step(1.0 / 255.0, color.a);\n#endif\ngl_FragColor = color;\n}","icon.vert":"precision highp float;\nattribute vec4 a_color;\nattribute vec4 a_outlineColor;\nattribute vec4 a_sizeAndOutlineWidth;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nattribute vec2 a_bitSetAndDistRatio;\nattribute vec2 a_zoomRange;\n#include <materials/vcommon.glsl>\n#include <materials/icon/common.glsl>\n#include <materials/icon/hittest.glsl>\nfloat getMarkerScaleFactor(inout vec2 size, in float referenceSize) {\n#ifdef VV_SIZE\nfloat f = getSize(size.y) / size.y;\nfloat sizeFactor = size.y / referenceSize;\nreturn getSize(referenceSize) / referenceSize;\n#else\nreturn 1.;\n#endif\n}\nvoid main()\n{\nINIT;\nfloat a_bitSet = a_bitSetAndDistRatio.x;\nvec3  pos           = vec3(a_pos * POSITION_PRECISION, 1.0);\nvec2  size          = a_sizeAndOutlineWidth.xy * a_sizeAndOutlineWidth.xy / 128.0;\nvec3  offset        = vec3(a_vertexOffset / 16.0, 0.);\nfloat outlineSize   = a_sizeAndOutlineWidth.z * a_sizeAndOutlineWidth.z / 128.0;\nfloat isMapAligned  = getBit(a_bitSet, BITSET_MARKER_ALIGNMENT_MAP);\nfloat referenceSize = a_sizeAndOutlineWidth.w * a_sizeAndOutlineWidth.w / 128.0;\nfloat scaleSymbolProportionally = getBit(a_bitSet, BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY);\nfloat scaleFactor               = getMarkerScaleFactor(size, referenceSize);\nsize.xy     *= scaleFactor;\noffset.xy   *= scaleFactor;\noutlineSize *= scaleSymbolProportionally * (scaleFactor - 1.0) + 1.0;\nvec2 v_tex   = a_texCoords / u_mosaicSize;\nfloat filterFlags = getFilterFlags();\nv_color    = getColor(a_color, a_bitSet, BITSET_GENERIC_LOCK_COLOR);\nv_opacity  = getOpacity();\nv_id       = norm(a_id);\nv_pos      = u_dvsMat3 * pos + getMatrix(isMapAligned) * getRotation()  * offset;\nv_sizeTex  = vec4(size.xy, v_tex.xy);\n#ifdef SDF\nv_isThin   = getBit(a_bitSet, BITSET_MARKER_OUTLINE_ALLOW_COLOR_OVERRIDE);\n#ifdef VV_COLOR\nv_overridingOutlineColor = v_isThin;\n#else\nv_overridingOutlineColor = 0.0;\n#endif\nv_outlineWidth = min(outlineSize, max(max(size.x, size.y) - 0.99, 0.0));\nv_outlineColor = a_outlineColor;\nv_distRatio = a_bitSetAndDistRatio.y / 128.0;\n#endif\n#ifdef HITTEST\nhighp vec4 out_color = vec4(0.);\nhighp vec3 out_pos   = vec3(0.);\nhittestIcon(out_color, out_pos, pos, offset, size, scaleFactor, isMapAligned);\nv_color = out_color;\ngl_PointSize = 1.;\ngl_Position = vec4(clip(v_color, out_pos, filterFlags, a_zoomRange), 1.0);\n#else\ngl_Position = vec4(clip(v_color, v_pos, filterFlags, a_zoomRange), 1.0);\n#endif\n}"},label:{"common.glsl":"uniform mediump float u_zoomLevel;\nuniform mediump float u_mapRotation;\nuniform mediump float u_mapAligned;\nuniform mediump vec2 u_mosaicSize;\nvarying mediump float v_antialiasingWidth;\nvarying mediump float v_edgeDistanceOffset;\nvarying mediump vec2 v_tex;\nvarying mediump vec4 v_color;\nvarying lowp vec4 v_animation;","label.frag":"#include <materials/text/text.frag>","label.vert":"precision highp float;\n#include <materials/vcommon.glsl>\n#include <materials/text/common.glsl>\nattribute vec4 a_color;\nattribute vec4 a_haloColor;\nattribute vec4 a_texAndSize;\nattribute vec4 a_refSymbolAndPlacementOffset;\nattribute vec4 a_glyphData;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nuniform float u_isHaloPass;\nuniform float u_isBackgroundPass;\nuniform float u_mapRotation;\nuniform float u_mapAligned;\nfloat getZ(in float minZoom, in float maxZoom, in float angle) {\nfloat glyphAngle = angle * 360.0 / 254.0;\nfloat mapAngle = u_mapRotation * 360.0 / 254.0;\nfloat diffAngle = min(360.0 - abs(mapAngle - glyphAngle), abs(mapAngle - glyphAngle));\nfloat z = 0.0;\nz += u_mapAligned * (2.0 * (1.0 - step(minZoom, u_currentZoom)));\nz += u_mapAligned * 2.0 * step(90.0, diffAngle);\nz += 2.0 * (1.0 - step(u_currentZoom, maxZoom));\nreturn z;\n}\nvoid main()\n{\nINIT;\nfloat groupMinZoom    = getMinZoom();\nfloat glyphMinZoom    = a_glyphData.x;\nfloat glyphMaxZoom    = a_glyphData.y;\nfloat glyphAngle      = a_glyphData.z;\nfloat a_isBackground  = a_glyphData.w;\nfloat a_minZoom          = max(groupMinZoom, glyphMinZoom);\nfloat a_placementPadding = a_refSymbolAndPlacementOffset.x * EXTRUDE_SCALE_PLACEMENT_PADDING;\nvec2  a_placementDir     = unpack_u8_nf32(a_refSymbolAndPlacementOffset.zw);\nfloat a_refSymbolSize    = a_refSymbolAndPlacementOffset.y;\nfloat fontSize           = a_texAndSize.z;\nfloat haloSize           = a_texAndSize.w * OUTLINE_SCALE;\nvec2  vertexOffset = a_vertexOffset * OFFSET_PRECISION;\nvec3  pos          = vec3(a_pos * POSITION_PRECISION, 1.0);\nfloat z            = getZ(a_minZoom, glyphMaxZoom, glyphAngle);\nfloat fontScale    = fontSize / SDF_FONT_SIZE;\nfloat halfSize     = getSize(a_refSymbolSize) / 2.0;\nfloat animation    = pow(getAnimationState(), vec4(2.0)).r;\nfloat isText = 1.0 - a_isBackground;\nfloat isBackground = u_isBackgroundPass * a_isBackground;\nvec4  nonHaloColor = (isBackground + isText) * a_color;\nv_color     = animation * ((1.0 - u_isHaloPass) * nonHaloColor + (u_isHaloPass * a_haloColor));\nv_opacity   = 1.0;\nv_tex       = a_texCoords / u_mosaicSize;\nv_edgeDistanceOffset = u_isHaloPass * haloSize / fontScale / MAX_SDF_DISTANCE;\nv_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\nvec2 placementOffset = a_placementDir * (halfSize + a_placementPadding);\nvec3 glyphOffset     = u_displayMat3 * vec3(vertexOffset + placementOffset, 0.0);\nvec3 v_pos           = vec3((u_dvsMat3 * pos + glyphOffset).xy, z);\nfloat isHidden = u_isBackgroundPass * isText + (1.0 - u_isBackgroundPass) * a_isBackground;\nv_pos.z += 2.0 * isHidden;\ngl_Position = vec4(v_pos, 1.0);\n#ifdef DEBUG\nv_color = vec4(a_color.rgb, z == 0.0 ? 1.0 : 0.645);\n#endif\n}"},line:{"common.glsl":"varying lowp vec4 v_color;\nvarying highp vec3 v_id;\nvarying mediump vec2 v_normal;\nvarying mediump float v_lineHalfWidth;\nvarying lowp float v_opacity;\n#ifdef PATTERN\nvarying mediump vec4 v_tlbr;\nvarying mediump vec2 v_patternSize;\n#endif\n#if defined(PATTERN) || defined(SDF)\nvarying highp float v_accumulatedDistance;\n#endif\n#ifdef SDF\nvarying mediump float v_lineWidthRatio;\n#endif","hittest.glsl":"#include <materials/hittest/common.glsl>\n#ifdef HITTEST\nattribute vec2 a_pos1;\nattribute vec2 a_pos2;\nvoid hittestLine(out lowp vec4 out_color, out highp vec3 out_pos, float halfWidth) {\nvec3 pos        = u_viewMat3 * u_tileMat3 * vec3(a_pos  * POSITION_PRECISION, 1.);\nvec3 pos1       = u_viewMat3 * u_tileMat3 * vec3(a_pos1 * POSITION_PRECISION, 1.);\nvec3 pos2       = u_viewMat3 * u_tileMat3 * vec3(a_pos2 * POSITION_PRECISION, 1.);\nvec3 outTextureCoords = vec3(getAttributeDataTextureCoords(a_id), 0.0);\nfloat dist = min(distPointSegment(u_hittestPos, pos.xy, pos1.xy),\ndistPointSegment(u_hittestPos, pos.xy, pos2.xy)) - halfWidth;\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\nif (dist >= u_hittestDist) {\nout_pos.z += 2.0;\n}\nout_color = vec4(1. / 255., 0, 0, dist <= 0. ? (1. / 255.) : 0.);\n}\n#endif","line.frag":"precision lowp float;\n#include <util/encoding.glsl>\n#include <materials/constants.glsl>\n#include <materials/symbologyTypeUtils.glsl>\n#include <materials/line/common.glsl>\n#include <materials/shared/line/common.glsl>\n#include <materials/shared/line/line.frag>\n#ifdef HITTEST\nvoid main() {\ngl_FragColor = v_color;\n}\n#else\nvoid main() {\nLineData inputs = LineData(\nv_color,\nv_normal,\nv_lineHalfWidth,\nv_opacity,\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#ifdef PATTERN\nv_tlbr,\nv_patternSize,\n#endif\n#ifdef SDF\nv_lineWidthRatio,\n#endif\n#if defined(PATTERN) || defined(SDF)\nv_accumulatedDistance,\n#endif\n#endif\nv_id\n);\ngl_FragColor = shadeLine(inputs);\n}\n#endif","line.vert":"precision highp float;\nattribute vec4 a_color;\nattribute vec4 a_offsetAndNormal;\nattribute vec2 a_accumulatedDistanceAndHalfWidth;\nattribute vec4 a_tlbr;\nattribute vec4 a_segmentDirection;\nattribute vec2 a_aux;\nattribute vec2 a_zoomRange;\n#include <materials/vcommon.glsl>\n#include <materials/symbologyTypeUtils.glsl>\n#include <materials/line/common.glsl>\n#include <materials/line/hittest.glsl>\n#include <materials/shared/line/common.glsl>\n#include <materials/shared/line/line.vert>\n#ifdef HITTEST\nvoid draw() {\nfloat aa        = 0.5 * u_antialiasing;\nfloat a_halfWidth = a_accumulatedDistanceAndHalfWidth.y / 16.;\nfloat a_cimHalfWidth = a_aux.x / 16. ;\nvec2  a_offset = a_offsetAndNormal.xy / 16.;\nfloat baseWidth = getBaseLineHalfWidth(a_halfWidth, a_cimHalfWidth);\nfloat halfWidth = getLineHalfWidth(baseWidth, aa);\nhighp vec3 pos  = vec3(0.);\nv_color = vec4(0.);\nhittestLine(v_color, pos, halfWidth);\ngl_PointSize = 1.;\ngl_Position = vec4(clip(v_color, pos, getFilterFlags(), a_zoomRange), 1.0);\n}\n#else\nvoid draw()\n{\nhighp vec3 pos = vec3(0.);\nLineData outputs = buildLine(\npos,\na_id,\na_pos,\na_color,\na_offsetAndNormal.xy / 16.,\na_offsetAndNormal.zw / 16.,\na_accumulatedDistanceAndHalfWidth.x,\na_accumulatedDistanceAndHalfWidth.y / 16.,\na_segmentDirection.w,\na_tlbr,\na_segmentDirection.xy / 16.,\na_aux.x / 16.\n);\nv_id              = outputs.id;\nv_color           = outputs.color;\nv_normal          = outputs.normal;\nv_lineHalfWidth   = outputs.lineHalfWidth;\nv_opacity         = outputs.opacity;\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#ifdef PATTERN\nv_tlbr          = outputs.tlbr;\nv_patternSize   = outputs.patternSize;\n#endif\n#ifdef SDF\nv_lineWidthRatio = outputs.lineWidthRatio;\n#endif\n#if defined(PATTERN) || defined(SDF)\nv_accumulatedDistance = outputs.accumulatedDistance;\n#endif\n#endif\ngl_Position = vec4(clip(outputs.color, pos, getFilterFlags(), a_zoomRange), 1.0);\n}\n#endif\nvoid main() {\nINIT;\ndraw();\n}"},pie:{"pie.frag":"precision mediump float;\n#include <util/atan2.glsl>\n#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <materials/icon/common.glsl>\nvarying float v_size;\nvarying vec2 v_offset;\nvarying vec2 v_filteredSectorToColorId[NUMBER_OF_FIELDS];\nvarying float v_numOfEntries;\nvarying float v_maxSectorAngle;\nuniform lowp vec4 u_colors[NUMBER_OF_FIELDS];\nuniform lowp vec4 u_defaultColor;\nuniform lowp vec4 u_othersColor;\nuniform lowp vec4 u_outlineColor;\nuniform float u_donutRatio;\nuniform float u_sectorThreshold;\nstruct FilteredChartInfo {\nfloat endSectorAngle;\nint colorId;\n};\nlowp vec4 getSectorColor(in int index, in vec2 filteredSectorToColorId[NUMBER_OF_FIELDS]) {\n#if __VERSION__ == 300\nmediump int colorIndex = int(filteredSectorToColorId[index].y);\nreturn u_colors[colorIndex];\n#else\nmediump int colorIndex;\nfor (int i = 0; i < NUMBER_OF_FIELDS; ++i) {\nif (i == index) {\ncolorIndex = int(filteredSectorToColorId[i].y);\n}\n}\nfor (int i = 0; i < NUMBER_OF_FIELDS; ++i) {\nif (i == colorIndex) {\nreturn u_colors[i];\n}\n}\nreturn u_colors[NUMBER_OF_FIELDS - 1];\n#endif\n}\nconst int OTHER_SECTOR_ID = 255;\n#ifdef HITTEST\nvec4 getColor() {\nreturn v_color;\n}\n#else\nvec4 getColor() {\nfloat angle = 90.0 - C_RAD_TO_DEG * atan2(v_offset.y, v_offset.x);\nif (angle < 0.0) {\nangle += 360.0;\n} else if (angle > 360.0) {\nangle = mod(angle, 360.0);\n}\nint numOfEntries = int(v_numOfEntries);\nfloat maxSectorAngle = v_maxSectorAngle;\nlowp vec4 fillColor = (maxSectorAngle > 0.0 || u_sectorThreshold > 0.0) ? u_othersColor : u_defaultColor;\nlowp vec4 prevColor = vec4(0.0);\nlowp vec4 nextColor = vec4(0.0);\nfloat startSectorAngle = 0.0;\nfloat endSectorAngle = 0.0;\nif (angle < maxSectorAngle) {\nfor (int index = 0; index < NUMBER_OF_FIELDS; ++index) {\nstartSectorAngle = endSectorAngle;\nendSectorAngle = v_filteredSectorToColorId[index].x;\nif (endSectorAngle > angle) {\nfillColor = getSectorColor(index, v_filteredSectorToColorId);\nprevColor = u_sectorThreshold != 0.0 && index == 0 && abs(360.0 - maxSectorAngle) < EPSILON ? u_othersColor :\ngetSectorColor(index > 0 ? index - 1 : numOfEntries - 1, v_filteredSectorToColorId);\nnextColor = u_sectorThreshold != 0.0 && abs(endSectorAngle - maxSectorAngle) < EPSILON ? u_othersColor :\ngetSectorColor(index < numOfEntries - 1 ? index + 1 : 0, v_filteredSectorToColorId);\nbreak;\n}\nif (index == numOfEntries - 1) {\nbreak;\n}\n}\n} else {\nprevColor = getSectorColor(numOfEntries - 1, v_filteredSectorToColorId);\nnextColor = getSectorColor(0, v_filteredSectorToColorId);\nstartSectorAngle = maxSectorAngle;\nendSectorAngle = 360.0;\n}\nlowp vec4 outlineColor = u_outlineColor;\nfloat offset = length(v_offset);\nfloat distanceSize = offset * v_size;\nif (startSectorAngle != 0.0 || endSectorAngle != 360.0) {\nfloat distanceToStartSector = (angle - startSectorAngle);\nfloat distanceToEndSector = (endSectorAngle - angle);\nfloat sectorThreshold = 0.6;\nfloat beginSectorAlpha = smoothstep(0.0, sectorThreshold, distanceToStartSector * offset);\nfloat endSectorAlpha = smoothstep(0.0, sectorThreshold, distanceToEndSector * offset);\nif (endSectorAlpha > 0.0) {\nfillColor = mix(nextColor, fillColor, endSectorAlpha);\n} else if (beginSectorAlpha > 0.0) {\nfillColor = mix(prevColor, fillColor, beginSectorAlpha);\n}\n}\nfloat donutSize = u_donutRatio * (v_size - v_outlineWidth);\nfloat endOfDonut = donutSize - v_outlineWidth;\nfloat aaThreshold = 0.75;\nfloat innerCircleAlpha = endOfDonut - aaThreshold > 0.0 ? smoothstep(endOfDonut - aaThreshold, endOfDonut + aaThreshold, distanceSize) : 1.0;\nfloat outerCircleAlpha = 1.0 - smoothstep(v_size - aaThreshold, v_size + aaThreshold , distanceSize);\nfloat circleAlpha = innerCircleAlpha * outerCircleAlpha;\nfloat startOfOutline = v_size - v_outlineWidth;\nif (startOfOutline > 0.0 && v_outlineWidth > 0.25) {\nfloat outlineFactor = smoothstep(startOfOutline - aaThreshold, startOfOutline + aaThreshold, distanceSize);\nfloat innerLineFactor = donutSize - aaThreshold > 0.0 ? 1.0 - smoothstep(donutSize - aaThreshold, donutSize + aaThreshold , distanceSize) : 0.0;\nfillColor = mix(fillColor, outlineColor, innerLineFactor + outlineFactor);\n}\nreturn v_opacity * circleAlpha * fillColor;\n}\n#endif\nvoid main()\n{\nvec4 color = getColor();\n#ifdef HIGHLIGHT\ncolor.a = step(1.0 / 255.0, color.a);\n#endif\ngl_FragColor = color;\n}","pie.vert":"precision highp float;\nattribute vec4 a_color;\nattribute vec4 a_outlineColor;\nattribute vec4 a_sizeAndOutlineWidth;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nattribute vec2 a_bitSetAndDistRatio;\nattribute vec2 a_zoomRange;\nuniform float u_outlineWidth;\nuniform mediump float u_sectorThreshold;\nvarying float v_size;\nvarying vec2 v_offset;\nvarying vec2 v_filteredSectorToColorId[NUMBER_OF_FIELDS];\nvarying float v_numOfEntries;\nvarying float v_maxSectorAngle;\nstruct FilteredChartInfo {\nfloat endSectorAngle;\nint colorId;\n};\nint filter(in float sectorAngle,\nin int currentIndex,\ninout FilteredChartInfo filteredInfo,\ninout vec2 filteredSectorToColorId[NUMBER_OF_FIELDS]) {\nif (sectorAngle > u_sectorThreshold * 360.0) {\nfilteredInfo.endSectorAngle += sectorAngle;\n#if __VERSION__ == 300\nfilteredSectorToColorId[filteredInfo.colorId] = vec2(filteredInfo.endSectorAngle, currentIndex);\n#else\nfor (int i = 0; i < NUMBER_OF_FIELDS; i++) {\nif (i == filteredInfo.colorId) {\nfilteredSectorToColorId[i] = vec2(filteredInfo.endSectorAngle, currentIndex);\n}\n}\n#endif\n++filteredInfo.colorId;\n}\nreturn 0;\n}\nint filterValues(inout vec2 filteredSectorToColorId[NUMBER_OF_FIELDS],\ninout FilteredChartInfo filteredInfo,\nin float sectorAngles[NUMBER_OF_FIELDS]) {\nfor (int index = 0; index < NUMBER_OF_FIELDS; ++index) {\nfloat sectorValue = sectorAngles[index];\nfilter(sectorValue, index, filteredInfo, filteredSectorToColorId);\n}\nreturn filteredInfo.colorId;\n}\n#include <materials/vcommon.glsl>\n#include <materials/icon/common.glsl>\n#include <materials/hittest/common.glsl>\nvec2 getMarkerSize(inout vec2 offset, inout vec2 baseSize, inout float outlineSize, in float referenceSize, in float bitSet) {\nvec2 outSize = baseSize;\n#ifdef VV_SIZE\nfloat r = 0.5 * getSize(referenceSize) / referenceSize;\noutSize.xy *= r;\noffset.xy *= r;\nfloat scaleSymbolProportionally = getBit(bitSet, BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY);\noutlineSize *= scaleSymbolProportionally * (r - 1.0) + 1.0;\n#endif\nreturn outSize;\n}\nvec3 getOffset(in vec2 in_offset, float a_bitSet) {\nfloat isMapAligned = getBit(a_bitSet, BITSET_MARKER_ALIGNMENT_MAP);\nvec3  offset       = vec3(in_offset, 0.0);\nreturn getMatrix(isMapAligned) * offset;\n}\nfloat filterNaNValues(in float value) {\nreturn value != NAN_MAGIC_NUMBER && value > 0.0 ? value : 0.0;\n}\nvoid main()\n{\nINIT;\nvec2  a_size   = a_sizeAndOutlineWidth.xy * a_sizeAndOutlineWidth.xy / 128.0;\nvec2  a_offset = a_vertexOffset / 16.0;\nfloat outlineSize = u_outlineWidth;\nfloat a_bitSet = a_bitSetAndDistRatio.x;\nvec2 size = getMarkerSize(a_offset, a_size, outlineSize, a_sizeAndOutlineWidth.w * a_sizeAndOutlineWidth.w / 128.0, a_bitSet);\nfloat filterFlags = getFilterFlags();\nvec3  pos         = vec3(a_pos * POSITION_PRECISION, 1.0);\nv_opacity      = getOpacity();\nv_id           = norm(a_id);\nv_pos          = u_dvsMat3 * pos + getOffset(a_offset, a_bitSet);\nv_offset       = sign(a_texCoords - 0.5);\nv_size         = max(size.x, size.y);\nv_outlineWidth = outlineSize;\nfloat attributeData[10];\nvec4 attributeData0 = getAttributeData3(a_id);\nattributeData[0] = filterNaNValues(attributeData0.x);\nattributeData[1] = filterNaNValues(attributeData0.y);\nattributeData[2] = filterNaNValues(attributeData0.z);\nattributeData[3] = filterNaNValues(attributeData0.w);\n#if (NUMBER_OF_FIELDS > 4)\nvec4 attributeData1 = getAttributeData4(a_id);\nattributeData[4] = filterNaNValues(attributeData1.x);\nattributeData[5] = filterNaNValues(attributeData1.y);\nattributeData[6] = filterNaNValues(attributeData1.z);\nattributeData[7] = filterNaNValues(attributeData1.w);\n#endif\n#if (NUMBER_OF_FIELDS > 8)\nvec4 attributeData2 = getAttributeData5(a_id);\nattributeData[8] = filterNaNValues(attributeData2.x);\nattributeData[9] = filterNaNValues(attributeData2.y);\n#endif\nfloat sum = 0.0;\nfor (int i = 0; i < NUMBER_OF_FIELDS; ++i) {\nsum += attributeData[i];\n}\nfloat sectorAngles[NUMBER_OF_FIELDS];\nfor (int i = 0; i < NUMBER_OF_FIELDS; ++i) {\nsectorAngles[i] = 360.0 * attributeData[i] / sum;\n}\nvec2 filteredSectorToColorId[NUMBER_OF_FIELDS];\nFilteredChartInfo filteredInfo = FilteredChartInfo(0.0, 0);\nint numOfEntries = filterValues(filteredSectorToColorId, filteredInfo, sectorAngles);\nv_numOfEntries = float(numOfEntries);\nv_maxSectorAngle = filteredInfo.endSectorAngle;\n#if __VERSION__ == 300\nv_filteredSectorToColorId = filteredSectorToColorId;\n#else\nfor (int i = 0; i < NUMBER_OF_FIELDS; ++i) {\nif (i == numOfEntries) {\nbreak;\n}\nv_filteredSectorToColorId[i] = filteredSectorToColorId[i];\n}\n#endif\n#ifdef HITTEST\nhighp vec3 out_pos = vec3(0.0);\nv_color            = vec4(0.0);\nhittestMarker(v_color, out_pos, u_viewMat3 * u_tileMat3 *  pos, v_size);\ngl_PointSize = 1.0;\ngl_Position = vec4(clip(v_color, out_pos, filterFlags, a_zoomRange), 1.0);\n#else\ngl_Position = vec4(clip(v_color, v_pos, filterFlags, a_zoomRange), 1.0);\n#endif\n}"},shared:{line:{"common.glsl":"#if !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE) && defined(PATTERN)\nuniform mediump vec2 u_mosaicSize;\nvarying mediump float v_sampleAlphaOnly;\n#endif\nstruct LineData {\nlowp vec4 color;\nmediump vec2 normal;\nmediump float lineHalfWidth;\nlowp float opacity;\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#ifdef PATTERN\nmediump vec4 tlbr;\nmediump vec2 patternSize;\n#endif\n#ifdef SDF\nmediump float lineWidthRatio;\n#endif\n#if defined(PATTERN) || defined(SDF)\nhighp float accumulatedDistance;\n#endif\n#endif\nhighp vec3 id;\n};","line.frag":"uniform lowp float u_blur;\n#if !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE) && !defined(HIGHLIGHT)\n#if defined(PATTERN) || defined(SDF)\nuniform sampler2D u_texture;\nuniform highp float u_pixelRatio;\n#endif\n#endif\n#if defined(SDF) && !defined(HIGHLIGHT) && !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE)\nlowp vec4 getLineColor(LineData line) {\nmediump float adjustedPatternWidth = line.patternSize.x * 2.0 * line.lineWidthRatio;\nmediump float relativeTexX = fract(line.accumulatedDistance / adjustedPatternWidth);\nmediump float relativeTexY = 0.5 + 0.25 * line.normal.y;\nmediump vec2 texCoord = mix(line.tlbr.xy, line.tlbr.zw, vec2(relativeTexX, relativeTexY));\nmediump float d = rgba2float(texture2D(u_texture, texCoord)) - 0.5;\nfloat dist = d * line.lineHalfWidth;\nreturn line.opacity * clamp(0.5 - dist, 0.0, 1.0) * line.color;\n}\n#elif defined(PATTERN) && !defined(HIGHLIGHT) && !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE)\nlowp vec4 getLineColor(LineData line) {\nmediump float lineHalfWidth = line.lineHalfWidth;\nmediump float adjustedPatternHeight = line.patternSize.y * 2.0 * lineHalfWidth / line.patternSize.x;\nmediump float relativeTexY = fract(line.accumulatedDistance / adjustedPatternHeight);\nmediump float relativeTexX = 0.5 + 0.5 * line.normal.y;\nmediump vec2 texCoord = mix(line.tlbr.xy, line.tlbr.zw, vec2(relativeTexX, relativeTexY));\nlowp vec4 color = texture2D(u_texture, texCoord);\n#ifdef VV_COLOR\nif (v_sampleAlphaOnly > 0.5) {\ncolor.rgb = vec3(color.a);\n}\n#endif\nreturn line.opacity * line.color * color;\n}\n#else\nlowp vec4 getLineColor(LineData line) {\nreturn line.opacity * line.color;\n}\n#endif\nvec4 shadeLine(LineData line)\n{\nmediump float thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(line.lineHalfWidth, THIN_LINE_HALF_WIDTH), 1.0);\nmediump float fragDist = length(line.normal) * line.lineHalfWidth;\nlowp float alpha = clamp(thinLineFactor * (line.lineHalfWidth - fragDist) / (u_blur + thinLineFactor - 1.0), 0.0, 1.0);\nlowp vec4 out_color = getLineColor(line) * alpha;\n#ifdef HIGHLIGHT\nout_color.a = step(1.0 / 255.0, out_color.a);\n#endif\n#ifdef ID\nif (out_color.a < 1.0 / 255.0) {\ndiscard;\n}\nout_color = vec4(line.id, 0.0);\n#endif\nreturn out_color;\n}","line.vert":"float getBaseLineHalfWidth(in float lineHalfWidth, in float referenceHalfWidth) {\n#ifdef VV_SIZE\nfloat refLineWidth = 2.0 * referenceHalfWidth;\nreturn 0.5 * (lineHalfWidth / max(referenceHalfWidth, EPSILON)) * getSize(refLineWidth);\n#else\nreturn lineHalfWidth;\n#endif\n}\nfloat getLineHalfWidth(in float baseWidth, in float aa) {\nfloat halfWidth = max(baseWidth + aa, 0.45) + 0.1 * aa;\n#ifdef HIGHLIGHT\nhalfWidth = max(halfWidth, 2.0);\n#endif\nreturn halfWidth;\n}\nvec2 getDist(in vec2 offset, in float halfWidth) {\nfloat thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(halfWidth, THIN_LINE_HALF_WIDTH), 1.0);\nreturn thinLineFactor * halfWidth * offset;\n}\nLineData buildLine(\nout vec3 out_pos,\nin vec3 in_id,\nin vec2 in_pos,\nin vec4 in_color,\nin vec2 in_offset,\nin vec2 in_normal,\nin float in_accumulatedDist,\nin float in_lineHalfWidth,\nin float in_bitSet,\nin vec4 in_tlbr,\nin vec2 in_segmentDirection,\nin float in_referenceHalfWidth\n)\n{\nfloat aa        = 0.5 * u_antialiasing;\nfloat baseWidth = getBaseLineHalfWidth(in_lineHalfWidth, in_referenceHalfWidth);\nfloat halfWidth = getLineHalfWidth(baseWidth, aa);\nfloat z         = 2.0 * step(baseWidth, 0.0);\nvec2  dist      = getDist(in_offset, halfWidth);\nvec3  offset    = u_displayViewMat3 * vec3(dist, 0.0);\nvec3  pos       = u_dvsMat3 * vec3(in_pos * POSITION_PRECISION, 1.0) + offset;\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\nvec4  color     = in_color;\nfloat opacity   = 1.0;\n#else\nvec4  color     = getColor(in_color, in_bitSet, BITSET_GENERIC_LOCK_COLOR);\nfloat opacity   = getOpacity();\n#ifdef SDF\nconst float SDF_PATTERN_HALF_WIDTH = 15.5;\nfloat scaleDash = getBit(in_bitSet, BITSET_LINE_SCALE_DASH);\nfloat lineWidthRatio = (scaleDash * max(halfWidth - 0.55 * u_antialiasing, 0.25) + (1.0 - scaleDash)) / SDF_PATTERN_HALF_WIDTH;\n#endif\n#endif\n#if !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE) && defined(PATTERN)\nv_sampleAlphaOnly = getBit(in_bitSet, BITSET_GENERIC_CONSIDER_ALPHA_ONLY);\n#endif\nout_pos = vec3(pos.xy, z);\nreturn LineData(\ncolor,\nin_normal,\nhalfWidth,\nopacity,\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#ifdef PATTERN\nin_tlbr / u_mosaicSize.xyxy,\nvec2(in_tlbr.z - in_tlbr.x, in_tlbr.w - in_tlbr.y),\n#endif\n#ifdef SDF\nlineWidthRatio,\n#endif\n#if defined(PATTERN) || defined(SDF)\nin_accumulatedDist * u_zoomFactor + dot(in_segmentDirection, dist),\n#endif\n#endif\nnorm(in_id)\n);\n}"}},"symbologyTypeUtils.glsl":"#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_OUTLINE_FILL || SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_OUTLINE_FILL_SIMPLE\n#define SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#endif\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_SIMPLE || SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_OUTLINE_FILL_SIMPLE\n#define SYMBOLOGY_TYPE_IS_SIMPLE_LIKE\n#endif",text:{"common.glsl":"uniform highp vec2 u_mosaicSize;\nvarying highp vec3 v_id;\nvarying mediump vec3 v_pos;\nvarying lowp float v_opacity;\nvarying lowp vec4 v_color;\nvarying highp vec2 v_tex;\nvarying mediump float v_antialiasingWidth;\nvarying mediump float v_edgeDistanceOffset;\nvarying lowp float v_transparency;","hittest.glsl":"#include <materials/hittest/common.glsl>","text.frag":"precision mediump float;\n#include <materials/text/common.glsl>\nuniform lowp sampler2D u_texture;\n#ifdef HITTEST\nvec4 getColor() {\nreturn v_color;\n}\n#else\nvec4 getColor()\n{\nfloat SDF_CUTOFF = (2.0 / 8.0);\nfloat SDF_BASE_EDGE_DIST = 1.0 - SDF_CUTOFF;\nlowp float dist = texture2D(u_texture, v_tex).a;\nmediump float edge = SDF_BASE_EDGE_DIST - v_edgeDistanceOffset;\n#ifdef HIGHLIGHT\nedge /= 2.0;\n#endif\nlowp float aa = v_antialiasingWidth;\nlowp float alpha = smoothstep(edge - aa, edge + aa, dist);\nreturn alpha * v_color * v_opacity;\n}\n#endif\nvoid main()\n{\ngl_FragColor = getColor();\n}","text.vert":"precision highp float;\n#include <materials/utils.glsl>\n#include <materials/vcommon.glsl>\n#include <materials/text/common.glsl>\n#include <materials/text/hittest.glsl>\nattribute vec4 a_color;\nattribute vec4 a_haloColor;\nattribute vec4 a_texFontSize;\nattribute vec4 a_aux;\nattribute vec2 a_zoomRange;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nuniform float u_isHaloPass;\nuniform float u_isBackgroundPass;\nfloat getTextSize(inout vec2 offset, inout float baseSize, in float referenceSize) {\n#ifdef VV_SIZE\nfloat r = getSize(referenceSize) / referenceSize;\nbaseSize *= r;\noffset.xy *= r;\nreturn baseSize;\n#endif\nreturn baseSize;\n}\nvoid main()\n{\nINIT;\nfloat a_isBackground  = a_aux.y;\nfloat a_referenceSize = a_aux.z * a_aux.z / 256.0;\nfloat a_bitSet        = a_aux.w;\nfloat a_fontSize      = a_texFontSize.z;\nvec2  a_offset        = a_vertexOffset * OFFSET_PRECISION;\nvec3  in_pos        = vec3(a_pos * POSITION_PRECISION, 1.0);\nfloat fontSize      = getTextSize(a_offset, a_fontSize, a_referenceSize);\nfloat fontScale     = fontSize / SDF_FONT_SIZE;\nvec3  offset        = getRotation() * vec3(a_offset, 0.0);\nmat3  extrudeMatrix = getBit(a_bitSet, 0) == 1.0 ? u_displayViewMat3 : u_displayMat3;\nfloat isText = 1.0 - a_isBackground;\nfloat isBackground = u_isBackgroundPass * a_isBackground;\nvec4  nonHaloColor  = (isBackground * a_color) + (isText * getColor(a_color, a_bitSet, 1));\nv_color   = u_isHaloPass * a_haloColor + (1.0 - u_isHaloPass) * nonHaloColor;\nv_opacity = getOpacity();\nv_id      = norm(a_id);\nv_tex     = a_texCoords / u_mosaicSize;\nv_pos     = u_dvsMat3 * in_pos + extrudeMatrix * offset;\nfloat isHidden = u_isBackgroundPass * isText + (1.0 - u_isBackgroundPass) * a_isBackground;\nv_pos.z += 2.0 * isHidden;\nv_edgeDistanceOffset = u_isHaloPass * OUTLINE_SCALE * a_texFontSize.w / fontScale / MAX_SDF_DISTANCE;\nv_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\n#ifdef HITTEST\nhighp vec3 out_pos  = vec3(0.);\nv_color = vec4(0.);\nhittestMarker(v_color, out_pos, u_viewMat3 * u_tileMat3 *  vec3(a_pos * POSITION_PRECISION, 1.0)\n+ u_tileMat3 * offset, fontSize / 2.);\ngl_PointSize = 1.;\ngl_Position = vec4(clip(v_color, out_pos, getFilterFlags(), a_zoomRange), 1.0);\n#else\ngl_Position =  vec4(clip(v_color, v_pos, getFilterFlags(), a_zoomRange), 1.0);\n#endif\n}"},"utils.glsl":"float rshift(in float u32, in int amount) {\nreturn floor(u32 / pow(2.0, float(amount)));\n}\nfloat getBit(in float bitset, in int bitIndex) {\nfloat offset = pow(2.0, float(bitIndex));\nreturn mod(floor(bitset / offset), 2.0);\n}\nfloat getFilterBit(in float bitset, in int bitIndex) {\nreturn getBit(bitset, bitIndex + 1);\n}\nfloat getHighlightBit(in float bitset) {\nreturn getBit(bitset, 0);\n}\nhighp vec3 unpackDisplayIdTexel(in highp vec3 bitset) {\nfloat isAggregate = getBit(bitset.b, 7);\nreturn (1.0 - isAggregate) * bitset + isAggregate * (vec3(bitset.rgb) - vec3(0.0, 0.0, float(0x80)));\n}\nvec4 unpack(in float u32) {\nfloat r = mod(rshift(u32, 0), 255.0);\nfloat g = mod(rshift(u32, 8), 255.0);\nfloat b = mod(rshift(u32, 16), 255.0);\nfloat a = mod(rshift(u32, 24), 255.0);\nreturn vec4(r, g, b, a);\n}\nvec3 norm(in vec3 v) {\nreturn v /= 255.0;\n}\nvec4 norm(in vec4 v) {\nreturn v /= 255.0;\n}\nfloat max4(vec4 target) {\nreturn max(max(max(target.x, target.y), target.z), target.w);\n}\nvec2 unpack_u8_nf32(vec2 bytes) {\nreturn (bytes - 127.0) / 127.0;\n}\nhighp float rand(in vec2 co) {\nhighp float a = 12.9898;\nhighp float b = 78.233;\nhighp float c = 43758.5453;\nhighp float dt = dot(co, vec2(a,b));\nhighp float sn = mod(dt, 3.14);\nreturn fract(sin(sn) * c);\n}","vcommon.glsl":"#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <materials/attributeData.glsl>\n#include <materials/vv.glsl>\n#include <materials/barycentric.glsl>\nattribute vec2 a_pos;\nattribute highp vec3 a_id;\nuniform highp mat3 u_dvsMat3;\nuniform highp mat3 u_displayMat3;\nuniform highp mat3 u_displayViewMat3;\nuniform highp mat3 u_tileMat3;\nuniform highp mat3 u_viewMat3;\nuniform highp float u_pixelRatio;\nuniform mediump float u_zoomFactor;\nuniform mediump float u_antialiasing;\nuniform mediump float u_currentZoom;\nvec4 VV_ADATA = vec4(0.0);\nvoid loadVisualVariableData(inout vec4 target) {\n#ifdef SUPPORTS_TEXTURE_FLOAT\ntarget.rgba = getAttributeData2(a_id);\n#else\nvec4 data0 = getAttributeData2(a_id);\nvec4 data1 = getAttributeData3(a_id);\ntarget.r = u88VVToFloat(data0.rg * 255.0);\ntarget.g = u88VVToFloat(data0.ba * 255.0);\ntarget.b = u88VVToFloat(data1.rg * 255.0);\ntarget.a = u88VVToFloat(data1.ba * 255.0);\n#endif\n}\n#ifdef VV\n#define INIT loadVisualVariableData(VV_ADATA)\n#else\n#define INIT\n#endif\nvec4 getColor(in vec4 a_color, in float a_bitSet, int index) {\n#ifdef VV_COLOR\nfloat isColorLocked   = getBit(a_bitSet, index);\nreturn getVVColor(VV_ADATA[ATTR_VV_COLOR], a_color, isColorLocked);\n#else\nreturn a_color;\n#endif\n}\nfloat getOpacity() {\n#ifdef VV_OPACITY\nreturn getVVOpacity(VV_ADATA[ATTR_VV_OPACITY]);\n#else\nreturn 1.0;\n#endif\n}\nfloat getSize(in float in_size) {\n#ifdef VV_SIZE\nreturn getVVSize(in_size, VV_ADATA[ATTR_VV_SIZE]);\n#else\nreturn in_size;\n#endif\n}\nmat3 getRotation() {\n#ifdef VV_ROTATION\nreturn getVVRotationMat3(mod(VV_ADATA[ATTR_VV_ROTATION], 360.0));\n#else\nreturn mat3(1.0);\n#endif\n}\nfloat getFilterFlags() {\n#ifdef IGNORES_SAMPLER_PRECISION\nreturn ceil(getAttributeData0(a_id).x * 255.0);\n#else\nreturn getAttributeData0(a_id).x * 255.0;\n#endif\n}\nvec4 getAnimationState() {\nreturn getAttributeData1(a_id);\n}\nfloat getMinZoom() {\nvec4 data0 = getAttributeData0(a_id) * 255.0;\nreturn data0.g;\n}\nmat3 getMatrixNoDisplay(float isMapAligned) {\nreturn isMapAligned * u_viewMat3 * u_tileMat3 + (1.0 - isMapAligned) * u_tileMat3;\n}\nmat3 getMatrix(float isMapAligned) {\nreturn isMapAligned * u_displayViewMat3 + (1.0 - isMapAligned) * u_displayMat3;\n}\nvec3 clip(inout vec4 color, inout vec3 pos, in float filterFlags, in vec2 minMaxZoom) {\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 0));\n#ifdef INSIDE\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 1));\n#elif defined(OUTSIDE)\npos.z += 2.0 * getFilterBit(filterFlags, 1);\n#elif defined(HIGHLIGHT)\n#if !defined(HIGHLIGHT_ALL)\npos.z += 2.0 * (1.0 - getHighlightBit(filterFlags));\n#endif\n#endif\npos.z += 2.0 * (step(minMaxZoom.y, u_currentZoom) + (1.0 - step(minMaxZoom.x, u_currentZoom)));\nreturn pos;\n}","vv.glsl":"#if defined(VV_SIZE_MIN_MAX_VALUE) || defined(VV_SIZE_SCALE_STOPS) || defined(VV_SIZE_FIELD_STOPS) || defined(VV_SIZE_UNIT_VALUE)\n#define VV_SIZE\n#endif\n#if defined(VV_COLOR) || defined(VV_SIZE) || defined(VV_OPACITY) || defined(VV_ROTATION)\n#define VV\n#endif\n#ifdef VV_COLOR\nuniform highp float u_vvColorValues[8];\nuniform vec4 u_vvColors[8];\n#endif\n#ifdef VV_SIZE_MIN_MAX_VALUE\nuniform highp vec4 u_vvSizeMinMaxValue;\n#endif\n#ifdef VV_SIZE_SCALE_STOPS\nuniform highp float u_vvSizeScaleStopsValue;\n#endif\n#ifdef VV_SIZE_FIELD_STOPS\nuniform highp float u_vvSizeFieldStopsValues[6];\nuniform float u_vvSizeFieldStopsSizes[6];\n#endif\n#ifdef VV_SIZE_UNIT_VALUE\nuniform highp float u_vvSizeUnitValueWorldToPixelsRatio;\n#endif\n#ifdef VV_OPACITY\nuniform highp float u_vvOpacityValues[8];\nuniform float u_vvOpacities[8];\n#endif\n#ifdef VV_ROTATION\nuniform lowp float u_vvRotationType;\n#endif\nbool isNan(float val) {\nreturn (val == NAN_MAGIC_NUMBER);\n}\n#ifdef VV_SIZE_MIN_MAX_VALUE\nfloat getVVMinMaxSize(float sizeValue, float fallback) {\nif (isNan(sizeValue)) {\nreturn fallback;\n}\nfloat interpolationRatio = (sizeValue  - u_vvSizeMinMaxValue.x) / (u_vvSizeMinMaxValue.y - u_vvSizeMinMaxValue.x);\ninterpolationRatio = clamp(interpolationRatio, 0.0, 1.0);\nreturn u_vvSizeMinMaxValue.z + interpolationRatio * (u_vvSizeMinMaxValue.w - u_vvSizeMinMaxValue.z);\n}\n#endif\n#ifdef VV_SIZE_FIELD_STOPS\nconst int VV_SIZE_N = 6;\nfloat getVVStopsSize(float sizeValue, float fallback) {\nif (isNan(sizeValue)) {\nreturn fallback;\n}\nif (sizeValue <= u_vvSizeFieldStopsValues[0]) {\nreturn u_vvSizeFieldStopsSizes[0];\n}\nfor (int i = 1; i < VV_SIZE_N; ++i) {\nif (u_vvSizeFieldStopsValues[i] >= sizeValue) {\nfloat f = (sizeValue - u_vvSizeFieldStopsValues[i-1]) / (u_vvSizeFieldStopsValues[i] - u_vvSizeFieldStopsValues[i-1]);\nreturn mix(u_vvSizeFieldStopsSizes[i-1], u_vvSizeFieldStopsSizes[i], f);\n}\n}\nreturn u_vvSizeFieldStopsSizes[VV_SIZE_N - 1];\n}\n#endif\n#ifdef VV_SIZE_UNIT_VALUE\nfloat getVVUnitValue(float sizeValue, float fallback) {\nif (isNan(sizeValue)) {\nreturn fallback;\n}\nreturn u_vvSizeUnitValueWorldToPixelsRatio * sizeValue;\n}\n#endif\n#ifdef VV_OPACITY\nconst int VV_OPACITY_N = 8;\nfloat getVVOpacity(float opacityValue) {\nif (isNan(opacityValue)) {\nreturn 1.0;\n}\nif (opacityValue <= u_vvOpacityValues[0]) {\nreturn u_vvOpacities[0];\n}\nfor (int i = 1; i < VV_OPACITY_N; ++i) {\nif (u_vvOpacityValues[i] >= opacityValue) {\nfloat f = (opacityValue - u_vvOpacityValues[i-1]) / (u_vvOpacityValues[i] - u_vvOpacityValues[i-1]);\nreturn mix(u_vvOpacities[i-1], u_vvOpacities[i], f);\n}\n}\nreturn u_vvOpacities[VV_OPACITY_N - 1];\n}\n#endif\n#ifdef VV_ROTATION\nmat4 getVVRotation(float rotationValue) {\nif (isNan(rotationValue)) {\nreturn mat4(1, 0, 0, 0,\n0, 1, 0, 0,\n0, 0, 1, 0,\n0, 0, 0, 1);\n}\nfloat rotation = rotationValue;\nif (u_vvRotationType == 1.0) {\nrotation = 90.0 - rotation;\n}\nfloat angle = C_DEG_TO_RAD * rotation;\nfloat sinA = sin(angle);\nfloat cosA = cos(angle);\nreturn mat4(cosA, sinA, 0, 0,\n-sinA,  cosA, 0, 0,\n0,     0, 1, 0,\n0,     0, 0, 1);\n}\nmat3 getVVRotationMat3(float rotationValue) {\nif (isNan(rotationValue)) {\nreturn mat3(1, 0, 0,\n0, 1, 0,\n0, 0, 1);\n}\nfloat rotation = rotationValue;\nif (u_vvRotationType == 1.0) {\nrotation = 90.0 - rotation;\n}\nfloat angle = C_DEG_TO_RAD * -rotation;\nfloat sinA = sin(angle);\nfloat cosA = cos(angle);\nreturn mat3(cosA, -sinA, 0,\nsinA, cosA, 0,\n0,    0,    1);\n}\n#endif\n#ifdef VV_COLOR\nconst int VV_COLOR_N = 8;\nvec4 getVVColor(float colorValue, vec4 fallback, float isColorLocked) {\nif (isNan(colorValue) || isColorLocked == 1.0) {\nreturn fallback;\n}\nif (colorValue <= u_vvColorValues[0]) {\nreturn u_vvColors[0];\n}\nfor (int i = 1; i < VV_COLOR_N; ++i) {\nif (u_vvColorValues[i] >= colorValue) {\nfloat f = (colorValue - u_vvColorValues[i-1]) / (u_vvColorValues[i] - u_vvColorValues[i-1]);\nreturn mix(u_vvColors[i-1], u_vvColors[i], f);\n}\n}\nreturn u_vvColors[VV_COLOR_N - 1];\n}\n#endif\nfloat getVVSize(in float size, in float vvSize)  {\n#ifdef VV_SIZE_MIN_MAX_VALUE\nreturn getVVMinMaxSize(vvSize, size);\n#elif defined(VV_SIZE_SCALE_STOPS)\nreturn u_vvSizeScaleStopsValue;\n#elif defined(VV_SIZE_FIELD_STOPS)\nfloat outSize = getVVStopsSize(vvSize, size);\nreturn isNan(outSize) ? size : outSize;\n#elif defined(VV_SIZE_UNIT_VALUE)\nreturn getVVUnitValue(vvSize, size);\n#else\nreturn size;\n#endif\n}"},overlay:{overlay:{"overlay.frag":"precision lowp float;\nuniform lowp sampler2D u_texture;\nuniform lowp float u_opacity;\nvarying mediump vec2 v_uv;\nvoid main() {\nvec4 color = texture2D(u_texture, v_uv);\ngl_FragColor = color *  u_opacity;\n}","overlay.vert":"precision mediump float;\nattribute vec2 a_pos;\nattribute vec2 a_uv;\nuniform highp mat3 u_dvsMat3;\nuniform mediump vec2 u_perspective;\nvarying mediump vec2 v_uv;\nvoid main(void) {\nv_uv = a_uv;\nfloat w = 1.0 + dot(a_uv, u_perspective);\nvec3 pos = u_dvsMat3 * vec3(a_pos, 1.0);\ngl_Position = vec4(w * pos.xy, 0.0, w);\n}"}},"post-processing":{blit:{"blit.frag":"precision mediump float;\nuniform sampler2D u_texture;\nvarying vec2 v_uv;\nvoid main() {\ngl_FragColor = texture2D(u_texture, v_uv);\n}"},bloom:{composite:{"composite.frag":"precision mediump float;\nvarying vec2 v_uv;\nuniform sampler2D u_blurTexture1;\nuniform sampler2D u_blurTexture2;\nuniform sampler2D u_blurTexture3;\nuniform sampler2D u_blurTexture4;\nuniform sampler2D u_blurTexture5;\nuniform float u_bloomStrength;\nuniform float u_bloomRadius;\nuniform float u_bloomFactors[NUMMIPS];\nuniform vec3 u_bloomTintColors[NUMMIPS];\nfloat lerpBloomFactor(const in float factor) {\nfloat mirrorFactor = 1.2 - factor;\nreturn mix(factor, mirrorFactor, u_bloomRadius);\n}\nvoid main() {\nvec4 color = u_bloomStrength * (\nlerpBloomFactor(u_bloomFactors[0]) * vec4(u_bloomTintColors[0], 1.0) * texture2D(u_blurTexture1, v_uv) +\nlerpBloomFactor(u_bloomFactors[1]) * vec4(u_bloomTintColors[1], 1.0) * texture2D(u_blurTexture2, v_uv) +\nlerpBloomFactor(u_bloomFactors[2]) * vec4(u_bloomTintColors[2], 1.0) * texture2D(u_blurTexture3, v_uv) +\nlerpBloomFactor(u_bloomFactors[3]) * vec4(u_bloomTintColors[3], 1.0) * texture2D(u_blurTexture4, v_uv) +\nlerpBloomFactor(u_bloomFactors[4]) * vec4(u_bloomTintColors[4], 1.0) * texture2D(u_blurTexture5, v_uv)\n);\ngl_FragColor = clamp(color, 0.0, 1.0);\n}"},gaussianBlur:{"gaussianBlur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nuniform vec2 u_direction;\nvarying vec2 v_uv;\n#define KERNEL_RADIUS RADIUS\n#define SIGMA RADIUS\nfloat gaussianPdf(in float x, in float sigma) {\nreturn 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\n}\nvoid main() {\nvec2 invSize = 1.0 / u_texSize;\nfloat fSigma = float(SIGMA);\nfloat weightSum = gaussianPdf(0.0, fSigma);\nvec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\nfor (int i = 1; i < KERNEL_RADIUS; i ++) {\nfloat x = float(i);\nfloat w = gaussianPdf(x, fSigma);\nvec2 uvOffset = u_direction * invSize * x;\nvec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\nvec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\npixelColorSum += (sample1 + sample2) * w;\nweightSum += 2.0 * w;\n}\ngl_FragColor = pixelColorSum /weightSum;\n}"},luminosityHighPass:{"luminosityHighPass.frag":"precision mediump float;\nuniform sampler2D u_texture;\nuniform vec3 u_defaultColor;\nuniform float u_defaultOpacity;\nuniform float u_luminosityThreshold;\nuniform float u_smoothWidth;\nvarying vec2 v_uv;\nvoid main() {\nvec4 texel = texture2D(u_texture, v_uv);\nvec3 luma = vec3(0.299, 0.587, 0.114);\nfloat v = dot(texel.xyz, luma);\nvec4 outputColor = vec4(u_defaultColor.rgb, u_defaultOpacity);\nfloat alpha = smoothstep(u_luminosityThreshold, u_luminosityThreshold + u_smoothWidth, v);\ngl_FragColor = mix(outputColor, texel, alpha);\n}"}},blur:{gaussianBlur:{"gaussianBlur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nuniform vec2 u_direction;\nuniform float u_sigma;\nvarying vec2 v_uv;\n#define KERNEL_RADIUS RADIUS\nfloat gaussianPdf(in float x, in float sigma) {\nreturn 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\n}\nvoid main() {\nvec2 invSize = 1.0 / u_texSize;\nfloat fSigma = u_sigma;\nfloat weightSum = gaussianPdf(0.0, fSigma);\nvec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\nfor (int i = 1; i < KERNEL_RADIUS; i ++) {\nfloat x = float(i);\nfloat w = gaussianPdf(x, fSigma);\nvec2 uvOffset = u_direction * invSize * x;\nvec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\nvec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\npixelColorSum += (sample1 + sample2) * w;\nweightSum += 2.0 * w;\n}\ngl_FragColor = pixelColorSum /weightSum;\n}"},"radial-blur":{"radial-blur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nconst float sampleDist = 1.0;\nconst float sampleStrength = 2.2;\nvoid main(void) {\nfloat samples[10];\nsamples[0] = -0.08;\nsamples[1] = -0.05;\nsamples[2] = -0.03;\nsamples[3] = -0.02;\nsamples[4] = -0.01;\nsamples[5] =  0.01;\nsamples[6] =  0.02;\nsamples[7] =  0.03;\nsamples[8] =  0.05;\nsamples[9] =  0.08;\nvec2 dir = 0.5 - v_uv;\nfloat dist = sqrt(dir.x * dir.x + dir.y * dir.y);\ndir = dir / dist;\nvec4 color = texture2D(u_colorTexture,v_uv);\nvec4 sum = color;\nfor (int i = 0; i < 10; i++) {\nsum += texture2D(u_colorTexture, v_uv + dir * samples[i] * sampleDist);\n}\nsum *= 1.0 / 11.0;\nfloat t = dist * sampleStrength;\nt = clamp(t, 0.0, 1.0);\ngl_FragColor = mix(color, sum, t);\n}"}},dra:{"dra.frag":"precision mediump float;\nuniform sampler2D u_minColor;\nuniform sampler2D u_maxColor;\nuniform sampler2D u_texture;\nvarying vec2 v_uv;\nvoid main() {\nvec4 minColor = texture2D(u_minColor, vec2(0.5));\nvec4 maxColor = texture2D(u_maxColor, vec2(0.5));\nvec4 color = texture2D(u_texture, v_uv);\nvec3 minColorUnpremultiply = minColor.rgb / minColor.a;\nvec3 maxColorUnpremultiply = maxColor.rgb / maxColor.a;\nvec3 colorUnpremultiply = color.rgb / color.a;\nvec3 range = maxColorUnpremultiply - minColorUnpremultiply;\ngl_FragColor = vec4(color.a * (colorUnpremultiply - minColorUnpremultiply) / range, color.a);\n}","min-max":{"min-max.frag":"#extension GL_EXT_draw_buffers : require\nprecision mediump float;\n#define CELL_SIZE 2\nuniform sampler2D u_minTexture;\nuniform sampler2D u_maxTexture;\nuniform vec2 u_srcResolution;\nuniform vec2 u_dstResolution;\nvarying vec2 v_uv;\nvoid main() {\nvec2 srcPixel = floor(gl_FragCoord.xy) * float(CELL_SIZE);\nvec2 onePixel = vec2(1.0) / u_srcResolution;\nvec2 uv = (srcPixel + 0.5) / u_srcResolution;\nvec4 minColor = vec4(1.0);\nvec4 maxColor = vec4(0.0);\nfor (int y = 0; y < CELL_SIZE; ++y) {\nfor (int x = 0; x < CELL_SIZE; ++x) {\nvec2 offset = uv + vec2(x, y) * onePixel;\nminColor = min(minColor, texture2D(u_minTexture, offset));\nmaxColor = max(maxColor, texture2D(u_maxTexture, offset));\n}\n}\ngl_FragData[0] = minColor;\ngl_FragData[1] = maxColor;\n}"}},"drop-shadow":{composite:{"composite.frag":"precision mediump float;\nuniform sampler2D u_layerFBOTexture;\nuniform sampler2D u_blurTexture;\nuniform vec4 u_shadowColor;\nuniform vec2 u_shadowOffset;\nuniform highp mat3 u_displayViewMat3;\nvarying vec2 v_uv;\nvoid main() {\nvec3 offset = u_displayViewMat3 * vec3(u_shadowOffset, 0.0);\nvec4 layerColor = texture2D(u_layerFBOTexture, v_uv);\nvec4 blurColor = texture2D(u_blurTexture, v_uv - offset.xy / 2.0);\ngl_FragColor = ((1.0 - layerColor.a) * blurColor.a * u_shadowColor + layerColor);\n}"}},"edge-detect":{"frei-chen":{"frei-chen.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nvarying vec2 v_uv;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[9];\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\nvoid main() {\nG[0] = g0,\nG[1] = g1,\nG[2] = g2,\nG[3] = g3,\nG[4] = g4,\nG[5] = g5,\nG[6] = g6,\nG[7] = g7,\nG[8] = g8;\nmat3 I;\nfloat cnv[9];\nvec3 sample;\nfor (float i = 0.0; i < 3.0; i++) {\nfor (float j = 0.0; j < 3.0; j++) {\nsample = texture2D(u_colorTexture, v_uv + texel * vec2(i - 1.0,j - 1.0)).rgb;\nI[int(i)][int(j)] = length(sample);\n}\n}\nfor (int i = 0; i < 9; i++) {\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\ncnv[i] = dp3 * dp3;\n}\nfloat M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);\nfloat S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);\ngl_FragColor = vec4(vec3(sqrt(M / S)), texture2D(u_colorTexture, v_uv).a);\n}"},sobel:{"sobel.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nuniform vec2 u_texSize;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[2];\nconst mat3 g0 = mat3( 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, -1.0, -2.0, -1.0 );\nconst mat3 g1 = mat3( 1.0, 0.0, -1.0, 2.0, 0.0, -2.0, 1.0, 0.0, -1.0 );\nvoid main() {\nmat3 I;\nfloat cnv[2];\nvec3 sample;\nG[0] = g0;\nG[1] = g1;\nfor (float i = 0.0; i < 3.0; i++) {\nfor (float j = 0.0; j < 3.0; j++) {\nsample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\nI[int(i)][int(j)] = length(sample);\n}\n}\nfor (int i = 0; i < 2; i++) {\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\ncnv[i] = dp3 * dp3;\n}\ngl_FragColor = vec4(vec3(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1])), texture2D(u_colorTexture, v_uv).a);\n}"}},"edge-enhance":{"edge-enhance.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nuniform vec2 u_texSize;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[2];\nconst mat3 g0 = mat3( 1.0, 0.0, -1.0, 1.0, 0.0, -1.0, 1.0, 0.0, -1.0 );\nconst mat3 g1 = mat3( 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0 );\nvoid main() {\nmat3 I;\nfloat cnv[2];\nvec3 sample;\nG[0] = g0;\nG[1] = g1;\nfor (float i = 0.0; i < 3.0; i++) {\nfor (float j = 0.0; j < 3.0; j++) {\nsample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\nI[int(i)][int(j)] = length(sample);\n}\n}\nfor (int i = 0; i < 2; i++) {\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\ncnv[i] = dp3 * dp3;\n}\nvec4 color = texture2D(u_colorTexture, v_uv);\ngl_FragColor = vec4(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1]) * color);\n}"},filterEffect:{"filterEffect.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform mat4 u_coefficients;\nvarying vec2 v_uv;\nvoid main() {\nvec4 color = texture2D(u_colorTexture, v_uv);\nvec4 rgbw = u_coefficients * vec4(color.a > 0.0 ? color.rgb / color.a : vec3(0.0), 1.0);\nfloat a = color.a;\ngl_FragColor = vec4(a * rgbw.rgb, a);\n}"},pp:{"pp.vert":"precision mediump float;\nattribute vec2 a_position;\nvarying vec2 v_uv;\nvoid main() {\ngl_Position = vec4(a_position, 0.0, 1.0);\nv_uv = (a_position + 1.0) / 2.0;\n}"}},raster:{bitmap:{"bitmap.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\nuniform sampler2D u_texture;\nuniform highp vec2 u_coordScale;\nuniform lowp float u_opacity;\n#include <filtering/bicubic.glsl>\nvoid main() {\n#ifdef BICUBIC\nvec4 color = sampleBicubicBSpline(u_texture, v_texcoord, u_coordScale);\n#else\nvec4 color = texture2D(u_texture, v_texcoord);\n#endif\ngl_FragColor = vec4(color.rgb * u_opacity, color.a * u_opacity);\n}","bitmap.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"},common:{"common.glsl":"uniform sampler2D u_image;\nuniform int u_bandCount;\nuniform bool u_flipY;\nuniform float u_opacity;\nuniform int u_resampling;\nuniform vec2 u_srcImageSize;\n#ifdef APPLY_PROJECTION\n#include <raster/common/projection.glsl>\n#endif\n#ifdef BICUBIC\n#include <filtering/bicubic.glsl>\n#endif\n#ifdef BILINEAR\n#include <filtering/bilinear.glsl>\n#endif\nvec2 getPixelLocation(vec2 coords) {\nvec2 targetLocation = u_flipY ? vec2(coords.s, 1.0 - coords.t) : coords;\n#ifdef APPLY_PROJECTION\ntargetLocation = projectPixelLocation(targetLocation);\n#endif\nreturn targetLocation;\n}\nbool isOutside(vec2 coords){\nif (coords.t>1.00001 ||coords.t<-0.00001 || coords.s>1.00001 ||coords.s<-0.00001) {\nreturn true;\n} else {\nreturn false;\n}\n}\nvec4 getPixel(vec2 pixelLocation) {\n#ifdef BICUBIC\nvec4 color = sampleBicubicBSpline(u_image, pixelLocation, u_srcImageSize);\n#elif defined(BILINEAR)\nvec4 color = sampleBilinear(u_image, pixelLocation, u_srcImageSize);\n#else\nvec4 color = texture2D(u_image, pixelLocation);\n#endif\nreturn color;\n}","common.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform highp float u_scale;\nuniform highp vec2 u_offset;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos * u_scale + u_offset;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}","contrastBrightness.glsl":"uniform float u_contrastOffset;\nuniform float u_brightnessOffset;\nvec4 adjustContrastBrightness(vec4 currentPixel, bool isFloat) {\nvec4 pixelValue = isFloat ? currentPixel * 255.0 : currentPixel;\nfloat maxI = 255.0;\nfloat mid = 128.0;\nfloat c = u_contrastOffset;\nfloat b = u_brightnessOffset;\nvec4 v;\nif (c > 0.0 && c < 100.0) {\nv = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) / (2.0 * (100.0 - c)) + mid;\n} else if (c <= 0.0 && c > -100.0) {\nv = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) * (100.0 + c) / 20000.0 + mid;\n} else if (c == 100.0) {\nv = (200.0 * pixelValue - 100.0 * maxI + (maxI + 1.0) * (100.0 - c) + 2.0 * maxI * b);\nv = (sign(v) + 1.0) / 2.0;\n} else if (c == -100.0) {\nv = vec4(mid, mid, mid, currentPixel.a);\n}\nreturn vec4(v.r / 255.0, v.g / 255.0, v.b / 255.0, currentPixel.a);\n}","getSurfaceValues.glsl":"#include <raster/common/mirror.glsl>\nvoid getSurfaceValues(sampler2D imageTexture, vec2 texCoord, vec2 srcImageSize, inout float values[10]) {\nvec2 onePixel = 1.0 / srcImageSize;\nvec4 va = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(-1.0, -1.0)));\nvec4 vb = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(0.0, -1.0)));\nvec4 vc = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(1.0, -1.0)));\nvec4 vd = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(-1.0, 0.0)));\nvec4 ve = texture2D(imageTexture, mirror(texCoord));\nvec4 vf = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(1.0, 0.0)));\nvec4 vg = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(-1.0, 1.0)));\nvec4 vh = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(0.0, 1.0)));\nvec4 vi = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(1.0, 1.0)));\nfloat alpha = va.a * vb.a * vc.a * vd.a * ve.a * vf.a * vg.a * vh.a * vi.a;\nvalues[0] = va.r;\nvalues[1] = vb.r;\nvalues[2] = vc.r;\nvalues[3] = vd.r;\nvalues[4] = ve.r;\nvalues[5] = vf.r;\nvalues[6] = vg.r;\nvalues[7] = vh.r;\nvalues[8] = vi.r;\nvalues[9] = alpha;\n}","inverse.glsl":"float invertValue(float value) {\nfloat s = sign(value);\nreturn (s * s) / (value + abs(s) - 1.0);\n}","mirror.glsl":"vec2 mirror(vec2 pos) {\nvec2 pos1 = abs(pos);\nreturn step(pos1, vec2(1.0, 1.0)) * pos1 + step(1.0, pos1) * (2.0 - pos1);\n}","projection.glsl":"uniform sampler2D u_transformGrid;\nuniform vec2 u_transformSpacing;\nuniform vec2 u_transformGridSize;\nuniform vec2 u_targetImageSize;\nvec2 projectPixelLocation(vec2 coords) {\n#ifdef LOOKUP_PROJECTION\nvec4 pv = texture2D(u_transformGrid, coords);\nreturn vec2(pv.r, pv.g);\n#endif\nvec2 index_image = floor(coords * u_targetImageSize);\nvec2 oneTransformPixel = vec2(0.25 / u_transformGridSize.s, 1.0 / u_transformGridSize.t);\nvec2 index_transform = floor(index_image / u_transformSpacing) / u_transformGridSize;\nvec2 pos = fract((index_image + vec2(0.5, 0.5)) / u_transformSpacing);\nvec2 srcLocation;\nvec2 transform_location = index_transform + oneTransformPixel * 0.5;\nif (pos.s <= pos.t) {\nvec4 ll_abc = texture2D(u_transformGrid, vec2(transform_location.s, transform_location.t));\nvec4 ll_def = texture2D(u_transformGrid, vec2(transform_location.s + oneTransformPixel.s, transform_location.t));\nsrcLocation.s = dot(ll_abc.rgb, vec3(pos, 1.0));\nsrcLocation.t = dot(ll_def.rgb, vec3(pos, 1.0));\n} else {\nvec4 ur_abc = texture2D(u_transformGrid, vec2(transform_location.s + 2.0 * oneTransformPixel.s, transform_location.t));\nvec4 ur_def = texture2D(u_transformGrid, vec2(transform_location.s + 3.0 * oneTransformPixel.s, transform_location.t));\nsrcLocation.s = dot(ur_abc.rgb, vec3(pos, 1.0));\nsrcLocation.t = dot(ur_def.rgb, vec3(pos, 1.0));\n}\nreturn srcLocation;\n}"},flow:{"getFadeOpacity.glsl":"uniform float u_decayRate;\nuniform float u_fadeToZero;\nfloat getFadeOpacity(float x) {\nfloat cutOff = mix(0.0, exp(-u_decayRate), u_fadeToZero);\nreturn (exp(-u_decayRate * x) - cutOff) / (1.0 - cutOff);\n}","getFragmentColor.glsl":"vec4 getFragmentColor(vec4 color, float dist, float size, float featheringSize) {\nfloat featheringStart = clamp(0.5 - featheringSize / size, 0.0, 0.5);\nif (dist > featheringStart) {\ncolor *= 1.0 - (dist - featheringStart) / (0.5 - featheringStart);\n}\nreturn color;\n}",imagery:{"imagery.frag":"precision highp float;\nvarying vec2 v_texcoord;\nuniform sampler2D u_texture;\nuniform float u_Min;\nuniform float u_Max;\nuniform float u_featheringSize;\n#include <raster/flow/vv.glsl>\nfloat getIntensity(float v) {\nreturn u_Min + v * (u_Max - u_Min);\n}\nvoid main(void) {\nvec4 sampled = texture2D(u_texture, v_texcoord);\nfloat intensity = getIntensity(sampled.r);\ngl_FragColor = getColor(intensity);\ngl_FragColor.a *= getOpacity(sampled.r);\ngl_FragColor.a *= sampled.a;\ngl_FragColor.rgb *= gl_FragColor.a;\n}","imagery.vert":"attribute vec2 a_position;\nattribute vec2 a_texcoord;\nuniform mat3 u_dvsMat3;\nvarying vec2 v_texcoord;\nvoid main(void) {\nvec2 xy = (u_dvsMat3 * vec3(a_position, 1.0)).xy;\ngl_Position = vec4(xy, 0.0, 1.0);\nv_texcoord = a_texcoord;\n}"},particles:{"particles.frag":"precision highp float;\nvarying vec4 v_color;\nvarying vec2 v_texcoord;\nvarying float v_size;\nuniform float u_featheringSize;\n#include <raster/flow/getFragmentColor.glsl>\nvoid main(void) {\ngl_FragColor = getFragmentColor(v_color, length(v_texcoord - 0.5), v_size, u_featheringSize);\n}","particles.vert":"attribute vec4 a_xyts0;\nattribute vec4 a_xyts1;\nattribute vec4 a_typeIdDurationSeed;\nattribute vec4 a_extrudeInfo;\nuniform mat3 u_dvsMat3;\nuniform mat3 u_displayViewMat3;\nuniform float u_time;\nuniform float u_trailLength;\nuniform float u_flowSpeed;\nvarying vec4 v_color;\nvarying vec2 v_texcoord;\nvarying float v_size;\nuniform float u_featheringSize;\nuniform float u_introFade;\n#include <raster/flow/vv.glsl>\n#include <raster/flow/getFadeOpacity.glsl>\nvoid main(void) {\nvec2 position0 = a_xyts0.xy;\nfloat t0 = a_xyts0.z;\nfloat speed0 = a_xyts0.w;\nvec2 position1 = a_xyts1.xy;\nfloat t1 = a_xyts1.z;\nfloat speed1 = a_xyts1.w;\nfloat type = a_typeIdDurationSeed.x;\nfloat id = a_typeIdDurationSeed.y;\nfloat duration = a_typeIdDurationSeed.z;\nfloat seed = a_typeIdDurationSeed.w;\nvec2 e0 = a_extrudeInfo.xy;\nvec2 e1 = a_extrudeInfo.zw;\nfloat animationPeriod = duration + u_trailLength;\nfloat scaledTime = u_time * u_flowSpeed;\nfloat randomizedTime = scaledTime + seed * animationPeriod;\nfloat t = mod(randomizedTime, animationPeriod);\nfloat fUnclamped = (t - t0) / (t1 - t0);\nfloat f = clamp(fUnclamped, 0.0, 1.0);\nfloat clampedTime = mix(t0, t1, f);\nfloat speed = mix(speed0, speed1, f);\nvec2 extrude;\nvec2 position;\nfloat fadeOpacity;\nfloat introOpacity;\nif (type == 2.0) {\nif (fUnclamped < 0.0 || (fUnclamped > 1.0 && t1 != duration)) {\ngl_Position = vec4(0.0, 0.0, -2.0, 1.0);\nreturn;\n}\nvec2 ortho = mix(e0, e1, f);\nvec2 parallel;\nparallel = normalize(position1 - position0) * 0.5;\nif (id == 1.0) {\nextrude = ortho;\nv_texcoord = vec2(0.5, 0.0);\n} else if (id == 2.0) {\nextrude = -ortho;\nv_texcoord = vec2(0.5, 1.0);\n} else if (id == 3.0) {\nextrude = ortho + parallel;\nv_texcoord = vec2(1.0, 0.0);\n} else if (id == 4.0) {\nextrude = -ortho + parallel;\nv_texcoord = vec2(1.0, 1.0);\n}\nfadeOpacity = getFadeOpacity((t - clampedTime) / u_trailLength);\nintroOpacity = 1.0 - exp(-clampedTime);\nv_size = getSize(speed);\nv_color = getColor(speed);\nv_color.a *= getOpacity(speed);\nposition = mix(position0, position1, f);\n} else {\nif (fUnclamped < 0.0) {\ngl_Position = vec4(0.0, 0.0, -2.0, 1.0);\nreturn;\n}\nif (id == 1.0) {\nextrude = e0;\nv_texcoord = vec2(0.5, 0.0);\nfadeOpacity = getFadeOpacity((t - t0) / u_trailLength);\nintroOpacity = 1.0 - exp(-t0);\nv_size = getSize(speed0);\nv_color = getColor(speed0);\nv_color.a *= getOpacity(speed0);\nposition = position0;\n} else if (id == 2.0) {\nextrude = -e0;\nv_texcoord = vec2(0.5, 1.0);\nfadeOpacity = getFadeOpacity((t - t0) / u_trailLength);\nintroOpacity = 1.0 - exp(-t0);\nv_size = getSize(speed0);\nv_color = getColor(speed0);\nv_color.a *= getOpacity(speed0);\nposition = position0;\n} else if (id == 3.0) {\nextrude = mix(e0, e1, f);\nv_texcoord = vec2(0.5, 0.0);\nfadeOpacity = getFadeOpacity((t - clampedTime) / u_trailLength);\nintroOpacity = 1.0 - exp(-clampedTime);\nv_size = getSize(speed);\nv_color = getColor(speed);\nv_color.a *= getOpacity(speed);\nposition = mix(position0, position1, f);\n} else if (id == 4.0) {\nextrude = -mix(e0, e1, f);\nv_texcoord = vec2(0.5, 1.0);\nfadeOpacity = getFadeOpacity((t - clampedTime) / u_trailLength);\nintroOpacity = 1.0 - exp(-clampedTime);\nv_size = getSize(speed);\nv_color = getColor(speed);\nv_color.a *= getOpacity(speed);\nposition = mix(position0, position1, f);\n}\n}\nvec2 xy = (u_dvsMat3 * vec3(position, 1.0) + u_displayViewMat3 * vec3(extrude * v_size, 0.0)).xy;\ngl_Position = vec4(xy, 0.0, 1.0);\nv_color.a *= fadeOpacity;\nv_color.a *= mix(1.0, introOpacity, u_introFade);\nv_color.rgb *= v_color.a;\n}"},streamlines:{"streamlines.frag":"precision highp float;\nvarying float v_side;\nvarying float v_time;\nvarying float v_totalTime;\nvarying float v_timeSeed;\nvarying vec4 v_color;\nvarying float v_size;\nuniform float u_time;\nuniform float u_trailLength;\nuniform float u_flowSpeed;\nuniform float u_featheringSize;\nuniform float u_introFade;\n#include <raster/flow/getFragmentColor.glsl>\n#include <raster/flow/getFadeOpacity.glsl>\nvoid main(void) {\nfloat t = mod(v_timeSeed * (v_totalTime + u_trailLength) + u_time * u_flowSpeed, v_totalTime + u_trailLength) - v_time;\nvec4 color = v_color * step(0.0, t) * getFadeOpacity(t / u_trailLength);\ncolor *= mix(1.0, 1.0 - exp(-v_time), u_introFade);\ngl_FragColor = getFragmentColor(color, length((v_side + 1.0) / 2.0 - 0.5), v_size, u_featheringSize);\n}","streamlines.vert":"attribute vec3 a_positionAndSide;\nattribute vec3 a_timeInfo;\nattribute vec2 a_extrude;\nattribute float a_speed;\nuniform mat3 u_dvsMat3;\nuniform mat3 u_displayViewMat3;\nvarying float v_time;\nvarying float v_totalTime;\nvarying float v_timeSeed;\nvarying vec4 v_color;\nvarying float v_side;\nvarying float v_size;\nuniform float u_featheringSize;\n#include <raster/flow/vv.glsl>\nvoid main(void) {\nvec4 lineColor = getColor(a_speed);\nfloat lineOpacity = getOpacity(a_speed);\nfloat lineSize = getSize(a_speed);\nvec2 position = a_positionAndSide.xy;\nv_side = a_positionAndSide.z;\nvec2 xy = (u_dvsMat3 * vec3(position, 1.0) + u_displayViewMat3 * vec3(a_extrude * lineSize, 0.0)).xy;\ngl_Position = vec4(xy, 0.0, 1.0);\nv_time = a_timeInfo.x;\nv_totalTime = a_timeInfo.y;\nv_timeSeed = a_timeInfo.z;\nv_color = lineColor;\nv_color.a *= lineOpacity;\nv_color.rgb *= v_color.a;\nv_size = lineSize;\n}"},"vv.glsl":"#define MAX_STOPS 8\n#ifdef VV_COLOR\nuniform float u_color_stops[MAX_STOPS];\nuniform vec4 u_color_values[MAX_STOPS];\nuniform int u_color_count;\n#else\nuniform vec4 u_color;\n#endif\n#ifdef VV_OPACITY\nuniform float u_opacity_stops[MAX_STOPS];\nuniform float u_opacity_values[MAX_STOPS];\nuniform int u_opacity_count;\n#else\nuniform float u_opacity;\n#endif\n#ifdef VV_SIZE\nuniform float u_size_stops[MAX_STOPS];\nuniform float u_size_values[MAX_STOPS];\nuniform int u_size_count;\n#else\nuniform float u_size;\n#endif\nuniform float u_featheringOffset;\nvec4 getColor(float x) {\n#ifdef VV_COLOR\nvec4 color = u_color_values[0];\n{\nfor (int i = 1; i < MAX_STOPS; i++) {\nif (i >= u_color_count) {\nbreak;\n}\nfloat x1 = u_color_stops[i - 1];\nif (x < x1) {\nbreak;\n}\nfloat x2 = u_color_stops[i];\nvec4 y2 = u_color_values[i];\nif (x < x2) {\nvec4 y1 = u_color_values[i - 1];\ncolor = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\n} else {\ncolor = y2;\n}\n}\n}\n#else\nvec4 color = u_color;\n#endif\nreturn color;\n}\nfloat getOpacity(float x) {\n#ifdef VV_OPACITY\nfloat opacity = u_opacity_values[0];\n{\nfor (int i = 1; i < MAX_STOPS; i++) {\nif (i >= u_opacity_count) {\nbreak;\n}\nfloat x1 = u_opacity_stops[i - 1];\nif (x < x1) {\nbreak;\n}\nfloat x2 = u_opacity_stops[i];\nfloat y2 = u_opacity_values[i];\nif (x < x2) {\nfloat y1 = u_opacity_values[i - 1];\nopacity = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\n} else {\nopacity = y2;\n}\n}\n}\n#else\nfloat opacity = u_opacity;\n#endif\nreturn opacity;\n}\nfloat getSize(float x) {\n#ifdef VV_SIZE\nfloat size = u_size_values[0];\n{\nfor (int i = 1; i < MAX_STOPS; i++) {\nif (i >= u_size_count) {\nbreak;\n}\nfloat x1 = u_size_stops[i - 1];\nif (x < x1) {\nbreak;\n}\nfloat x2 = u_size_stops[i];\nfloat y2 = u_size_values[i];\nif (x < x2) {\nfloat y1 = u_size_values[i - 1];\nsize = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\n} else {\nsize = y2;\n}\n}\n}\n#else\nfloat size = u_size;\n#endif\nreturn size + 2.0 * u_featheringSize * u_featheringOffset;\n}"},hillshade:{"hillshade.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\nuniform int u_hillshadeType;\nuniform float u_sinZcosAs[6];\nuniform float u_sinZsinAs[6];\nuniform float u_cosZs[6];\nuniform float u_weights[6];\nuniform vec2 u_factor;\nuniform float u_minValue;\nuniform float u_maxValue;\n#include <raster/lut/colorize.glsl>\n#include <raster/common/getSurfaceValues.glsl>\nvec3 rgb2hsv(vec3 c) {\nvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\nvec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\nvec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\nfloat d = q.x - min(q.w, q.y);\nfloat e = 1.0e-10;\nreturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\n}\nvec3 hsv2rgb(vec3 c) {\nvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\nreturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec4 overlay(float val, float minValue, float maxValue, float hillshade) {\nval = clamp((val - minValue) / (maxValue - minValue), 0.0, 1.0);\nvec4 rgb = colorize(vec4(val, val, val, 1.0), 255.0);\nvec3 hsv = rgb2hsv(rgb.xyz);\nhsv.z = hillshade;\nreturn vec4(hsv2rgb(hsv), 1.0) * rgb.a;\n}\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\nif (currentPixel.a == 0.0) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nfloat pv[10];\ngetSurfaceValues(u_image, pixelLocation, u_srcImageSize, pv);\nfloat alpha = pv[9];\nfloat dzx = (pv[2] + 2.0 * pv[5] + pv[8] - pv[0] - 2.0 * pv[3] - pv[6]) * u_factor.s;\nfloat dzy = (pv[6] + 2.0 * pv[7] + pv[8] - pv[0] - 2.0 * pv[1] - pv[2]) * u_factor.t;\nfloat dzd = sqrt(1.0 + dzx * dzx + dzy * dzy);\nfloat hillshade = 0.0;\nif (u_hillshadeType == 0){\nfloat cosDelta = u_sinZsinAs[0] * dzy - u_sinZcosAs[0] * dzx;\nfloat z = (u_cosZs[0] + cosDelta) / dzd;\nif (z < 0.0)  z = 0.0;\nhillshade = z;\n} else {\nfor (int k = 0; k < 6; k++) {\nfloat cosDelta = u_sinZsinAs[k] * dzy - u_sinZcosAs[k] * dzx;\nfloat z = (u_cosZs[k] + cosDelta) / dzd;\nif (z < 0.0) z = 0.0;\nhillshade = hillshade + z * u_weights[k];\nif (k == 5) break;\n}\n}\n#ifdef APPLY_COLORMAP\ngl_FragColor = overlay(pv[4], u_minValue, u_maxValue, hillshade) * alpha * u_opacity;\n#else\ngl_FragColor = vec4(hillshade, hillshade, hillshade, 1.0) * alpha * u_opacity;\n#endif\n}"},lut:{"colorize.glsl":"uniform sampler2D u_colormap;\nuniform float u_colormapOffset;\nuniform float u_colormapMaxIndex;\nvec4 colorize(vec4 currentPixel, float scaleFactor) {\nfloat clrIndex = clamp(currentPixel.r * scaleFactor - u_colormapOffset, 0.0, u_colormapMaxIndex);\nvec2 clrPosition = vec2((clrIndex + 0.5) / (u_colormapMaxIndex + 1.0), 0.0);\nvec4 color = texture2D(u_colormap, clrPosition);\nvec4 result = vec4(color.rgb, color.a * currentPixel.a);\nreturn result;\n}","lut.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\n#include <raster/lut/colorize.glsl>\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\nvec4 result = colorize(currentPixel, 1.0);\ngl_FragColor = vec4(result.xyz, 1.0) * result.a * u_opacity;\n}"},magdir:{"magdir.frag":"precision mediump float;\nvarying vec4 v_color;\nuniform lowp float u_opacity;\nvoid main() {\ngl_FragColor = v_color * u_opacity;\n}","magdir.vert":"precision mediump float;\nattribute vec2 a_pos;\nattribute vec2 a_offset;\nattribute vec2 a_vv;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform vec2 u_symbolSize;\nuniform vec2 u_symbolPercentRange;\nuniform vec2 u_dataRange;\nuniform float u_rotation;\nuniform vec4 u_colors[12];\nvarying vec4 v_color;\nvoid main()\n{\nfloat angle = a_offset.y + u_rotation;\n#ifndef ROTATION_GEOGRAPHIC\nangle = 3.14159265359 * 2.0 - angle - 3.14159265359 / 2.0;\n#endif\nvec2 offset = vec2(cos(angle), sin(angle)) * a_offset.x;\n#ifdef DATA_RANGE\nfloat valuePercentage = clamp((a_vv.y - u_dataRange.x) / (u_dataRange.y - u_dataRange.x), 0.0, 1.0);\nfloat sizeRatio = u_symbolPercentRange.x + valuePercentage * (u_symbolPercentRange.y - u_symbolPercentRange.x);\nfloat sizePercentage = clamp(sizeRatio, u_symbolPercentRange.x, u_symbolPercentRange.y);\n#else\nfloat sizePercentage = (u_symbolPercentRange.x + u_symbolPercentRange.y) / 2.0;\n#endif\nvec2 pos = a_pos + offset * sizePercentage * u_symbolSize;\nv_color = u_colors[int(a_vv.x)];\ngl_Position = vec4(u_dvsMat3 * vec3(pos * u_coordScale, 1.0), 1.0);\n}"},reproject:{"reproject.frag":"precision mediump float;\nvarying vec2 v_texcoord;\n#include <raster/common/common.glsl>\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\ngl_FragColor = vec4(currentPixel.rgb, 1.0) * currentPixel.a * u_opacity;\n}","reproject.vert":"precision mediump float;\nattribute vec2 a_position;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_position;\ngl_Position = vec4(2.0 * (a_position - 0.5), 0.0, 1.0);\n}"},rfx:{aspect:{"aspect.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform vec2 u_cellSize;\nuniform vec2 u_srcImageSize;\n#include <raster/common/getSurfaceValues.glsl>\nconst float pi = 3.14159265359;\nvoid main() {\nfloat pv[10];\ngetSurfaceValues(u_image, v_texcoord, u_srcImageSize, pv);\nfloat alpha = pv[9];\nfloat dzx = (pv[2] + 2.0 * pv[5] + pv[8] - pv[0] - 2.0 * pv[3] - pv[6]) / (8.0 * u_cellSize[0]);\nfloat dzy = -(pv[6] + 2.0 * pv[7] + pv[8] - pv[0] - 2.0 * pv[1] - pv[2]) / (8.0 * u_cellSize[1]);\nalpha *= sign(abs(dzx) + abs(dzy));\nfloat aspect_rad = (dzx == 0.0) ? (step(0.0, dzy) * 0.5 * pi + step(dzy, 0.0) * 1.5 * pi) : mod((2.5 * pi + atan(dzy, -dzx)), 2.0 * pi);\nfloat aspect = aspect_rad * 180.0 / pi;\ngl_FragColor = vec4(aspect, aspect, aspect, 1.0) * alpha;\n}"},bandarithmetic:{"bandarithmetic.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform mediump mat3 u_bandIndexMat3;\nuniform float u_adjustments[3];\n#include <raster/common/inverse.glsl>\nvoid main() {\nvec4 pv = texture2D(u_image, v_texcoord);\nvec3 pv2 = u_bandIndexMat3 * pv.rgb;\nfloat nir = pv2.r;\nfloat red = pv2.g;\nfloat index;\n#ifdef NDXI\nindex = (nir - red) * invertValue(nir + red);\n#elif defined(SR)\nindex = nir * invertValue(red);\n#elif defined(CI)\nindex = nir * invertValue(red) - 1.0;\n#elif defined(SAVI)\nindex = (nir - red) * invertValue(nir + red + u_adjustments[0]) * (1.0 + u_adjustments[0]);\n#elif defined(TSAVI)\nfloat s = u_adjustments[0];\nfloat a = u_adjustments[1];\nfloat x = u_adjustments[2];\nfloat y = -a * s + x * (1.0 + s * s);\nindex = (s * (nir - s * red - a)) * invertValue(a * nir + red + y);\n#elif defined(MAVI)\nindex = 0.5 * (2.0 * (nir + 1.0) - sqrt(pow((2.0 * nir + 1.0), 2.0) - 8.0 * (nir - red)));\n#elif defined(GEMI)\nfloat eta = (2.0 * (nir * nir - red * red) + 1.5 * nir + 0.5 * red) * invertValue(nir + red + 0.5);\nindex = eta * (1.0 - 0.25 * eta) - (red - 0.125) * invertValue(1.0 - red);\n#elif defined(PVI)\nfloat a = u_adjustments[0];\nfloat b = u_adjustments[1];\nfloat y = sqrt(1.0 + a * a);\nindex = (nir - a * red - b) * invertValue(y);\n#elif defined(VARI)\nindex = (pv2.g - pv2.r) * invertValue(pv2.g + pv2.r - pv2.b);\n#elif defined(MTVI2)\nfloat green = pv2.b;\nfloat v = pow(sqrt((2.0 * nir + 1.0), 2.0) - 6.0 * nir - 5.0 * sqrt(red) - 0.5);\nindex = 1.5 * (1.2 * (nir - green) - 2.5 * (red - green)) * v;\n#elif defined(RTVICORE)\nfloat green = pv2.b;\nindex = 100.0 * (nir - red) - 10.0 * (nir - green);\n#elif defined(EVI)\nfloat blue = pv2.b;\nfloat denom = nir + 6.0 * red - 7.5 * blue + 1.0;\nindex =  (2.5 * (nir - red)) * invertValue(denom);\n#elif defined(WNDWI)\nfloat g = pv2.r;\nfloat n = pv2.g;\nfloat s = pv2.s;\nfloat a = u_adjustments[0];\nfloat denom = g + a * n + (1.0 - a) * s;\nindex = (g - a * n - (1 - a) * s) * invertValue(denom);\n#elif defined(BAI)\nindex = invertValue(pow((0.1 - red), 2.0) + pow((0.06 - nir), 2.0));\n#else\ngl_FragColor = pv;\nreturn;\n#endif\ngl_FragColor = vec4(index, index, index, pv.a);\n}"},compositeband:{"compositeband.frag":"precision mediump float;\nuniform sampler2D u_image;\nuniform sampler2D u_image1;\nuniform sampler2D u_image2;\nvarying vec2 v_texcoord;\nvoid main() {\nvec4 p0 = texture2D(u_image, v_texcoord);\nvec4 p1 = texture2D(u_image1, v_texcoord);\nvec4 p2 = texture2D(u_image2, v_texcoord);\ngl_FragColor = vec4(p0.r, p1.r, p2.r, p0.a * p1.a * p2.a);\n}"},convolution:{"convolution.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform vec2 u_srcImageSize;\n#define KERNEL_SIZE_ROWS ROWS\n#define KERNEL_SIZE_COLS COLS\nuniform vec2 u_clampRange;\nuniform float u_kernel[25];\n#include <raster/common/mirror.glsl>\nvoid main() {\nvec3 rgb = vec3(0.0, 0.0, 0.0);\nvec2 resolution = 1.0 / u_srcImageSize;\nfloat rowOffset = -float(floor(float(KERNEL_SIZE_ROWS) / 2.0));\nfloat colOffset = -float(floor(float(KERNEL_SIZE_COLS) / 2.0));\nfloat alpha = 1.0;\nfor (int row = 0; row < KERNEL_SIZE_ROWS; row++) {\nfloat pos_row = rowOffset + float(row);\nfor (int col = 0; col < KERNEL_SIZE_COLS; col++) {\nvec2 pos = v_texcoord + vec2(colOffset + float(col), pos_row) * resolution;\nvec4 pv = texture2D(u_image, mirror(pos));\nrgb += pv.rgb * u_kernel[row * KERNEL_SIZE_COLS + col];\nalpha *= pv.a;\n}\n}\nrgb = clamp(rgb, u_clampRange.s, u_clampRange.t);\ngl_FragColor = vec4(rgb * alpha, alpha);\n}"},curvature:{"curvature.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform float u_zlFactor;\nuniform vec2 u_srcImageSize;\n#include <raster/common/getSurfaceValues.glsl>\nvoid main() {\nfloat pv[10];\ngetSurfaceValues(u_image, v_texcoord, u_srcImageSize, pv);\nfloat alpha = pv[9];\nfloat d = ((pv[3] + pv[5]) * 0.5 - pv[4]);\nfloat e = ((pv[1] + pv[7]) * 0.5 - pv[4]);\nfloat curvature = 0.0;\n#ifdef STANDARD\ncurvature = -u_zlFactor * (d + e);\ngl_FragColor = vec4(curvature, curvature, curvature, alpha);\n#else\nfloat f = (-pv[0] + pv[2] + pv[6] - pv[8]) / 4.0;\nfloat g = (-pv[3] + pv[5]) / 2.0;\nfloat h = (pv[1] - pv[7]) / 2.0;\nfloat g2 = g * g;\nfloat h2 = h * h;\n#ifdef PROFILE\ncurvature = (u_zlFactor * (d * g2 + e * h2 + f * g * h)) / (g2 + h2);\n#else\ncurvature = (-u_zlFactor * (d * h2 + e * g2 - f * g * h)) / (g2 + h2);\n#endif\n#endif\ngl_FragColor = vec4(curvature, curvature, curvature, alpha);\n}"},extractband:{"extractband.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform mediump mat3 u_bandIndexMat3;\nvoid main() {\nvec4 pv = texture2D(u_image, v_texcoord);\nvec3 pv2 = u_bandIndexMat3 * pv.rgb;\ngl_FragColor = vec4(pv2, pv.a);\n}"},local:{"local.frag":"precision mediump float;\nuniform sampler2D u_image;\nuniform sampler2D u_image1;\n#ifdef ONE_CONSTANT\nuniform float u_image1Const;\n#ifdef TWO_CONSTANT\nuniform float u_image2Const;\n#endif\nuniform mat3 u_imageSwap;\n#endif\nvarying vec2 v_texcoord;\nuniform vec2 u_domainRange;\n#include <raster/common/inverse.glsl>\nvoid main() {\nvec4 pv0 = texture2D(u_image, v_texcoord);\nfloat a = pv0.r;\n#ifdef TWO_IMAGES\n#ifdef ONE_CONSTANT\nfloat b = u_image1Const;\nvec3 abc = u_imageSwap * vec3(a, b, 0);\na = abc.s;\nb = abc.t;\n#else\nvec4 pv1 = texture2D(u_image1, v_texcoord);\nfloat b = pv1.r;\n#endif\n#elif defined(CONDITIONAL)\n#ifdef TWO_CONSTANT\nfloat b = u_image1Const;\nfloat c = u_image2Const;\nvec3 abc = u_imageSwap * vec3(a, b, c);\na = abc.s;\nb = abc.t;\nc = abc.p;\n#elif defined(ONE_CONSTANT)\nvec4 pv1 = texture2D(u_image1, v_texcoord);\nfloat b = pv1.r;\nfloat c = u_image1Const;\nvec3 abc = u_imageSwap * vec3(a, b, c);\na = abc.s;\nb = abc.t;\nc = abc.p;\n#else\nvec4 pv1 = texture2D(u_image1, v_texcoord);\nvec4 pv2 = texture2D(u_image2, v_texcoord);\nfloat b = pv1.r;\nfloat c = pv2.r;\n#endif\n#endif\nfloat result = a;\nfloat alpha = pv0.a;\n#ifdef PLUS\nresult = a + b;\n#elif defined(MINUS)\nresult = a - b;\n#elif defined(TIMES)\nresult = a * b;\n#elif defined(DIVIDE)\nresult = a * invertValue(b);\nalpha *= float(abs(sign(b)));\n#elif defined(FLOATDIVIDE)\nresult = a * invertValue(b);\nalpha *= float(abs(sign(b)));\n#elif defined(FLOORDIVIDE)\nresult = floor(a * invertValue(b));\nalpha *= float(abs(sign(b)));\n#elif defined(SQUARE)\nresult = a * a;\n#elif defined(SQRT)\nresult = sqrt(a);\n#elif defined(POWER)\nresult = pow(a, b);\n#elif defined(LN)\nresult = a <= 0.0 ? 0.0: log(a);\nalpha *= float(a > 0.0);\n#elif defined(LOG_1_0)\nresult = a <= 0.0 ? 0.0: log2(a) * invertValue(log2(10.0));\nalpha *= float(a > 0.0);\n#elif defined(LOG_2)\nresult = a <= 0.0 ? 0.0: log2(a);\nalpha *= float(a > 0.0);\n#elif defined(EXP)\nresult = exp(a);\n#elif defined(EXP_1_0)\nresult = pow(10.0, a);\n#elif defined(EXP_2)\nresult = pow(2.0, a);\n#elif defined(ROUNDDOWN)\nresult = floor(a);\n#elif defined(ROUNDUP)\nresult = ceil(a);\n#elif defined(INT)\nresult = float(sign(a)) * floor(abs(a));\n#elif defined(MOD)\nresult = mod(a, b);\n#elif defined(NEGATE)\nresult = -a;\n#elif defined(ABS)\nresult = abs(a);\n#elif defined(ACOS)\nresult = abs(a) > 1.0 ? 0.0: acos(a);\nalpha *= step(abs(a), 1.00001);\n#elif defined(ACOSH)\nresult = acosh(a);\n#elif defined(POLYFILLACOSH)\nresult = log(a + sqrt(a * a - 1.0));\n#elif defined(ASIN)\nresult = abs(a) > 1.0 ? 0.0: asin(a);\nalpha *= step(abs(a), 1.00001);\n#elif defined(ASINH)\nresult = asinh(a);\n#elif defined(POLYFILLASINH)\nresult = log(a + sqrt(a * a + 1.0));\n#elif defined(ATAN)\nresult = atan(a);\n#elif defined(ATANH)\nresult = abs(a) > 1.0 ? 0.0: atanh(a);\nalpha *= step(abs(a), 1.0);\n#elif defined(POLYFILLATANH)\nresult = a == 1.0 ? 0.0 : 0.5 * log((1.0 + a)/(1.0 -a));\n#elif defined(ATAN_2)\nresult = atan(a, b);\n#elif defined(COS)\nresult = cos(a);\n#elif defined(COSH)\nresult = cosh(a);\n#elif defined(POLYFILLCOSH)\nfloat halfexp = exp(a) / 2.0;\nresult = halfexp + 1.0 / halfexp;\n#elif defined(SIN)\nresult = sin(a);\n#elif defined(SINH)\nresult = sinh(a);\n#elif defined(POLYFILLSINH)\nfloat halfexp = exp(a) / 2.0;\nresult = halfexp - 1.0 / halfexp;\n#elif defined(TAN)\nresult = tan(a);\n#elif defined(TANH)\nresult = tanh(a);\n#elif defined(POLYFILLTANH)\nfloat expx = exp(a);\nresult = (expx - 1.0 / expx) / (expx + 1.0 / expx);\n#elif defined(BITWISEAND)\nresult = a & b;\n#elif defined(BITWISEOR)\nresult = a | b;\n#elif defined(BITWISELEFTSHIFT)\nresult = a << b;\n#elif defined(BITWISERIGHTSHIFT)\nresult = a >> b;\n#elif defined(BITWISENOT)\nresult = ~a;\n#elif defined(BITWISEXOR)\nresult = a ^ b;\n#elif defined(BOOLEANAND)\nresult = float((a != 0.0) && (b != 0.0));\n#elif defined(BOOLEANNOT)\nresult = float(a == 0.0);\n#elif defined(BOOLEANOR)\nresult = float((a != 0.0) || (b != 0.0));\n#elif defined(BOOLEANXOR)\nresult = float((a != 0.0) ^^ (b != 0.0));\n#elif defined(GREATERTHAN)\nresult = float(a > b);\n#elif defined(GREATERTHANEQUAL)\nresult = float(a >= b);\n#elif defined(LESSTHAN)\nresult = float(a < b);\n#elif defined(LESSTHANEQUAL)\nresult = float(a <= b);\n#elif defined(EQUALTO)\nresult = float(a == b);\n#elif defined(NOTEQUAL)\nresult = float(a != b);\n#elif defined(ISNULL)\nresult = float(alpha == 0.0);\nalpha = 1.0;\n#elif defined(SETNULL)\nfloat maskValue = float(a == 0.0);\nresult = maskValue * b;\nalpha *= maskValue;\n#elif defined(CONDITIONAL)\nfloat weight = float(abs(sign(a)));\nresult = weight * b + (1.0 - weight) * c;\n#endif\nbool isInvalid = result < u_domainRange.s || result > u_domainRange.t;\nresult = isInvalid ? 0.0 : result;\nalpha *= float(!isInvalid);\n#ifdef ROUND_OUTPUT\nresult = floor(result + 0.5);\n#endif\ngl_FragColor = vec4(result, result, result, alpha);\n}"},mask:{"mask.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\n#define LEN_INCLUDED_RANGES 6\n#define LEN_NODATA_VALUES 6\nuniform highp float u_includedRanges[6];\nuniform highp float u_noDataValues[6];\nfloat maskFactor(float bandValue, float fromValue, float to) {\nfloat factor = 1.0;\nfor (int i = 0; i < LEN_NODATA_VALUES; i++) {\nfactor *= float(u_noDataValues[i] != bandValue);\n}\nfactor *= step(fromValue, bandValue) * step(bandValue, to);\nreturn factor;\n}\nvoid main() {\nvec4 pv = texture2D(u_image, v_texcoord);\nfloat redFactor = maskFactor(pv.r, u_includedRanges[0], u_includedRanges[1]);\n#ifdef MULTI_BAND\nfloat greenFactor = maskFactor(pv.g, u_includedRanges[2], u_includedRanges[3]);\nfloat blueFactor = maskFactor(pv.b, u_includedRanges[4], u_includedRanges[5]);\nfloat maskFactor = redFactor * greenFactor * blueFactor;\ngl_FragColor = pv * maskFactor;\n#else\ngl_FragColor = pv * redFactor;\n#endif\n}"},ndvi:{"ndvi.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform mediump mat3 u_bandIndexMat3;\n#include <raster/common/inverse.glsl>\nvoid main() {\nvec4 pv = texture2D(u_image, v_texcoord);\nvec3 pv2 = u_bandIndexMat3 * pv.rgb;\nfloat nir = pv2.r;\nfloat red = pv2.g;\nfloat index = (nir - red) * invertValue(nir + red);\n#ifdef SCALED\nindex = floor((index + 1.0) * 100.0 + 0.5);\n#endif\ngl_FragColor = vec4(index, index, index, pv.a);\n}"},remap:{"remap.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\n#define LEN_REMAP_RANGES 18\n#define LEN_NODATA_RANGES 12\nuniform highp float u_rangeMaps[18];\nuniform highp float u_noDataRanges[12];\nuniform highp float u_unmatchMask;\nuniform vec2 u_clampRange;\nvoid main() {\nvec4 pv = texture2D(u_image, v_texcoord);\nfloat factor = 1.0;\nfloat bandValue = pv.r;\nfor (int i = 0; i < LEN_NODATA_RANGES; i+=2) {\nfloat inside = 1.0 - step(u_noDataRanges[i], bandValue) * step(bandValue, u_noDataRanges[i+1]);\nfactor *= inside;\n}\nfloat mapValue = 0.0;\nfloat includeMask = 0.0;\nfor (int i = 0; i < LEN_REMAP_RANGES; i+=3) {\nfloat stepMask = step(u_rangeMaps[i], bandValue) * step(bandValue, u_rangeMaps[i+1]);\nincludeMask = (1.0 - stepMask) * includeMask + stepMask;\nmapValue = (1.0 - stepMask) * mapValue + stepMask * u_rangeMaps[i+2];\n}\nbandValue = factor * (mapValue + (1.0 - includeMask) * u_unmatchMask * pv.r);\nfloat bandMask = factor * max(u_unmatchMask, includeMask);\nbandValue = clamp(bandValue, u_clampRange.s, u_clampRange.t);\ngl_FragColor = vec4(bandValue, bandValue, bandValue, bandMask * pv.a);\n}"},slope:{"slope.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform vec2 u_cellSize;\nuniform float u_zFactor;\nuniform vec2 u_srcImageSize;\nuniform float u_pixelSizePower;\nuniform float u_pixelSizeFactor;\n#include <raster/common/getSurfaceValues.glsl>\nvoid main() {\nfloat pv[10];\ngetSurfaceValues(u_image, v_texcoord, u_srcImageSize, pv);\nfloat alpha = pv[9];\nfloat xf = (u_zFactor + pow(u_cellSize[0], u_pixelSizePower) * u_pixelSizeFactor) / (8.0 * u_cellSize[0]);\nfloat yf = (u_zFactor + pow(u_cellSize[1], u_pixelSizePower) * u_pixelSizeFactor) / (8.0 * u_cellSize[1]);\nfloat dzx = (pv[2] + 2.0 * pv[5] + pv[8] - pv[0] - 2.0 * pv[3] - pv[6]) * xf;\nfloat dzy = -(pv[6] + 2.0 * pv[7] + pv[8] - pv[0] - 2.0 * pv[1] - pv[2]) * yf;\nfloat rise2run = sqrt(dzx * dzx + dzy * dzy);\n#ifdef PERCENT_RISE\nfloat percentRise = rise2run * 100.0;\ngl_FragColor = vec4(percentRise, percentRise, percentRise, alpha);\n#else\nfloat degree = atan(rise2run) * 57.2957795;\ngl_FragColor = vec4(degree, degree, degree, alpha);\n#endif\n}"},stretch:{"stretch.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying highp vec2 v_texcoord;\nuniform float u_minCutOff[3];\nuniform float u_maxCutOff[3];\nuniform float u_minOutput;\nuniform float u_maxOutput;\nuniform float u_factor[3];\nuniform float u_gamma[3];\nuniform float u_gammaCorrection[3];\nfloat stretchOneValue(float val, float minCutOff, float maxCutOff, float minOutput, float maxOutput, float factor, float gamma, float gammaCorrection) {\nval = clamp(val, minCutOff, maxCutOff);\nfloat stretchedVal;\n#ifdef USE_GAMMA\nfloat tempf = 1.0;\nfloat outRange = maxOutput - minOutput;\nfloat relativeVal = (val - minCutOff) / (maxCutOff - minCutOff);\ntempf -= step(1.0, gamma) * sign(gamma - 1.0) * pow(1.0 / outRange, relativeVal * gammaCorrection);\nstretchedVal = tempf * outRange * pow(relativeVal, 1.0 / gamma) + minOutput;\nstretchedVal = clamp(stretchedVal, minOutput, maxOutput);\n#else\nstretchedVal = minOutput + (val - minCutOff) * factor;\n#endif\n#ifdef ROUND_OUTPUT\nstretchedVal = floor(stretchedVal + 0.5);\n#endif\nreturn stretchedVal;\n}\nvoid main() {\nvec4 currentPixel = texture2D(u_image, v_texcoord);\nfloat redVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_gamma[0], u_gammaCorrection[0]);\n#ifdef MULTI_BAND\nfloat greenVal = stretchOneValue(currentPixel.g, u_minCutOff[1], u_maxCutOff[1], u_minOutput, u_maxOutput, u_factor[1], u_gamma[1], u_gammaCorrection[1]);\nfloat blueVal = stretchOneValue(currentPixel.b, u_minCutOff[2], u_maxCutOff[2], u_minOutput, u_maxOutput, u_factor[2], u_gamma[2], u_gammaCorrection[2]);\ngl_FragColor = vec4(redVal, greenVal, blueVal, currentPixel.a);\n#else\ngl_FragColor = vec4(redVal, redVal, redVal, currentPixel.a);\n#endif\n}"},vs:{"vs.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"}},scalar:{"scalar.frag":"precision mediump float;\nuniform lowp float u_opacity;\nvarying vec2 v_pos;\nconst vec4 outlineColor = vec4(0.2, 0.2, 0.2, 1.0);\nconst float outlineSize = 0.02;\nconst float innerRadius = 0.25;\nconst float outerRadius = 0.42;\nconst float innerSquareLength = 0.15;\nvoid main() {\nmediump float dist = length(v_pos);\nmediump float fillalpha1 = smoothstep(outerRadius, outerRadius + outlineSize, dist);\nfillalpha1 *= (1.0-smoothstep(outerRadius + outlineSize, outerRadius + 0.1 + outlineSize, dist));\n#ifdef INNER_CIRCLE\nmediump float fillalpha2 = smoothstep(innerRadius, innerRadius + outlineSize, dist);\nfillalpha2 *= (1.0-smoothstep(innerRadius + outlineSize, innerRadius + 0.1 + outlineSize, dist));\n#else\nmediump float fillalpha2 = (abs(v_pos.x) < innerSquareLength ? 1.0 : 0.0) * (abs(v_pos.y) < innerSquareLength ? 1.0 : 0.0);\n#endif\ngl_FragColor = (fillalpha2 + fillalpha1) * outlineColor * u_opacity;\n}","scalar.vert":"precision mediump float;\nattribute vec2 a_pos;\nattribute vec2 a_offset;\nattribute vec2 a_vv;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform vec2 u_symbolSize;\nuniform vec2 u_symbolPercentRange;\nuniform vec2 u_dataRange;\nvarying vec2 v_pos;\nvoid main()\n{\n#ifdef DATA_RANGE\nfloat valuePercentage = clamp((a_vv.y - u_dataRange.x) / (u_dataRange.y - u_dataRange.x), 0.0, 1.0);\nfloat sizeRatio = u_symbolPercentRange.x + valuePercentage * (u_symbolPercentRange.y - u_symbolPercentRange.x);\nfloat sizePercentage = clamp(sizeRatio, u_symbolPercentRange.x, u_symbolPercentRange.y);\n#else\nfloat sizePercentage = (u_symbolPercentRange.x + u_symbolPercentRange.y) / 2.0;\n#endif\nvec2 size = u_symbolSize * sizePercentage;\nvec2 pos = a_pos + a_offset * size;\nv_pos = a_offset;\ngl_Position = vec4(u_dvsMat3 * vec3(pos * u_coordScale, 1.0), 1.0);\n}"},stretch:{"stretch.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\nuniform float u_minCutOff[3];\nuniform float u_maxCutOff[3];\nuniform float u_minOutput;\nuniform float u_maxOutput;\nuniform float u_factor[3];\nuniform bool u_useGamma;\nuniform float u_gamma[3];\nuniform float u_gammaCorrection[3];\n#include <raster/lut/colorize.glsl>\nfloat stretchOneValue(float val, float minCutOff, float maxCutOff, float minOutput, float maxOutput, float factor, bool useGamma, float gamma, float gammaCorrection) {\nif (val >= maxCutOff) {\nreturn maxOutput;\n} else if (val <= minCutOff) {\nreturn minOutput;\n}\nfloat stretchedVal;\nif (useGamma) {\nfloat tempf = 1.0;\nfloat outRange = maxOutput - minOutput;\nfloat relativeVal = (val - minCutOff) / (maxCutOff - minCutOff);\nif (gamma > 1.0) {\ntempf -= pow(1.0 / outRange, relativeVal * gammaCorrection);\n}\nstretchedVal = (tempf * outRange * pow(relativeVal, 1.0 / gamma) + minOutput) / 255.0;\n} else {\nstretchedVal = minOutput + (val - minCutOff) * factor;\n}\nreturn stretchedVal;\n}\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\n#ifdef NOOP\ngl_FragColor = vec4(currentPixel.rgb, 1.0) * currentPixel.a * u_opacity;\nreturn;\n#endif\nif (u_bandCount == 1) {\nfloat grayVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\n#ifdef APPLY_COLORMAP\nvec4 result = colorize(vec4(grayVal, grayVal, grayVal, 1.0), u_useGamma ? 255.0 : 1.0);\ngl_FragColor = vec4(result.xyz, 1.0) * result.a * currentPixel.a * u_opacity;\n#else\ngl_FragColor = vec4(grayVal, grayVal, grayVal, 1.0) * currentPixel.a * u_opacity;\n#endif\n} else {\nfloat redVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\nfloat greenVal = stretchOneValue(currentPixel.g, u_minCutOff[1], u_maxCutOff[1], u_minOutput, u_maxOutput, u_factor[1], u_useGamma, u_gamma[1], u_gammaCorrection[1]);\nfloat blueVal = stretchOneValue(currentPixel.b, u_minCutOff[2], u_maxCutOff[2], u_minOutput, u_maxOutput, u_factor[2], u_useGamma, u_gamma[2], u_gammaCorrection[2]);\ngl_FragColor = vec4(redVal, greenVal, blueVal, 1.0) * currentPixel.a * u_opacity;\n}\n}"}},stencil:{"stencil.frag":"void main() {\ngl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n}","stencil.vert":"attribute vec2 a_pos;\nuniform mat3 u_worldExtent;\nvoid main() {\ngl_Position = vec4(u_worldExtent * vec3(a_pos, 1.0), 1.0);\n}"},tileInfo:{"tileInfo.frag":"uniform mediump sampler2D u_texture;\nvarying mediump vec2 v_tex;\nvoid main(void) {\nlowp vec4 color = texture2D(u_texture, v_tex);\ngl_FragColor = 0.75 * color;\n}","tileInfo.vert":"attribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform mediump float u_depth;\nuniform mediump vec2 u_coord_ratio;\nuniform mediump vec2 u_delta;\nuniform mediump vec2 u_dimensions;\nvarying mediump vec2 v_tex;\nvoid main() {\nmediump vec2 offset = u_coord_ratio * vec2(u_delta + a_pos * u_dimensions);\nvec3 v_pos = u_dvsMat3 * vec3(offset, 1.0);\ngl_Position = vec4(v_pos.xy, 0.0, 1.0);\nv_tex = a_pos;\n}"},util:{"atan2.glsl":"float atan2(in float y, in float x) {\nfloat t0, t1, t2, t3, t4;\nt3 = abs(x);\nt1 = abs(y);\nt0 = max(t3, t1);\nt1 = min(t3, t1);\nt3 = 1.0 / t0;\nt3 = t1 * t3;\nt4 = t3 * t3;\nt0 =         - 0.013480470;\nt0 = t0 * t4 + 0.057477314;\nt0 = t0 * t4 - 0.121239071;\nt0 = t0 * t4 + 0.195635925;\nt0 = t0 * t4 - 0.332994597;\nt0 = t0 * t4 + 0.999995630;\nt3 = t0 * t3;\nt3 = (abs(y) > abs(x)) ? 1.570796327 - t3 : t3;\nt3 = x < 0.0 ?  3.141592654 - t3 : t3;\nt3 = y < 0.0 ? -t3 : t3;\nreturn t3;\n}","encoding.glsl":"const vec4 rgba2float_factors = vec4(\n255.0 / (256.0),\n255.0 / (256.0 * 256.0),\n255.0 / (256.0 * 256.0 * 256.0),\n255.0 / (256.0 * 256.0 * 256.0 * 256.0)\n);\nfloat rgba2float(vec4 rgba) {\nreturn dot(rgba, rgba2float_factors);\n}"}};var i=new(n(56648).B)((function(e){var t=a;return e.split("/").forEach((function(e){t&&(t=t[e])})),t}));function o(e){return i.resolveIncludes(e)}},10435:function(e,t,n){n.d(t,{v:function(){return o}});var a=n(15671),i=n(43144),o=function(){function e(){(0,a.Z)(this,e)}return(0,i.Z)(e,null,[{key:"getStorageSpec",value:function(e){return null}},{key:"createOrUpdateRendererSchema",value:function(e,t){return null!=e&&"default"===e.type?e:{type:"default"}}},{key:"getVariation",value:function(e){return{}}},{key:"getVariationHash",value:function(e){return 0}}]),e}();o.type="default",o.programSpec=null},30575:function(e,t,n){n.d(t,{T:function(){return f}});var a=n(15671),i=n(43144),o=n(60136),r=n(29388),l=n(65800),s=n(94109),u=n(10435),c=n(8548),f=function(e){(0,o.Z)(n,e);var t=(0,r.Z)(n);function n(){return(0,a.Z)(this,n),t.apply(this,arguments)}return(0,i.Z)(n,null,[{key:"getStorageSpec",value:function(e){var t=e.attributes;return{visualVariables:!1,attributes:null!==t&&void 0!==t?t:null}}},{key:"_createRendererSchema",value:function(){return{type:"dot-density",colors:new Float32Array(32),dotValue:-1,dotSize:-1,dotScale:-1,dotBlending:!1,backgroundColor:new Float32Array(4),activeDots:new Float32Array(8),seed:-1}}},{key:"createOrUpdateRendererSchema",value:function(e,t){var n=t.attributes,a=t.dotValue,i=t.referenceScale,o=t.dotSize,r=t.dotBlendingEnabled,u=t.seed,c=t.backgroundColor,f=null!=e&&"dot-density"===e.type?e:this._createRendererSchema();f.dotValue=a,f.dotSize=o,f.dotScale=i,f.dotBlending=r,f.seed=u;for(var d=f.colors,_=f.activeDots,v=f.backgroundColor,m=0;m<s.$0;m++){var p=m>=n.length?null:n[m].color;(0,l.Vs)(d,p,4*m)}for(var g=0;g<8;g++)_[g]=g<t.attributes.length?1:0;return(0,l.Vs)(v,c),f}},{key:"getVariation",value:function(e){return{ddDotBlending:e.dotBlending}}},{key:"getVariationHash",value:function(e){return e.dotBlending?1:0}}]),n}(u.v);f.type="dot-density",f.programSpec={shader:"materials/fill",vertexLayout:{geometry:[{location:0,name:"a_pos",count:2,type:c.g.SHORT},{location:1,name:"a_id",count:3,type:c.g.UNSIGNED_BYTE},{location:2,name:"a_bitset",count:1,type:c.g.UNSIGNED_BYTE},{location:3,name:"a_inverseArea",count:1,type:c.g.FLOAT}]}}},41768:function(e,t,n){n.d(t,{h:function(){return f}});var a=n(15671),i=n(43144),o=n(60136),r=n(29388),l=n(17842),s=n(27811),u=n(10435),c=n(8548),f=function(e){(0,o.Z)(n,e);var t=(0,r.Z)(n);function n(){return(0,a.Z)(this,n),t.apply(this,arguments)}return(0,i.Z)(n,null,[{key:"getStorageSpec",value:function(e){var t=e.field,n=e.valueExpression;return{visualVariables:!1,attributes:t||n?[{field:t,valueExpression:n}]:null}}},{key:"_createRendererSchema",value:function(){return{type:"heatmap",radius:-1,referenceScale:-1,isFieldActive:0,minDensity:-1,densityRange:-1,kernel:null,gradient:null,gradientHash:"invalid"}}},{key:"createOrUpdateRendererSchema",value:function(e,t){var n,a=t.radius,i=t.minDensity,o=t.maxDensity,r=t.referenceScale,u=t.field,c=t.valueExpression,f=t.colorStops,d=o-i,_=u||c?1:0,v=f.map((function(e){var t=e.color,n=e.ratio;return"".concat(n,":").concat(t.toString())})).join(),m=!0;return null!=e&&"heatmap"===e.type?(n=e,m=v!==e.gradientHash):n=this._createRendererSchema(),n.radius=(0,l.F2)(a),n.minDensity=i,n.densityRange=d,n.referenceScale=r,n.isFieldActive=_,m&&(n.gradient=(0,s.uI)(f),n.gradientHash=v),n}}]),n}(u.v);f.type="heatmap",f.programSpec={shader:"materials/icon/heatmapAccumulate",vertexLayout:{geometry:[{location:0,name:"a_pos",count:2,type:c.g.SHORT},{location:1,name:"a_vertexOffset",count:2,type:c.g.SHORT},{location:4,name:"a_id",count:4,type:c.g.UNSIGNED_BYTE}]}}},78020:function(e,t,n){n.d(t,{c:function(){return _}});var a=n(15671),i=n(43144),o=n(60136),r=n(29388),l=n(51995),s=n(17842),u=n(65800),c=n(94109),f=n(10435),d=n(8548),_=function(e){(0,o.Z)(n,e);var t=(0,r.Z)(n);function n(){return(0,a.Z)(this,n),t.apply(this,arguments)}return(0,i.Z)(n,null,[{key:"getStorageSpec",value:function(e){var t=e.attributes;return{visualVariables:!0,attributes:null!==t&&void 0!==t?t:null}}},{key:"_createRendererSchema",value:function(){return{type:"pie-chart",colors:new Float32Array(4*c.eV),defaultColor:new Float32Array(4),othersColor:new Float32Array(4),outlineColor:new Float32Array(4),holePercentage:0,sectorThreshold:0,outlineWidth:1,numberOfFields:10}}},{key:"createOrUpdateRendererSchema",value:function(e,t){for(var n=t.attributes,a=t.defaultColor,i=t.holePercentage,o=t.othersCategory,r=t.outline,f=null!=e&&"pie-chart"===e.type?e:this._createRendererSchema(),d=0;d<c.eV;d++){var _=d>=n.length?new l.Z([0,0,0,0]):n[d].color;(0,u.Vs)(f.colors,_,4*d)}return(0,u.Vs)(f.defaultColor,a),(0,u.Vs)(f.othersColor,null===o||void 0===o?void 0:o.color),(0,u.Vs)(f.outlineColor,null===r||void 0===r?void 0:r.color),f.outlineWidth=(0,s.F2)((null===r||void 0===r?void 0:r.width)||0),f.holePercentage=i,f.sectorThreshold=(null===o||void 0===o?void 0:o.threshold)||0,f.numberOfFields=n.length,f}},{key:"getVariation",value:function(e){return{numberOfFields:e.numberOfFields}}},{key:"getVariationHash",value:function(e){return e.numberOfFields}}]),n}(f.v);_.type="pie-chart",_.programSpec={shader:"materials/pie",vertexLayout:{geometry:[{location:0,name:"a_pos",count:2,type:d.g.SHORT},{location:1,name:"a_vertexOffset",count:2,type:d.g.SHORT},{location:2,name:"a_texCoords",count:2,type:d.g.UNSIGNED_SHORT},{location:3,name:"a_bitSetAndDistRatio",count:2,type:d.g.UNSIGNED_SHORT},{location:4,name:"a_id",count:4,type:d.g.UNSIGNED_BYTE},{location:5,name:"a_color",count:4,type:d.g.UNSIGNED_BYTE,normalized:!0},{location:6,name:"a_outlineColor",count:4,type:d.g.UNSIGNED_BYTE,normalized:!0},{location:7,name:"a_sizeAndOutlineWidth",count:4,type:d.g.UNSIGNED_BYTE},{location:8,name:"a_zoomRange",count:2,type:d.g.UNSIGNED_SHORT}]},hittestAttributes:["a_vertexOffset","a_texCoords"]}},98029:function(e,t,n){n.d(t,{EJ:function(){return f},a1:function(){return d},t4:function(){return c}});var a=n(10064),i=n(80613),o=n(54815),r=n(10435),l=n(30575),s=n(41768),u=n(78020);function c(e,t){if(e.type!==t)throw new a.Z("material-view-model:unexpected-renderer-schema",'expected to find renderer schema of type "'.concat(t,'" but found type "').concat(e.type,'"'))}function f(e){switch(null===e||void 0===e?void 0:e.type){case"dot-density":return l.T;case"heatmap":return s.h;case"pie-chart":return u.c;default:return r.v}}function d(e){var t=o.m2.load(e),n=t.geometryType,a=t.symbologyType;switch(n){case i.LW.FILL:if(a===i.mD.DOT_DENSITY)return l.T;break;case i.LW.MARKER:switch(a){case i.mD.HEATMAP:return s.h;case i.mD.PIE_CHART:return u.c}}return r.v}},30308:function(e,t,n){function a(e){return window.WebGL2RenderingContext&&e instanceof window.WebGL2RenderingContext}n.d(t,{Z:function(){return a}})}}]);
//# sourceMappingURL=4510.9e464be0.chunk.js.map