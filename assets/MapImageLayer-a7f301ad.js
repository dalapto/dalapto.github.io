import{cM as w,dc as $,cQ as I,dd as O,cO as T,cP as E,cR as M,cN as R,de as j,df as P,bc as L,cS as N,d6 as b,aV as g,af as f,aO as F,dg as J,dh as k,di as q,b as v,k as U,v as i,w as n,dj as x,bj as A,dk as _,cW as V,x as z,aJ as W,dl as B}from"./index-425e7585.js";import{i as C}from"./scaleUtils-fae0b300.js";import{E as D,f as G,Y as H}from"./SublayersOwner-08f519bb.js";import{m as K}from"./ExportImageParameters-d1ba4be4.js";import{t as Q}from"./imageBitmapUtils-1bc91aa1.js";import{e as S}from"./sublayerUtils-9251b84d.js";import"./QueryTask-d72697bf.js";import"./executeForIds-54b745b7.js";import"./query-59047db6.js";import"./normalizeUtils-42f6ab93.js";import"./normalizeUtilsCommon-cf6c9e5b.js";import"./pbfQueryUtils-7d4c3c01.js";import"./pbf-b9d0e6c5.js";import"./OptimizedGeometry-33b2eb0d.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./executeQueryJSON-c3b195da.js";import"./executeQueryPBF-c7f79184.js";import"./featureConversionUtils-3c8f4fc9.js";import"./floorFilterUtils-080a7cd2.js";let s=class extends w($(I(D(G(O(T(E(M(R(j(P(L(W))))))))))))){constructor(...e){super(...e),this.dateFieldsTimeReference=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeReference=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,a){return typeof e=="string"?{url:e,...a}:e}load(e){const a=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(N).then(()=>this._fetchService(a))),Promise.resolve(this)}readImageFormat(e,a){const l=a.supportedImageFormatTypes;return l&&l.includes("PNG32")?"png32":"png24"}writeSublayers(e,a,l,t){var y;if(!this.loaded||!e)return;const o=e.slice().reverse().flatten(({sublayers:r})=>r&&r.toArray().reverse()).toArray();let p=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&((y=this.capabilities.exportMap)!=null&&y.supportsDynamicLayers)){const r=b(t.origin);if(r===g.PORTAL_ITEM){const c=this.createSublayersForOrigin("service").sublayers;p=S(o,c,g.SERVICE)}else if(r>g.PORTAL_ITEM){const c=this.createSublayersForOrigin("portal-item");p=S(o,c.sublayers,b(c.origin))}}const m=[],h={writeSublayerStructure:p,...t};let d=p;o.forEach(r=>{const c=r.write({},h);m.push(c),d=d||r.originOf("visible")==="user"}),m.some(r=>Object.keys(r).length>1)&&(a.layers=m),d&&(a.visibleLayers=o.filter(r=>r.visible).map(r=>r.id))}createExportImageParameters(e,a,l,t){const o=t&&t.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const p=new K({layer:this,floors:t==null?void 0:t.floors,scale:C({extent:e,width:a})*o}),m=p.toJSON();p.destroy();const h=!t||!t.rotation||this.version<10.3?{}:{rotation:-t.rotation},d=e&&e.spatialReference,y=d.wkid||JSON.stringify(d.toJSON());m.dpi*=o;const r={};if(t!=null&&t.timeExtent){const{start:c,end:u}=t.timeExtent.toJSON();r.time=c&&u&&c===u?""+c:`${c??"null"},${u??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(r.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:y,imageSR:y,size:a+","+l,...m,...h,...r}}async fetchImage(e,a,l,t){const{data:o}=await this._fetchImage("image",e,a,l,t);return o}async fetchImageBitmap(e,a,l,t){const{data:o,url:p}=await this._fetchImage("blob",e,a,l,t);return Q(o,p,t==null?void 0:t.signal)}async fetchRecomputedExtents(e={}){const a={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:l}=await f(this.url,a),{extent:t,fullExtent:o,timeExtent:p}=l,m=t||o;return{fullExtent:m&&F.fromJSON(m),timeExtent:p&&J.fromJSON({start:p[0],end:p[1]})}}loadAll(){return k(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return q(this,e)}async _fetchImage(e,a,l,t,o){var h,d,y;const p={responseType:e,signal:(o==null?void 0:o.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(a,l,t,o),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},m=this.parsedUrl.path+"/export";if(((h=p.query)==null?void 0:h.dynamicLayers)!=null&&!((y=(d=this.capabilities)==null?void 0:d.exportMap)!=null&&y.supportsDynamicLayers))throw new v("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:p.query});try{const{data:r}=await f(m,p);return{data:r,url:m}}catch(r){throw U(r)?r:new v("mapimagelayer:image-fetch-error",`Unable to load image: ${m}`,{error:r})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:a,ssl:l}=await f(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});l&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=a,this.read(a,{origin:"service",url:this.parsedUrl})}};i([n({type:x})],s.prototype,"dateFieldsTimeReference",void 0),i([n({type:Boolean})],s.prototype,"datesInUnknownTimezone",void 0),i([n()],s.prototype,"dpi",void 0),i([n()],s.prototype,"gdbVersion",void 0),i([n()],s.prototype,"imageFormat",void 0),i([A("imageFormat",["supportedImageFormatTypes"])],s.prototype,"readImageFormat",null),i([n({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],s.prototype,"imageMaxHeight",void 0),i([n({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],s.prototype,"imageMaxWidth",void 0),i([n()],s.prototype,"imageTransparency",void 0),i([n({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],s.prototype,"isReference",void 0),i([n({json:{read:!1,write:!1}})],s.prototype,"labelsVisible",void 0),i([n({type:["ArcGISMapServiceLayer"]})],s.prototype,"operationalLayerType",void 0),i([n({json:{read:!1,write:!1}})],s.prototype,"popupEnabled",void 0),i([n({type:x})],s.prototype,"preferredTimeReference",void 0),i([n()],s.prototype,"sourceJSON",void 0),i([n({json:{write:{ignoreOrigin:!0}}})],s.prototype,"sublayers",void 0),i([_("sublayers",{layers:{type:[H]},visibleLayers:{type:[B]}})],s.prototype,"writeSublayers",null),i([n({type:["show","hide","hide-children"]})],s.prototype,"listMode",void 0),i([n({json:{read:!1},readOnly:!0,value:"map-image"})],s.prototype,"type",void 0),i([n(V)],s.prototype,"url",void 0),s=i([z("esri.layers.MapImageLayer")],s);const ge=s;export{ge as default};
